<?php


/**
 * Base class that represents a row from the 'consultation' table.
 *
 * 
 *
 * @package    propel.generator.lt_parapheur.om
 */
abstract class BaseCommonConsultation extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'CommonConsultationPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        CommonConsultationPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinite loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the reference field.
     * @var        int
     */
    protected $reference;

    /**
     * The value for the organisme field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $organisme;

    /**
     * The value for the reference_utilisateur field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $reference_utilisateur;

    /**
     * The value for the categorie field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $categorie;

    /**
     * The value for the titre field.
     * @var        string
     */
    protected $titre;

    /**
     * The value for the resume field.
     * @var        string
     */
    protected $resume;

    /**
     * The value for the datedebut field.
     * Note: this column has a database default value of: NULL
     * @var        string
     */
    protected $datedebut;

    /**
     * The value for the datefin field.
     * Note: this column has a database default value of: NULL
     * @var        string
     */
    protected $datefin;

    /**
     * The value for the datevalidation field.
     * Note: this column has a database default value of: '0000-00-00 00:00:00'
     * @var        string
     */
    protected $datevalidation;

    /**
     * The value for the type_procedure field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $type_procedure;

    /**
     * The value for the code_procedure field.
     * @var        string
     */
    protected $code_procedure;

    /**
     * The value for the reponse_electronique field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $reponse_electronique;

    /**
     * The value for the num_procedure field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $num_procedure;

    /**
     * The value for the id_type_procedure field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_type_procedure;

    /**
     * The value for the id_type_avis field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_type_avis;

    /**
     * The value for the lieu_execution field.
     * @var        string
     */
    protected $lieu_execution;

    /**
     * The value for the type_mise_en_ligne field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $type_mise_en_ligne;

    /**
     * The value for the datemiseenligne field.
     * Note: this column has a database default value of: NULL
     * @var        string
     */
    protected $datemiseenligne;

    /**
     * The value for the is_tiers_avis field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $is_tiers_avis;

    /**
     * The value for the url field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $url;

    /**
     * The value for the datefin_sad field.
     * Note: this column has a database default value of: NULL
     * @var        string
     */
    protected $datefin_sad;

    /**
     * The value for the is_sys_acq_dyn field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $is_sys_acq_dyn;

    /**
     * The value for the reference_consultation_init field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $reference_consultation_init;

    /**
     * The value for the signature_offre field.
     * @var        string
     */
    protected $signature_offre;

    /**
     * The value for the id_type_validation field.
     * Note: this column has a database default value of: 2
     * @var        int
     */
    protected $id_type_validation;

    /**
     * The value for the etat_approbation field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $etat_approbation;

    /**
     * The value for the etat_validation field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $etat_validation;

    /**
     * The value for the champ_supp_invisible field.
     * @var        string
     */
    protected $champ_supp_invisible;

    /**
     * The value for the code_cpv_1 field.
     * @var        string
     */
    protected $code_cpv_1;

    /**
     * The value for the code_cpv_2 field.
     * @var        string
     */
    protected $code_cpv_2;

    /**
     * The value for the publication_europe field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $publication_europe;

    /**
     * The value for the etat_publication field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $etat_publication;

    /**
     * The value for the poursuivre_affichage field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $poursuivre_affichage;

    /**
     * The value for the nbr_telechargement_dce field.
     * @var        int
     */
    protected $nbr_telechargement_dce;

    /**
     * The value for the service_id field.
     * @var        int
     */
    protected $service_id;

    /**
     * The value for the service_associe_id field.
     * @var        int
     */
    protected $service_associe_id;

    /**
     * The value for the detail_consultation field.
     * @var        string
     */
    protected $detail_consultation;

    /**
     * The value for the date_fin_affichage field.
     * Note: this column has a database default value of: '0000-00-00 00:00:00'
     * @var        string
     */
    protected $date_fin_affichage;

    /**
     * The value for the depouillable_phase_consultation field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $depouillable_phase_consultation;

    /**
     * The value for the consultation_transverse field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $consultation_transverse;

    /**
     * The value for the consultation_achat_publique field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $consultation_achat_publique;

    /**
     * The value for the url_consultation_achat_publique field.
     * @var        string
     */
    protected $url_consultation_achat_publique;

    /**
     * The value for the partial_dce_download field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $partial_dce_download;

    /**
     * The value for the tirage_plan field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $tirage_plan;

    /**
     * The value for the tireur_plan field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $tireur_plan;

    /**
     * The value for the date_mise_en_ligne_calcule field.
     * @var        string
     */
    protected $date_mise_en_ligne_calcule;

    /**
     * The value for the accessibilite_en field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_en;

    /**
     * The value for the accessibilite_es field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_es;

    /**
     * The value for the nbr_reponse field.
     * @var        int
     */
    protected $nbr_reponse;

    /**
     * The value for the id_type_procedure_org field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_type_procedure_org;

    /**
     * The value for the organisme_consultation_init field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $organisme_consultation_init;

    /**
     * The value for the tirage_descriptif field.
     * @var        string
     */
    protected $tirage_descriptif;

    /**
     * The value for the date_validation_intermediaire field.
     * @var        string
     */
    protected $date_validation_intermediaire;

    /**
     * The value for the accessibilite_fr field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_fr;

    /**
     * The value for the id_tr_accessibilite field.
     * @var        int
     */
    protected $id_tr_accessibilite;

    /**
     * The value for the accessibilite_cz field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_cz;

    /**
     * The value for the accessibilite_du field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_du;

    /**
     * The value for the accessibilite_su field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_su;

    /**
     * The value for the accessibilite_ar field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_ar;

    /**
     * The value for the alloti field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $alloti;

    /**
     * The value for the numero_phase field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $numero_phase;

    /**
     * The value for the consultation_externe field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $consultation_externe;

    /**
     * The value for the url_consultation_externe field.
     * @var        string
     */
    protected $url_consultation_externe;

    /**
     * The value for the org_denomination field.
     * @var        string
     */
    protected $org_denomination;

    /**
     * The value for the domaines_activites field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $domaines_activites;

    /**
     * The value for the id_affaire field.
     * @var        int
     */
    protected $id_affaire;

    /**
     * The value for the adresse_retrais_dossiers field.
     * @var        string
     */
    protected $adresse_retrais_dossiers;

    /**
     * The value for the caution_provisoire field.
     * @var        string
     */
    protected $caution_provisoire;

    /**
     * The value for the adresse_depot_offres field.
     * @var        string
     */
    protected $adresse_depot_offres;

    /**
     * The value for the lieu_ouverture_plis field.
     * @var        string
     */
    protected $lieu_ouverture_plis;

    /**
     * The value for the prix_aquisition_plans field.
     * @var        string
     */
    protected $prix_aquisition_plans;

    /**
     * The value for the qualification field.
     * @var        string
     */
    protected $qualification;

    /**
     * The value for the agrements field.
     * @var        string
     */
    protected $agrements;

    /**
     * The value for the add_echantillion field.
     * @var        string
     */
    protected $add_echantillion;

    /**
     * The value for the date_limite_echantillion field.
     * @var        string
     */
    protected $date_limite_echantillion;

    /**
     * The value for the add_reunion field.
     * @var        string
     */
    protected $add_reunion;

    /**
     * The value for the date_reunion field.
     * @var        string
     */
    protected $date_reunion;

    /**
     * The value for the variantes field.
     * @var        string
     */
    protected $variantes;

    /**
     * The value for the adresse_retrais_dossiers_ar field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_ar;

    /**
     * The value for the adresse_depot_offres_ar field.
     * @var        string
     */
    protected $adresse_depot_offres_ar;

    /**
     * The value for the lieu_ouverture_plis_ar field.
     * @var        string
     */
    protected $lieu_ouverture_plis_ar;

    /**
     * The value for the pieces_dossier_admin field.
     * @var        string
     */
    protected $pieces_dossier_admin;

    /**
     * The value for the pieces_dossier_admin_fr field.
     * @var        string
     */
    protected $pieces_dossier_admin_fr;

    /**
     * The value for the pieces_dossier_admin_en field.
     * @var        string
     */
    protected $pieces_dossier_admin_en;

    /**
     * The value for the pieces_dossier_admin_es field.
     * @var        string
     */
    protected $pieces_dossier_admin_es;

    /**
     * The value for the pieces_dossier_admin_su field.
     * @var        string
     */
    protected $pieces_dossier_admin_su;

    /**
     * The value for the pieces_dossier_admin_du field.
     * @var        string
     */
    protected $pieces_dossier_admin_du;

    /**
     * The value for the pieces_dossier_admin_cz field.
     * @var        string
     */
    protected $pieces_dossier_admin_cz;

    /**
     * The value for the pieces_dossier_admin_ar field.
     * @var        string
     */
    protected $pieces_dossier_admin_ar;

    /**
     * The value for the pieces_dossier_tech field.
     * @var        string
     */
    protected $pieces_dossier_tech;

    /**
     * The value for the pieces_dossier_tech_fr field.
     * @var        string
     */
    protected $pieces_dossier_tech_fr;

    /**
     * The value for the pieces_dossier_tech_en field.
     * @var        string
     */
    protected $pieces_dossier_tech_en;

    /**
     * The value for the pieces_dossier_tech_es field.
     * @var        string
     */
    protected $pieces_dossier_tech_es;

    /**
     * The value for the pieces_dossier_tech_su field.
     * @var        string
     */
    protected $pieces_dossier_tech_su;

    /**
     * The value for the pieces_dossier_tech_du field.
     * @var        string
     */
    protected $pieces_dossier_tech_du;

    /**
     * The value for the pieces_dossier_tech_cz field.
     * @var        string
     */
    protected $pieces_dossier_tech_cz;

    /**
     * The value for the pieces_dossier_tech_ar field.
     * @var        string
     */
    protected $pieces_dossier_tech_ar;

    /**
     * The value for the pieces_dossier_additif field.
     * @var        string
     */
    protected $pieces_dossier_additif;

    /**
     * The value for the pieces_dossier_additif_fr field.
     * @var        string
     */
    protected $pieces_dossier_additif_fr;

    /**
     * The value for the pieces_dossier_additif_en field.
     * @var        string
     */
    protected $pieces_dossier_additif_en;

    /**
     * The value for the pieces_dossier_additif_es field.
     * @var        string
     */
    protected $pieces_dossier_additif_es;

    /**
     * The value for the pieces_dossier_additif_su field.
     * @var        string
     */
    protected $pieces_dossier_additif_su;

    /**
     * The value for the pieces_dossier_additif_du field.
     * @var        string
     */
    protected $pieces_dossier_additif_du;

    /**
     * The value for the pieces_dossier_additif_cz field.
     * @var        string
     */
    protected $pieces_dossier_additif_cz;

    /**
     * The value for the pieces_dossier_additif_ar field.
     * @var        string
     */
    protected $pieces_dossier_additif_ar;

    /**
     * The value for the id_rpa field.
     * @var        int
     */
    protected $id_rpa;

    /**
     * The value for the detail_consultation_fr field.
     * @var        string
     */
    protected $detail_consultation_fr;

    /**
     * The value for the detail_consultation_en field.
     * @var        string
     */
    protected $detail_consultation_en;

    /**
     * The value for the detail_consultation_es field.
     * @var        string
     */
    protected $detail_consultation_es;

    /**
     * The value for the detail_consultation_su field.
     * @var        string
     */
    protected $detail_consultation_su;

    /**
     * The value for the detail_consultation_du field.
     * @var        string
     */
    protected $detail_consultation_du;

    /**
     * The value for the detail_consultation_cz field.
     * @var        string
     */
    protected $detail_consultation_cz;

    /**
     * The value for the detail_consultation_ar field.
     * @var        string
     */
    protected $detail_consultation_ar;

    /**
     * The value for the echantillon field.
     * @var        string
     */
    protected $echantillon;

    /**
     * The value for the reunion field.
     * @var        string
     */
    protected $reunion;

    /**
     * The value for the visites_lieux field.
     * @var        string
     */
    protected $visites_lieux;

    /**
     * The value for the variante_calcule field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $variante_calcule;

    /**
     * The value for the adresse_retrais_dossiers_fr field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_fr;

    /**
     * The value for the adresse_retrais_dossiers_en field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_en;

    /**
     * The value for the adresse_retrais_dossiers_es field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_es;

    /**
     * The value for the adresse_retrais_dossiers_su field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_su;

    /**
     * The value for the adresse_retrais_dossiers_du field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_du;

    /**
     * The value for the adresse_retrais_dossiers_cz field.
     * @var        string
     */
    protected $adresse_retrais_dossiers_cz;

    /**
     * The value for the adresse_depot_offres_fr field.
     * @var        string
     */
    protected $adresse_depot_offres_fr;

    /**
     * The value for the adresse_depot_offres_en field.
     * @var        string
     */
    protected $adresse_depot_offres_en;

    /**
     * The value for the adresse_depot_offres_es field.
     * @var        string
     */
    protected $adresse_depot_offres_es;

    /**
     * The value for the adresse_depot_offres_su field.
     * @var        string
     */
    protected $adresse_depot_offres_su;

    /**
     * The value for the adresse_depot_offres_du field.
     * @var        string
     */
    protected $adresse_depot_offres_du;

    /**
     * The value for the adresse_depot_offres_cz field.
     * @var        string
     */
    protected $adresse_depot_offres_cz;

    /**
     * The value for the lieu_ouverture_plis_fr field.
     * @var        string
     */
    protected $lieu_ouverture_plis_fr;

    /**
     * The value for the lieu_ouverture_plis_en field.
     * @var        string
     */
    protected $lieu_ouverture_plis_en;

    /**
     * The value for the lieu_ouverture_plis_es field.
     * @var        string
     */
    protected $lieu_ouverture_plis_es;

    /**
     * The value for the lieu_ouverture_plis_su field.
     * @var        string
     */
    protected $lieu_ouverture_plis_su;

    /**
     * The value for the lieu_ouverture_plis_du field.
     * @var        string
     */
    protected $lieu_ouverture_plis_du;

    /**
     * The value for the lieu_ouverture_plis_cz field.
     * @var        string
     */
    protected $lieu_ouverture_plis_cz;

    /**
     * The value for the add_echantillion_fr field.
     * @var        string
     */
    protected $add_echantillion_fr;

    /**
     * The value for the add_echantillion_en field.
     * @var        string
     */
    protected $add_echantillion_en;

    /**
     * The value for the add_echantillion_es field.
     * @var        string
     */
    protected $add_echantillion_es;

    /**
     * The value for the add_echantillion_su field.
     * @var        string
     */
    protected $add_echantillion_su;

    /**
     * The value for the add_echantillion_du field.
     * @var        string
     */
    protected $add_echantillion_du;

    /**
     * The value for the add_echantillion_cz field.
     * @var        string
     */
    protected $add_echantillion_cz;

    /**
     * The value for the add_echantillion_ar field.
     * @var        string
     */
    protected $add_echantillion_ar;

    /**
     * The value for the add_reunion_fr field.
     * @var        string
     */
    protected $add_reunion_fr;

    /**
     * The value for the add_reunion_en field.
     * @var        string
     */
    protected $add_reunion_en;

    /**
     * The value for the add_reunion_es field.
     * @var        string
     */
    protected $add_reunion_es;

    /**
     * The value for the add_reunion_su field.
     * @var        string
     */
    protected $add_reunion_su;

    /**
     * The value for the add_reunion_du field.
     * @var        string
     */
    protected $add_reunion_du;

    /**
     * The value for the add_reunion_cz field.
     * @var        string
     */
    protected $add_reunion_cz;

    /**
     * The value for the add_reunion_ar field.
     * @var        string
     */
    protected $add_reunion_ar;

    /**
     * The value for the mode_passation field.
     * @var        string
     */
    protected $mode_passation;

    /**
     * The value for the consultation_annulee field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $consultation_annulee;

    /**
     * The value for the compte_boamp_associe field.
     * @var        int
     */
    protected $compte_boamp_associe;

    /**
     * The value for the accessibilite_it field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $accessibilite_it;

    /**
     * The value for the adresse_depot_offres_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $adresse_depot_offres_it;

    /**
     * The value for the lieu_ouverture_plis_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $lieu_ouverture_plis_it;

    /**
     * The value for the adresse_retrais_dossiers_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $adresse_retrais_dossiers_it;

    /**
     * The value for the pieces_dossier_admin_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $pieces_dossier_admin_it;

    /**
     * The value for the pieces_dossier_tech_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $pieces_dossier_tech_it;

    /**
     * The value for the pieces_dossier_additif_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $pieces_dossier_additif_it;

    /**
     * The value for the detail_consultation_it field.
     * @var        string
     */
    protected $detail_consultation_it;

    /**
     * The value for the add_echantillion_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $add_echantillion_it;

    /**
     * The value for the add_reunion_it field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $add_reunion_it;

    /**
     * The value for the codes_nuts field.
     * @var        string
     */
    protected $codes_nuts;

    /**
     * The value for the intitule field.
     * @var        string
     */
    protected $intitule;

    /**
     * The value for the id_tr_intitule field.
     * @var        int
     */
    protected $id_tr_intitule;

    /**
     * The value for the objet field.
     * @var        string
     */
    protected $objet;

    /**
     * The value for the id_tr_objet field.
     * @var        int
     */
    protected $id_tr_objet;

    /**
     * The value for the date_decision field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $date_decision;

    /**
     * The value for the type_acces field.
     * @var        string
     */
    protected $type_acces;

    /**
     * The value for the autoriser_reponse_electronique field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $autoriser_reponse_electronique;

    /**
     * The value for the regle_mise_en_ligne field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $regle_mise_en_ligne;

    /**
     * The value for the id_regle_validation field.
     * Note: this column has a database default value of: 2
     * @var        int
     */
    protected $id_regle_validation;

    /**
     * The value for the intitule_fr field.
     * @var        string
     */
    protected $intitule_fr;

    /**
     * The value for the intitule_en field.
     * @var        string
     */
    protected $intitule_en;

    /**
     * The value for the intitule_es field.
     * @var        string
     */
    protected $intitule_es;

    /**
     * The value for the intitule_su field.
     * @var        string
     */
    protected $intitule_su;

    /**
     * The value for the intitule_du field.
     * @var        string
     */
    protected $intitule_du;

    /**
     * The value for the intitule_cz field.
     * @var        string
     */
    protected $intitule_cz;

    /**
     * The value for the intitule_ar field.
     * @var        string
     */
    protected $intitule_ar;

    /**
     * The value for the intitule_it field.
     * @var        string
     */
    protected $intitule_it;

    /**
     * The value for the objet_fr field.
     * @var        string
     */
    protected $objet_fr;

    /**
     * The value for the objet_en field.
     * @var        string
     */
    protected $objet_en;

    /**
     * The value for the objet_es field.
     * @var        string
     */
    protected $objet_es;

    /**
     * The value for the objet_su field.
     * @var        string
     */
    protected $objet_su;

    /**
     * The value for the objet_du field.
     * @var        string
     */
    protected $objet_du;

    /**
     * The value for the objet_cz field.
     * @var        string
     */
    protected $objet_cz;

    /**
     * The value for the objet_ar field.
     * @var        string
     */
    protected $objet_ar;

    /**
     * The value for the objet_it field.
     * @var        string
     */
    protected $objet_it;

    /**
     * The value for the clause_sociale field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_sociale;

    /**
     * The value for the clause_environnementale field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_environnementale;

    /**
     * The value for the reponse_obligatoire field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $reponse_obligatoire;

    /**
     * The value for the autoriser_publicite field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $autoriser_publicite;

    /**
     * The value for the type_envoi field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $type_envoi;

    /**
     * The value for the chiffrement_offre field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $chiffrement_offre;

    /**
     * The value for the env_candidature field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $env_candidature;

    /**
     * The value for the env_offre field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $env_offre;

    /**
     * The value for the env_anonymat field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $env_anonymat;

    /**
     * The value for the id_etat_consultation field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_etat_consultation;

    /**
     * The value for the reference_connecteur field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $reference_connecteur;

    /**
     * The value for the cons_statut field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $cons_statut;

    /**
     * The value for the id_approbateur field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_approbateur;

    /**
     * The value for the id_valideur field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_valideur;

    /**
     * The value for the service_validation field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $service_validation;

    /**
     * The value for the id_createur field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_createur;

    /**
     * The value for the nom_createur field.
     * @var        string
     */
    protected $nom_createur;

    /**
     * The value for the prenom_createur field.
     * @var        string
     */
    protected $prenom_createur;

    /**
     * The value for the signature_acte_engagement field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $signature_acte_engagement;

    /**
     * The value for the archivemetadescription field.
     * @var        string
     */
    protected $archivemetadescription;

    /**
     * The value for the archivemetamotsclef field.
     * @var        string
     */
    protected $archivemetamotsclef;

    /**
     * The value for the archiveidblobzip field.
     * @var        int
     */
    protected $archiveidblobzip;

    /**
     * The value for the decision_partielle field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $decision_partielle;

    /**
     * The value for the type_decision_a_renseigner field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_a_renseigner;

    /**
     * The value for the type_decision_attribution_marche field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_attribution_marche;

    /**
     * The value for the type_decision_declaration_sans_suite field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_declaration_sans_suite;

    /**
     * The value for the type_decision_declaration_infructueux field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_declaration_infructueux;

    /**
     * The value for the type_decision_selection_entreprise field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_selection_entreprise;

    /**
     * The value for the type_decision_attribution_accord_cadre field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_attribution_accord_cadre;

    /**
     * The value for the type_decision_admission_sad field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_admission_sad;

    /**
     * The value for the type_decision_autre field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $type_decision_autre;

    /**
     * The value for the id_archiveur field.
     * @var        int
     */
    protected $id_archiveur;

    /**
     * The value for the prenom_nom_agent_telechargement_plis field.
     * @var        string
     */
    protected $prenom_nom_agent_telechargement_plis;

    /**
     * The value for the id_agent_telechargement_plis field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $id_agent_telechargement_plis;

    /**
     * The value for the path_telechargement_plis field.
     * @var        string
     */
    protected $path_telechargement_plis;

    /**
     * The value for the date_telechargement_plis field.
     * @var        string
     */
    protected $date_telechargement_plis;

    /**
     * The value for the service_validation_intermediaire field.
     * @var        int
     */
    protected $service_validation_intermediaire;

    /**
     * The value for the env_offre_technique field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $env_offre_technique;

    /**
     * The value for the ref_org_partenaire field.
     * Note: this column has a database default value of: ''
     * @var        string
     */
    protected $ref_org_partenaire;

    /**
     * The value for the date_archivage field.
     * @var        string
     */
    protected $date_archivage;

    /**
     * The value for the date_decision_annulation field.
     * @var        string
     */
    protected $date_decision_annulation;

    /**
     * The value for the commentaire_annulation field.
     * @var        string
     */
    protected $commentaire_annulation;

    /**
     * The value for the date_mise_en_ligne_souhaitee field.
     * @var        string
     */
    protected $date_mise_en_ligne_souhaitee;

    /**
     * The value for the etat_en_attente_validation field.
     * Note: this column has a database default value of: '1'
     * @var        string
     */
    protected $etat_en_attente_validation;

    /**
     * The value for the dossier_additif field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $dossier_additif;

    /**
     * The value for the type_marche field.
     * Note: this column has a database default value of: 0
     * @var        int
     */
    protected $type_marche;

    /**
     * The value for the type_prestation field.
     * Note: this column has a database default value of: 1
     * @var        int
     */
    protected $type_prestation;

    /**
     * The value for the date_modification field.
     * @var        string
     */
    protected $date_modification;

    /**
     * The value for the delai_partiel field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $delai_partiel;

    /**
     * The value for the datefinlocale field.
     * Note: this column has a database default value of: '0000-00-00 00:00:00'
     * @var        string
     */
    protected $datefinlocale;

    /**
     * The value for the lieuresidence field.
     * @var        string
     */
    protected $lieuresidence;

    /**
     * The value for the alerte field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $alerte;

    /**
     * The value for the doublon field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $doublon;

    /**
     * The value for the denomination_adapte field.
     * @var        string
     */
    protected $denomination_adapte;

    /**
     * The value for the url_consultation_avis_pub field.
     * @var        string
     */
    protected $url_consultation_avis_pub;

    /**
     * The value for the doublon_de field.
     * @var        string
     */
    protected $doublon_de;

    /**
     * The value for the entite_adjudicatrice field.
     * @var        string
     */
    protected $entite_adjudicatrice;

    /**
     * The value for the code_operation field.
     * @var        string
     */
    protected $code_operation;

    /**
     * The value for the clause_sociale_condition_execution field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_sociale_condition_execution;

    /**
     * The value for the clause_sociale_insertion field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_sociale_insertion;

    /**
     * The value for the clause_sociale_ateliers_proteges field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_sociale_ateliers_proteges;

    /**
     * The value for the clause_env_specs_techniques field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_env_specs_techniques;

    /**
     * The value for the clause_env_cond_execution field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_env_cond_execution;

    /**
     * The value for the clause_env_criteres_select field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $clause_env_criteres_select;

    /**
     * The value for the id_donnee_complementaire field.
     * @var        int
     */
    protected $id_donnee_complementaire;

    /**
     * The value for the donnee_complementaire_obligatoire field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $donnee_complementaire_obligatoire;

    /**
     * The value for the mode_ouverture_reponse field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $mode_ouverture_reponse;

    /**
     * The value for the id_fichier_annulation field.
     * @var        int
     */
    protected $id_fichier_annulation;

    /**
     * The value for the idoperation field.
     * @var        int
     */
    protected $idoperation;

    /**
     * The value for the marche_public_simplifie field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $marche_public_simplifie;

    /**
     * The value for the infos_blocs_atlas field.
     * Note: this column has a database default value of: '0##0'
     * @var        string
     */
    protected $infos_blocs_atlas;

    /**
     * The value for the date_fin_unix field.
     * Note: this column has a database default value of: '0'
     * @var        string
     */
    protected $date_fin_unix;

    /**
     * The value for the date_achevement field.
     * @var        string
     */
    protected $date_achevement;

    /**
     * The value for the nombre_de_lots field.
     * @var        int
     */
    protected $nombre_de_lots;

    /**
     * @var        PropelObjectCollection|CommonAVIS[] Collection to store aggregation of CommonAVIS objects.
     */
    protected $collCommonAVISs;
    protected $collCommonAVISsPartial;

    /**
     * @var        PropelObjectCollection|CommonAnnonce[] Collection to store aggregation of CommonAnnonce objects.
     */
    protected $collCommonAnnonces;
    protected $collCommonAnnoncesPartial;

    /**
     * @var        PropelObjectCollection|CommonAnnonceBoamp[] Collection to store aggregation of CommonAnnonceBoamp objects.
     */
    protected $collCommonAnnonceBoampsRelatedByOrganismeConsultationRef;
    protected $collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial;

    /**
     * @var        PropelObjectCollection|CommonAnnonceBoamp[] Collection to store aggregation of CommonAnnonceBoamp objects.
     */
    protected $collCommonAnnonceBoampsRelatedByConsultationRef;
    protected $collCommonAnnonceBoampsRelatedByConsultationRefPartial;

    /**
     * @var        PropelObjectCollection|CommonAvisPub[] Collection to store aggregation of CommonAvisPub objects.
     */
    protected $collCommonAvisPubs;
    protected $collCommonAvisPubsPartial;

    /**
     * @var        PropelObjectCollection|CommonCategorieLot[] Collection to store aggregation of CommonCategorieLot objects.
     */
    protected $collCommonCategorieLots;
    protected $collCommonCategorieLotsPartial;

    /**
     * @var        PropelObjectCollection|CommonComplement[] Collection to store aggregation of CommonComplement objects.
     */
    protected $collCommonComplements;
    protected $collCommonComplementsPartial;

    /**
     * @var        PropelObjectCollection|CommonConsultationHistoriqueEtat[] Collection to store aggregation of CommonConsultationHistoriqueEtat objects.
     */
    protected $collCommonConsultationHistoriqueEtats;
    protected $collCommonConsultationHistoriqueEtatsPartial;

    /**
     * @var        PropelObjectCollection|CommonDATEFIN[] Collection to store aggregation of CommonDATEFIN objects.
     */
    protected $collCommonDATEFINs;
    protected $collCommonDATEFINsPartial;

    /**
     * @var        PropelObjectCollection|CommonDAConsultation[] Collection to store aggregation of CommonDAConsultation objects.
     */
    protected $collCommonDAConsultations;
    protected $collCommonDAConsultationsPartial;

    /**
     * @var        PropelObjectCollection|CommonDCE[] Collection to store aggregation of CommonDCE objects.
     */
    protected $collCommonDCEs;
    protected $collCommonDCEsPartial;

    /**
     * @var        PropelObjectCollection|CommonDocumentExterne[] Collection to store aggregation of CommonDocumentExterne objects.
     */
    protected $collCommonDocumentExternes;
    protected $collCommonDocumentExternesPartial;

    /**
     * @var        PropelObjectCollection|CommonHeliosPiecePublicite[] Collection to store aggregation of CommonHeliosPiecePublicite objects.
     */
    protected $collCommonHeliosPiecePublicites;
    protected $collCommonHeliosPiecePublicitesPartial;

    /**
     * @var        PropelObjectCollection|CommonHeliosPvConsultation[] Collection to store aggregation of CommonHeliosPvConsultation objects.
     */
    protected $collCommonHeliosPvConsultations;
    protected $collCommonHeliosPvConsultationsPartial;

    /**
     * @var        PropelObjectCollection|CommonHeliosRapportPrefet[] Collection to store aggregation of CommonHeliosRapportPrefet objects.
     */
    protected $collCommonHeliosRapportPrefets;
    protected $collCommonHeliosRapportPrefetsPartial;

    /**
     * @var        PropelObjectCollection|CommonHeliosTableauAr[] Collection to store aggregation of CommonHeliosTableauAr objects.
     */
    protected $collCommonHeliosTableauArs;
    protected $collCommonHeliosTableauArsPartial;

    /**
     * @var        PropelObjectCollection|CommonHeliosTeletransmission[] Collection to store aggregation of CommonHeliosTeletransmission objects.
     */
    protected $collCommonHeliosTeletransmissions;
    protected $collCommonHeliosTeletransmissionsPartial;

    /**
     * @var        PropelObjectCollection|CommonInterneConsultation[] Collection to store aggregation of CommonInterneConsultation objects.
     */
    protected $collCommonInterneConsultations;
    protected $collCommonInterneConsultationsPartial;

    /**
     * @var        PropelObjectCollection|CommonInterneConsultationSuiviSeul[] Collection to store aggregation of CommonInterneConsultationSuiviSeul objects.
     */
    protected $collCommonInterneConsultationSuiviSeuls;
    protected $collCommonInterneConsultationSuiviSeulsPartial;

    /**
     * @var        PropelObjectCollection|CommonOffrePapier[] Collection to store aggregation of CommonOffrePapier objects.
     */
    protected $collCommonOffrePapiers;
    protected $collCommonOffrePapiersPartial;

    /**
     * @var        PropelObjectCollection|CommonOffres[] Collection to store aggregation of CommonOffres objects.
     */
    protected $collCommonOffress;
    protected $collCommonOffressPartial;

    /**
     * @var        PropelObjectCollection|CommonPanierEntreprise[] Collection to store aggregation of CommonPanierEntreprise objects.
     */
    protected $collCommonPanierEntreprises;
    protected $collCommonPanierEntreprisesPartial;

    /**
     * @var        PropelObjectCollection|CommonPiecesDCE[] Collection to store aggregation of CommonPiecesDCE objects.
     */
    protected $collCommonPiecesDCEsRelatedByRefConsultation;
    protected $collCommonPiecesDCEsRelatedByRefConsultationPartial;

    /**
     * @var        PropelObjectCollection|CommonPiecesDCE[] Collection to store aggregation of CommonPiecesDCE objects.
     */
    protected $collCommonPiecesDCEsRelatedByOrganismeConsultation;
    protected $collCommonPiecesDCEsRelatedByOrganismeConsultationPartial;

    /**
     * @var        PropelObjectCollection|CommonRG[] Collection to store aggregation of CommonRG objects.
     */
    protected $collCommonRGs;
    protected $collCommonRGsPartial;

    /**
     * @var        PropelObjectCollection|CommonRetraitPapier[] Collection to store aggregation of CommonRetraitPapier objects.
     */
    protected $collCommonRetraitPapiers;
    protected $collCommonRetraitPapiersPartial;

    /**
     * @var        PropelObjectCollection|CommonSupportPublication[] Collection to store aggregation of CommonSupportPublication objects.
     */
    protected $collCommonSupportPublications;
    protected $collCommonSupportPublicationsPartial;

    /**
     * @var        PropelObjectCollection|CommonTelechargement[] Collection to store aggregation of CommonTelechargement objects.
     */
    protected $collCommonTelechargements;
    protected $collCommonTelechargementsPartial;

    /**
     * @var        PropelObjectCollection|CommonTelechargementAnonyme[] Collection to store aggregation of CommonTelechargementAnonyme objects.
     */
    protected $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef;
    protected $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial;

    /**
     * @var        PropelObjectCollection|CommonTelechargementAnonyme[] Collection to store aggregation of CommonTelechargementAnonyme objects.
     */
    protected $collCommonTelechargementAnonymesRelatedByConsultationRef;
    protected $collCommonTelechargementAnonymesRelatedByConsultationRefPartial;

    /**
     * @var        PropelObjectCollection|CommonConsultationDocumentCfe[] Collection to store aggregation of CommonConsultationDocumentCfe objects.
     */
    protected $collCommonConsultationDocumentCfes;
    protected $collCommonConsultationDocumentCfesPartial;

    /**
     * @var        PropelObjectCollection|CommonTCalendrier[] Collection to store aggregation of CommonTCalendrier objects.
     */
    protected $collCommonTCalendriers;
    protected $collCommonTCalendriersPartial;

    /**
     * @var        PropelObjectCollection|CommonTParamDossierFormulaire[] Collection to store aggregation of CommonTParamDossierFormulaire objects.
     */
    protected $collCommonTParamDossierFormulaires;
    protected $collCommonTParamDossierFormulairesPartial;

    /**
     * @var        PropelObjectCollection|CommonTReponseElecFormulaire[] Collection to store aggregation of CommonTReponseElecFormulaire objects.
     */
    protected $collCommonTReponseElecFormulaires;
    protected $collCommonTReponseElecFormulairesPartial;

    /**
     * @var        PropelObjectCollection|CommonVisiteLieux[] Collection to store aggregation of CommonVisiteLieux objects.
     */
    protected $collCommonVisiteLieuxs;
    protected $collCommonVisiteLieuxsPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    /**
     * Flag to prevent endless clearAllReferences($deep=true) loop, if this object is referenced
     * @var        boolean
     */
    protected $alreadyInClearAllReferencesDeep = false;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonAVISsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonAnnoncesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonAvisPubsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonCategorieLotsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonComplementsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonConsultationHistoriqueEtatsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonDATEFINsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonDAConsultationsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonDCEsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonDocumentExternesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonHeliosPiecePublicitesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonHeliosPvConsultationsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonHeliosRapportPrefetsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonHeliosTableauArsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonHeliosTeletransmissionsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonInterneConsultationsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonInterneConsultationSuiviSeulsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonOffrePapiersScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonOffressScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonPanierEntreprisesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonRGsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonRetraitPapiersScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonSupportPublicationsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonTelechargementsScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonConsultationDocumentCfesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonTCalendriersScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonTParamDossierFormulairesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonTReponseElecFormulairesScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $commonVisiteLieuxsScheduledForDeletion = null;

    /**
     * Applies default values to this object.
     * This method should be called from the object's constructor (or
     * equivalent initialization method).
     * @see        __construct()
     */
    public function applyDefaultValues()
    {
        $this->organisme = '';
        $this->reference_utilisateur = '';
        $this->categorie = '0';
        $this->datedebut = NULL;
        $this->datefin = NULL;
        $this->datevalidation = '0000-00-00 00:00:00';
        $this->type_procedure = '';
        $this->reponse_electronique = '1';
        $this->num_procedure = 0;
        $this->id_type_procedure = 0;
        $this->id_type_avis = 0;
        $this->type_mise_en_ligne = 1;
        $this->datemiseenligne = NULL;
        $this->is_tiers_avis = '0';
        $this->url = '';
        $this->datefin_sad = NULL;
        $this->is_sys_acq_dyn = 0;
        $this->reference_consultation_init = '';
        $this->id_type_validation = 2;
        $this->etat_approbation = '0';
        $this->etat_validation = '0';
        $this->publication_europe = '0';
        $this->etat_publication = 0;
        $this->poursuivre_affichage = 0;
        $this->date_fin_affichage = '0000-00-00 00:00:00';
        $this->depouillable_phase_consultation = '0';
        $this->consultation_transverse = '0';
        $this->consultation_achat_publique = '0';
        $this->partial_dce_download = '0';
        $this->tirage_plan = 0;
        $this->tireur_plan = 0;
        $this->accessibilite_en = '0';
        $this->accessibilite_es = '0';
        $this->id_type_procedure_org = 0;
        $this->organisme_consultation_init = '';
        $this->accessibilite_fr = '0';
        $this->accessibilite_cz = '0';
        $this->accessibilite_du = '0';
        $this->accessibilite_su = '0';
        $this->accessibilite_ar = '0';
        $this->alloti = '0';
        $this->numero_phase = 0;
        $this->consultation_externe = '0';
        $this->domaines_activites = '';
        $this->variante_calcule = '0';
        $this->consultation_annulee = '0';
        $this->accessibilite_it = '0';
        $this->adresse_depot_offres_it = '';
        $this->lieu_ouverture_plis_it = '';
        $this->adresse_retrais_dossiers_it = '';
        $this->pieces_dossier_admin_it = '';
        $this->pieces_dossier_tech_it = '';
        $this->pieces_dossier_additif_it = '';
        $this->add_echantillion_it = '';
        $this->add_reunion_it = '';
        $this->date_decision = '';
        $this->autoriser_reponse_electronique = '1';
        $this->regle_mise_en_ligne = 1;
        $this->id_regle_validation = 2;
        $this->clause_sociale = '0';
        $this->clause_environnementale = '0';
        $this->reponse_obligatoire = '0';
        $this->autoriser_publicite = 1;
        $this->type_envoi = '';
        $this->chiffrement_offre = '';
        $this->env_candidature = 0;
        $this->env_offre = 0;
        $this->env_anonymat = 0;
        $this->id_etat_consultation = 0;
        $this->reference_connecteur = '';
        $this->cons_statut = '0';
        $this->id_approbateur = 0;
        $this->id_valideur = 0;
        $this->service_validation = 0;
        $this->id_createur = 0;
        $this->signature_acte_engagement = '0';
        $this->decision_partielle = '0';
        $this->type_decision_a_renseigner = '1';
        $this->type_decision_attribution_marche = '1';
        $this->type_decision_declaration_sans_suite = '1';
        $this->type_decision_declaration_infructueux = '1';
        $this->type_decision_selection_entreprise = '1';
        $this->type_decision_attribution_accord_cadre = '1';
        $this->type_decision_admission_sad = '1';
        $this->type_decision_autre = '1';
        $this->id_agent_telechargement_plis = 0;
        $this->env_offre_technique = 0;
        $this->ref_org_partenaire = '';
        $this->etat_en_attente_validation = '1';
        $this->dossier_additif = '0';
        $this->type_marche = 0;
        $this->type_prestation = 1;
        $this->delai_partiel = '0';
        $this->datefinlocale = '0000-00-00 00:00:00';
        $this->alerte = '0';
        $this->doublon = '0';
        $this->clause_sociale_condition_execution = '0';
        $this->clause_sociale_insertion = '0';
        $this->clause_sociale_ateliers_proteges = '0';
        $this->clause_env_specs_techniques = '0';
        $this->clause_env_cond_execution = '0';
        $this->clause_env_criteres_select = '0';
        $this->donnee_complementaire_obligatoire = '0';
        $this->mode_ouverture_reponse = '0';
        $this->marche_public_simplifie = '0';
        $this->infos_blocs_atlas = '0##0';
        $this->date_fin_unix = '0';
    }

    /**
     * Initializes internal state of BaseCommonConsultation object.
     * @see        applyDefaults()
     */
    public function __construct()
    {
        parent::__construct();
        $this->applyDefaultValues();
    }

    /**
     * Get the [reference] column value.
     * 
     * @return int
     */
    public function getReference()
    {

        return $this->reference;
    }

    /**
     * Get the [organisme] column value.
     * 
     * @return string
     */
    public function getOrganisme()
    {

        return $this->organisme;
    }

    /**
     * Get the [reference_utilisateur] column value.
     * 
     * @return string
     */
    public function getReferenceUtilisateur()
    {

        return $this->reference_utilisateur;
    }

    /**
     * Get the [categorie] column value.
     * 
     * @return string
     */
    public function getCategorie()
    {

        return $this->categorie;
    }

    /**
     * Get the [titre] column value.
     * 
     * @return string
     */
    public function getTitre()
    {

        return $this->titre;
    }

    /**
     * Get the [resume] column value.
     * 
     * @return string
     */
    public function getResume()
    {

        return $this->resume;
    }

    /**
     * Get the [optionally formatted] temporal [datedebut] column value.
     * 
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDatedebut($format = null)
    {
        if ($this->datedebut === null) {
            return null;
        }

        if ($this->datedebut === '0000-00-00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->datedebut);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datedebut, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);
        
    }

    /**
     * Get the [optionally formatted] temporal [datefin] column value.
     * 
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDatefin($format = 'Y-m-d H:i:s')
    {
        if ($this->datefin === null) {
            return null;
        }

        if ($this->datefin === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->datefin);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datefin, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);
        
    }

    /**
     * Get the [datevalidation] column value.
     * 
     * @return string
     */
    public function getDatevalidation()
    {

        return $this->datevalidation;
    }

    /**
     * Get the [type_procedure] column value.
     * 
     * @return string
     */
    public function getTypeProcedure()
    {

        return $this->type_procedure;
    }

    /**
     * Get the [code_procedure] column value.
     * 
     * @return string
     */
    public function getCodeProcedure()
    {

        return $this->code_procedure;
    }

    /**
     * Get the [reponse_electronique] column value.
     * 
     * @return string
     */
    public function getReponseElectronique()
    {

        return $this->reponse_electronique;
    }

    /**
     * Get the [num_procedure] column value.
     * 
     * @return int
     */
    public function getNumProcedure()
    {

        return $this->num_procedure;
    }

    /**
     * Get the [id_type_procedure] column value.
     * 
     * @return int
     */
    public function getIdTypeProcedure()
    {

        return $this->id_type_procedure;
    }

    /**
     * Get the [id_type_avis] column value.
     * 
     * @return int
     */
    public function getIdTypeAvis()
    {

        return $this->id_type_avis;
    }

    /**
     * Get the [lieu_execution] column value.
     * 
     * @return string
     */
    public function getLieuExecution()
    {

        return $this->lieu_execution;
    }

    /**
     * Get the [type_mise_en_ligne] column value.
     * 
     * @return int
     */
    public function getTypeMiseEnLigne()
    {

        return $this->type_mise_en_ligne;
    }

    /**
     * Get the [optionally formatted] temporal [datemiseenligne] column value.
     * 
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDatemiseenligne($format = 'Y-m-d H:i:s')
    {
        if ($this->datemiseenligne === null) {
            return null;
        }

        if ($this->datemiseenligne === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->datemiseenligne);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datemiseenligne, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);
        
    }

    /**
     * Get the [is_tiers_avis] column value.
     * 
     * @return string
     */
    public function getIsTiersAvis()
    {

        return $this->is_tiers_avis;
    }

    /**
     * Get the [url] column value.
     * 
     * @return string
     */
    public function getUrl()
    {

        return $this->url;
    }

    /**
     * Get the [optionally formatted] temporal [datefin_sad] column value.
     * 
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDatefinSad($format = 'Y-m-d H:i:s')
    {
        if ($this->datefin_sad === null) {
            return null;
        }

        if ($this->datefin_sad === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->datefin_sad);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->datefin_sad, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);
        
    }

    /**
     * Get the [is_sys_acq_dyn] column value.
     * 
     * @return int
     */
    public function getIsSysAcqDyn()
    {

        return $this->is_sys_acq_dyn;
    }

    /**
     * Get the [reference_consultation_init] column value.
     * 
     * @return string
     */
    public function getReferenceConsultationInit()
    {

        return $this->reference_consultation_init;
    }

    /**
     * Get the [signature_offre] column value.
     * 
     * @return string
     */
    public function getSignatureOffre()
    {

        return $this->signature_offre;
    }

    /**
     * Get the [id_type_validation] column value.
     * 
     * @return int
     */
    public function getIdTypeValidation()
    {

        return $this->id_type_validation;
    }

    /**
     * Get the [etat_approbation] column value.
     * 
     * @return string
     */
    public function getEtatApprobation()
    {

        return $this->etat_approbation;
    }

    /**
     * Get the [etat_validation] column value.
     * 
     * @return string
     */
    public function getEtatValidation()
    {

        return $this->etat_validation;
    }

    /**
     * Get the [champ_supp_invisible] column value.
     * 
     * @return string
     */
    public function getChampSuppInvisible()
    {

        return $this->champ_supp_invisible;
    }

    /**
     * Get the [code_cpv_1] column value.
     * 
     * @return string
     */
    public function getCodeCpv1()
    {

        return $this->code_cpv_1;
    }

    /**
     * Get the [code_cpv_2] column value.
     * 
     * @return string
     */
    public function getCodeCpv2()
    {

        return $this->code_cpv_2;
    }

    /**
     * Get the [publication_europe] column value.
     * 
     * @return string
     */
    public function getPublicationEurope()
    {

        return $this->publication_europe;
    }

    /**
     * Get the [etat_publication] column value.
     * 
     * @return int
     */
    public function getEtatPublication()
    {

        return $this->etat_publication;
    }

    /**
     * Get the [poursuivre_affichage] column value.
     * 
     * @return int
     */
    public function getPoursuivreAffichage()
    {

        return $this->poursuivre_affichage;
    }

    /**
     * Get the [nbr_telechargement_dce] column value.
     * 
     * @return int
     */
    public function getNbrTelechargementDce()
    {

        return $this->nbr_telechargement_dce;
    }

    /**
     * Get the [service_id] column value.
     * 
     * @return int
     */
    public function getServiceId()
    {

        return $this->service_id;
    }

    /**
     * Get the [service_associe_id] column value.
     * 
     * @return int
     */
    public function getServiceAssocieId()
    {

        return $this->service_associe_id;
    }

    /**
     * Get the [detail_consultation] column value.
     * 
     * @return string
     */
    public function getDetailConsultation()
    {

        return $this->detail_consultation;
    }

    /**
     * Get the [date_fin_affichage] column value.
     * 
     * @return string
     */
    public function getDateFinAffichage()
    {

        return $this->date_fin_affichage;
    }

    /**
     * Get the [depouillable_phase_consultation] column value.
     * 
     * @return string
     */
    public function getDepouillablePhaseConsultation()
    {

        return $this->depouillable_phase_consultation;
    }

    /**
     * Get the [consultation_transverse] column value.
     * 
     * @return string
     */
    public function getConsultationTransverse()
    {

        return $this->consultation_transverse;
    }

    /**
     * Get the [consultation_achat_publique] column value.
     * 
     * @return string
     */
    public function getConsultationAchatPublique()
    {

        return $this->consultation_achat_publique;
    }

    /**
     * Get the [url_consultation_achat_publique] column value.
     * 
     * @return string
     */
    public function getUrlConsultationAchatPublique()
    {

        return $this->url_consultation_achat_publique;
    }

    /**
     * Get the [partial_dce_download] column value.
     * 
     * @return string
     */
    public function getPartialDceDownload()
    {

        return $this->partial_dce_download;
    }

    /**
     * Get the [tirage_plan] column value.
     * 
     * @return int
     */
    public function getTiragePlan()
    {

        return $this->tirage_plan;
    }

    /**
     * Get the [tireur_plan] column value.
     * 
     * @return int
     */
    public function getTireurPlan()
    {

        return $this->tireur_plan;
    }

    /**
     * Get the [optionally formatted] temporal [date_mise_en_ligne_calcule] column value.
     * 
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDateMiseEnLigneCalcule($format = 'Y-m-d H:i:s')
    {
        if ($this->date_mise_en_ligne_calcule === null) {
            return null;
        }

        if ($this->date_mise_en_ligne_calcule === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->date_mise_en_ligne_calcule);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_mise_en_ligne_calcule, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);
        
    }

    /**
     * Get the [accessibilite_en] column value.
     * 
     * @return string
     */
    public function getAccessibiliteEn()
    {

        return $this->accessibilite_en;
    }

    /**
     * Get the [accessibilite_es] column value.
     * 
     * @return string
     */
    public function getAccessibiliteEs()
    {

        return $this->accessibilite_es;
    }

    /**
     * Get the [nbr_reponse] column value.
     * 
     * @return int
     */
    public function getNbrReponse()
    {

        return $this->nbr_reponse;
    }

    /**
     * Get the [id_type_procedure_org] column value.
     * 
     * @return int
     */
    public function getIdTypeProcedureOrg()
    {

        return $this->id_type_procedure_org;
    }

    /**
     * Get the [organisme_consultation_init] column value.
     * 
     * @return string
     */
    public function getOrganismeConsultationInit()
    {

        return $this->organisme_consultation_init;
    }

    /**
     * Get the [tirage_descriptif] column value.
     * 
     * @return string
     */
    public function getTirageDescriptif()
    {

        return $this->tirage_descriptif;
    }

    /**
     * Get the [date_validation_intermediaire] column value.
     * 
     * @return string
     */
    public function getDateValidationIntermediaire()
    {

        return $this->date_validation_intermediaire;
    }

    /**
     * Get the [accessibilite_fr] column value.
     * 
     * @return string
     */
    public function getAccessibiliteFr()
    {

        return $this->accessibilite_fr;
    }

    /**
     * Get the [id_tr_accessibilite] column value.
     * 
     * @return int
     */
    public function getIdTrAccessibilite()
    {

        return $this->id_tr_accessibilite;
    }

    /**
     * Get the [accessibilite_cz] column value.
     * 
     * @return string
     */
    public function getAccessibiliteCz()
    {

        return $this->accessibilite_cz;
    }

    /**
     * Get the [accessibilite_du] column value.
     * 
     * @return string
     */
    public function getAccessibiliteDu()
    {

        return $this->accessibilite_du;
    }

    /**
     * Get the [accessibilite_su] column value.
     * 
     * @return string
     */
    public function getAccessibiliteSu()
    {

        return $this->accessibilite_su;
    }

    /**
     * Get the [accessibilite_ar] column value.
     * 
     * @return string
     */
    public function getAccessibiliteAr()
    {

        return $this->accessibilite_ar;
    }

    /**
     * Get the [alloti] column value.
     * 
     * @return string
     */
    public function getAlloti()
    {

        return $this->alloti;
    }

    /**
     * Get the [numero_phase] column value.
     * 
     * @return int
     */
    public function getNumeroPhase()
    {

        return $this->numero_phase;
    }

    /**
     * Get the [consultation_externe] column value.
     * 
     * @return string
     */
    public function getConsultationExterne()
    {

        return $this->consultation_externe;
    }

    /**
     * Get the [url_consultation_externe] column value.
     * 
     * @return string
     */
    public function getUrlConsultationExterne()
    {

        return $this->url_consultation_externe;
    }

    /**
     * Get the [org_denomination] column value.
     * 
     * @return string
     */
    public function getOrgDenomination()
    {

        return $this->org_denomination;
    }

    /**
     * Get the [domaines_activites] column value.
     * 
     * @return string
     */
    public function getDomainesActivites()
    {

        return $this->domaines_activites;
    }

    /**
     * Get the [id_affaire] column value.
     * 
     * @return int
     */
    public function getIdAffaire()
    {

        return $this->id_affaire;
    }

    /**
     * Get the [adresse_retrais_dossiers] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiers()
    {

        return $this->adresse_retrais_dossiers;
    }

    /**
     * Get the [caution_provisoire] column value.
     * 
     * @return string
     */
    public function getCautionProvisoire()
    {

        return $this->caution_provisoire;
    }

    /**
     * Get the [adresse_depot_offres] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffres()
    {

        return $this->adresse_depot_offres;
    }

    /**
     * Get the [lieu_ouverture_plis] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlis()
    {

        return $this->lieu_ouverture_plis;
    }

    /**
     * Get the [prix_aquisition_plans] column value.
     * 
     * @return string
     */
    public function getPrixAquisitionPlans()
    {

        return $this->prix_aquisition_plans;
    }

    /**
     * Get the [qualification] column value.
     * 
     * @return string
     */
    public function getQualification()
    {

        return $this->qualification;
    }

    /**
     * Get the [agrements] column value.
     * 
     * @return string
     */
    public function getAgrements()
    {

        return $this->agrements;
    }

    /**
     * Get the [add_echantillion] column value.
     * 
     * @return string
     */
    public function getAddEchantillion()
    {

        return $this->add_echantillion;
    }

    /**
     * Get the [date_limite_echantillion] column value.
     * 
     * @return string
     */
    public function getDateLimiteEchantillion()
    {

        return $this->date_limite_echantillion;
    }

    /**
     * Get the [add_reunion] column value.
     * 
     * @return string
     */
    public function getAddReunion()
    {

        return $this->add_reunion;
    }

    /**
     * Get the [date_reunion] column value.
     * 
     * @return string
     */
    public function getDateReunion()
    {

        return $this->date_reunion;
    }

    /**
     * Get the [variantes] column value.
     * 
     * @return string
     */
    public function getVariantes()
    {

        return $this->variantes;
    }

    /**
     * Get the [adresse_retrais_dossiers_ar] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersAr()
    {

        return $this->adresse_retrais_dossiers_ar;
    }

    /**
     * Get the [adresse_depot_offres_ar] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresAr()
    {

        return $this->adresse_depot_offres_ar;
    }

    /**
     * Get the [lieu_ouverture_plis_ar] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisAr()
    {

        return $this->lieu_ouverture_plis_ar;
    }

    /**
     * Get the [pieces_dossier_admin] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdmin()
    {

        return $this->pieces_dossier_admin;
    }

    /**
     * Get the [pieces_dossier_admin_fr] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminFr()
    {

        return $this->pieces_dossier_admin_fr;
    }

    /**
     * Get the [pieces_dossier_admin_en] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminEn()
    {

        return $this->pieces_dossier_admin_en;
    }

    /**
     * Get the [pieces_dossier_admin_es] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminEs()
    {

        return $this->pieces_dossier_admin_es;
    }

    /**
     * Get the [pieces_dossier_admin_su] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminSu()
    {

        return $this->pieces_dossier_admin_su;
    }

    /**
     * Get the [pieces_dossier_admin_du] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminDu()
    {

        return $this->pieces_dossier_admin_du;
    }

    /**
     * Get the [pieces_dossier_admin_cz] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminCz()
    {

        return $this->pieces_dossier_admin_cz;
    }

    /**
     * Get the [pieces_dossier_admin_ar] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminAr()
    {

        return $this->pieces_dossier_admin_ar;
    }

    /**
     * Get the [pieces_dossier_tech] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTech()
    {

        return $this->pieces_dossier_tech;
    }

    /**
     * Get the [pieces_dossier_tech_fr] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechFr()
    {

        return $this->pieces_dossier_tech_fr;
    }

    /**
     * Get the [pieces_dossier_tech_en] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechEn()
    {

        return $this->pieces_dossier_tech_en;
    }

    /**
     * Get the [pieces_dossier_tech_es] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechEs()
    {

        return $this->pieces_dossier_tech_es;
    }

    /**
     * Get the [pieces_dossier_tech_su] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechSu()
    {

        return $this->pieces_dossier_tech_su;
    }

    /**
     * Get the [pieces_dossier_tech_du] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechDu()
    {

        return $this->pieces_dossier_tech_du;
    }

    /**
     * Get the [pieces_dossier_tech_cz] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechCz()
    {

        return $this->pieces_dossier_tech_cz;
    }

    /**
     * Get the [pieces_dossier_tech_ar] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechAr()
    {

        return $this->pieces_dossier_tech_ar;
    }

    /**
     * Get the [pieces_dossier_additif] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditif()
    {

        return $this->pieces_dossier_additif;
    }

    /**
     * Get the [pieces_dossier_additif_fr] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifFr()
    {

        return $this->pieces_dossier_additif_fr;
    }

    /**
     * Get the [pieces_dossier_additif_en] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifEn()
    {

        return $this->pieces_dossier_additif_en;
    }

    /**
     * Get the [pieces_dossier_additif_es] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifEs()
    {

        return $this->pieces_dossier_additif_es;
    }

    /**
     * Get the [pieces_dossier_additif_su] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifSu()
    {

        return $this->pieces_dossier_additif_su;
    }

    /**
     * Get the [pieces_dossier_additif_du] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifDu()
    {

        return $this->pieces_dossier_additif_du;
    }

    /**
     * Get the [pieces_dossier_additif_cz] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifCz()
    {

        return $this->pieces_dossier_additif_cz;
    }

    /**
     * Get the [pieces_dossier_additif_ar] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifAr()
    {

        return $this->pieces_dossier_additif_ar;
    }

    /**
     * Get the [id_rpa] column value.
     * 
     * @return int
     */
    public function getIdRpa()
    {

        return $this->id_rpa;
    }

    /**
     * Get the [detail_consultation_fr] column value.
     * 
     * @return string
     */
    public function getDetailConsultationFr()
    {

        return $this->detail_consultation_fr;
    }

    /**
     * Get the [detail_consultation_en] column value.
     * 
     * @return string
     */
    public function getDetailConsultationEn()
    {

        return $this->detail_consultation_en;
    }

    /**
     * Get the [detail_consultation_es] column value.
     * 
     * @return string
     */
    public function getDetailConsultationEs()
    {

        return $this->detail_consultation_es;
    }

    /**
     * Get the [detail_consultation_su] column value.
     * 
     * @return string
     */
    public function getDetailConsultationSu()
    {

        return $this->detail_consultation_su;
    }

    /**
     * Get the [detail_consultation_du] column value.
     * 
     * @return string
     */
    public function getDetailConsultationDu()
    {

        return $this->detail_consultation_du;
    }

    /**
     * Get the [detail_consultation_cz] column value.
     * 
     * @return string
     */
    public function getDetailConsultationCz()
    {

        return $this->detail_consultation_cz;
    }

    /**
     * Get the [detail_consultation_ar] column value.
     * 
     * @return string
     */
    public function getDetailConsultationAr()
    {

        return $this->detail_consultation_ar;
    }

    /**
     * Get the [echantillon] column value.
     * 
     * @return string
     */
    public function getEchantillon()
    {

        return $this->echantillon;
    }

    /**
     * Get the [reunion] column value.
     * 
     * @return string
     */
    public function getReunion()
    {

        return $this->reunion;
    }

    /**
     * Get the [visites_lieux] column value.
     * 
     * @return string
     */
    public function getVisitesLieux()
    {

        return $this->visites_lieux;
    }

    /**
     * Get the [variante_calcule] column value.
     * 
     * @return string
     */
    public function getVarianteCalcule()
    {

        return $this->variante_calcule;
    }

    /**
     * Get the [adresse_retrais_dossiers_fr] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersFr()
    {

        return $this->adresse_retrais_dossiers_fr;
    }

    /**
     * Get the [adresse_retrais_dossiers_en] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersEn()
    {

        return $this->adresse_retrais_dossiers_en;
    }

    /**
     * Get the [adresse_retrais_dossiers_es] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersEs()
    {

        return $this->adresse_retrais_dossiers_es;
    }

    /**
     * Get the [adresse_retrais_dossiers_su] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersSu()
    {

        return $this->adresse_retrais_dossiers_su;
    }

    /**
     * Get the [adresse_retrais_dossiers_du] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersDu()
    {

        return $this->adresse_retrais_dossiers_du;
    }

    /**
     * Get the [adresse_retrais_dossiers_cz] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersCz()
    {

        return $this->adresse_retrais_dossiers_cz;
    }

    /**
     * Get the [adresse_depot_offres_fr] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresFr()
    {

        return $this->adresse_depot_offres_fr;
    }

    /**
     * Get the [adresse_depot_offres_en] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresEn()
    {

        return $this->adresse_depot_offres_en;
    }

    /**
     * Get the [adresse_depot_offres_es] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresEs()
    {

        return $this->adresse_depot_offres_es;
    }

    /**
     * Get the [adresse_depot_offres_su] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresSu()
    {

        return $this->adresse_depot_offres_su;
    }

    /**
     * Get the [adresse_depot_offres_du] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresDu()
    {

        return $this->adresse_depot_offres_du;
    }

    /**
     * Get the [adresse_depot_offres_cz] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresCz()
    {

        return $this->adresse_depot_offres_cz;
    }

    /**
     * Get the [lieu_ouverture_plis_fr] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisFr()
    {

        return $this->lieu_ouverture_plis_fr;
    }

    /**
     * Get the [lieu_ouverture_plis_en] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisEn()
    {

        return $this->lieu_ouverture_plis_en;
    }

    /**
     * Get the [lieu_ouverture_plis_es] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisEs()
    {

        return $this->lieu_ouverture_plis_es;
    }

    /**
     * Get the [lieu_ouverture_plis_su] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisSu()
    {

        return $this->lieu_ouverture_plis_su;
    }

    /**
     * Get the [lieu_ouverture_plis_du] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisDu()
    {

        return $this->lieu_ouverture_plis_du;
    }

    /**
     * Get the [lieu_ouverture_plis_cz] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisCz()
    {

        return $this->lieu_ouverture_plis_cz;
    }

    /**
     * Get the [add_echantillion_fr] column value.
     * 
     * @return string
     */
    public function getAddEchantillionFr()
    {

        return $this->add_echantillion_fr;
    }

    /**
     * Get the [add_echantillion_en] column value.
     * 
     * @return string
     */
    public function getAddEchantillionEn()
    {

        return $this->add_echantillion_en;
    }

    /**
     * Get the [add_echantillion_es] column value.
     * 
     * @return string
     */
    public function getAddEchantillionEs()
    {

        return $this->add_echantillion_es;
    }

    /**
     * Get the [add_echantillion_su] column value.
     * 
     * @return string
     */
    public function getAddEchantillionSu()
    {

        return $this->add_echantillion_su;
    }

    /**
     * Get the [add_echantillion_du] column value.
     * 
     * @return string
     */
    public function getAddEchantillionDu()
    {

        return $this->add_echantillion_du;
    }

    /**
     * Get the [add_echantillion_cz] column value.
     * 
     * @return string
     */
    public function getAddEchantillionCz()
    {

        return $this->add_echantillion_cz;
    }

    /**
     * Get the [add_echantillion_ar] column value.
     * 
     * @return string
     */
    public function getAddEchantillionAr()
    {

        return $this->add_echantillion_ar;
    }

    /**
     * Get the [add_reunion_fr] column value.
     * 
     * @return string
     */
    public function getAddReunionFr()
    {

        return $this->add_reunion_fr;
    }

    /**
     * Get the [add_reunion_en] column value.
     * 
     * @return string
     */
    public function getAddReunionEn()
    {

        return $this->add_reunion_en;
    }

    /**
     * Get the [add_reunion_es] column value.
     * 
     * @return string
     */
    public function getAddReunionEs()
    {

        return $this->add_reunion_es;
    }

    /**
     * Get the [add_reunion_su] column value.
     * 
     * @return string
     */
    public function getAddReunionSu()
    {

        return $this->add_reunion_su;
    }

    /**
     * Get the [add_reunion_du] column value.
     * 
     * @return string
     */
    public function getAddReunionDu()
    {

        return $this->add_reunion_du;
    }

    /**
     * Get the [add_reunion_cz] column value.
     * 
     * @return string
     */
    public function getAddReunionCz()
    {

        return $this->add_reunion_cz;
    }

    /**
     * Get the [add_reunion_ar] column value.
     * 
     * @return string
     */
    public function getAddReunionAr()
    {

        return $this->add_reunion_ar;
    }

    /**
     * Get the [mode_passation] column value.
     * 
     * @return string
     */
    public function getModePassation()
    {

        return $this->mode_passation;
    }

    /**
     * Get the [consultation_annulee] column value.
     * 
     * @return string
     */
    public function getConsultationAnnulee()
    {

        return $this->consultation_annulee;
    }

    /**
     * Get the [compte_boamp_associe] column value.
     * 
     * @return int
     */
    public function getCompteBoampAssocie()
    {

        return $this->compte_boamp_associe;
    }

    /**
     * Get the [accessibilite_it] column value.
     * 
     * @return string
     */
    public function getAccessibiliteIt()
    {

        return $this->accessibilite_it;
    }

    /**
     * Get the [adresse_depot_offres_it] column value.
     * 
     * @return string
     */
    public function getAdresseDepotOffresIt()
    {

        return $this->adresse_depot_offres_it;
    }

    /**
     * Get the [lieu_ouverture_plis_it] column value.
     * 
     * @return string
     */
    public function getLieuOuverturePlisIt()
    {

        return $this->lieu_ouverture_plis_it;
    }

    /**
     * Get the [adresse_retrais_dossiers_it] column value.
     * 
     * @return string
     */
    public function getAdresseRetraisDossiersIt()
    {

        return $this->adresse_retrais_dossiers_it;
    }

    /**
     * Get the [pieces_dossier_admin_it] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdminIt()
    {

        return $this->pieces_dossier_admin_it;
    }

    /**
     * Get the [pieces_dossier_tech_it] column value.
     * 
     * @return string
     */
    public function getPiecesDossierTechIt()
    {

        return $this->pieces_dossier_tech_it;
    }

    /**
     * Get the [pieces_dossier_additif_it] column value.
     * 
     * @return string
     */
    public function getPiecesDossierAdditifIt()
    {

        return $this->pieces_dossier_additif_it;
    }

    /**
     * Get the [detail_consultation_it] column value.
     * 
     * @return string
     */
    public function getDetailConsultationIt()
    {

        return $this->detail_consultation_it;
    }

    /**
     * Get the [add_echantillion_it] column value.
     * 
     * @return string
     */
    public function getAddEchantillionIt()
    {

        return $this->add_echantillion_it;
    }

    /**
     * Get the [add_reunion_it] column value.
     * 
     * @return string
     */
    public function getAddReunionIt()
    {

        return $this->add_reunion_it;
    }

    /**
     * Get the [codes_nuts] column value.
     * 
     * @return string
     */
    public function getCodesNuts()
    {

        return $this->codes_nuts;
    }

    /**
     * Get the [intitule] column value.
     * 
     * @return string
     */
    public function getIntitule()
    {

        return $this->intitule;
    }

    /**
     * Get the [id_tr_intitule] column value.
     * 
     * @return int
     */
    public function getIdTrIntitule()
    {

        return $this->id_tr_intitule;
    }

    /**
     * Get the [objet] column value.
     * 
     * @return string
     */
    public function getObjet()
    {

        return $this->objet;
    }

    /**
     * Get the [id_tr_objet] column value.
     * 
     * @return int
     */
    public function getIdTrObjet()
    {

        return $this->id_tr_objet;
    }

    /**
     * Get the [date_decision] column value.
     * 
     * @return string
     */
    public function getDateDecision()
    {

        return $this->date_decision;
    }

    /**
     * Get the [type_acces] column value.
     * 
     * @return string
     */
    public function getTypeAcces()
    {

        return $this->type_acces;
    }

    /**
     * Get the [autoriser_reponse_electronique] column value.
     * 
     * @return string
     */
    public function getAutoriserReponseElectronique()
    {

        return $this->autoriser_reponse_electronique;
    }

    /**
     * Get the [regle_mise_en_ligne] column value.
     * 
     * @return int
     */
    public function getRegleMiseEnLigne()
    {

        return $this->regle_mise_en_ligne;
    }

    /**
     * Get the [id_regle_validation] column value.
     * 
     * @return int
     */
    public function getIdRegleValidation()
    {

        return $this->id_regle_validation;
    }

    /**
     * Get the [intitule_fr] column value.
     * 
     * @return string
     */
    public function getIntituleFr()
    {

        return $this->intitule_fr;
    }

    /**
     * Get the [intitule_en] column value.
     * 
     * @return string
     */
    public function getIntituleEn()
    {

        return $this->intitule_en;
    }

    /**
     * Get the [intitule_es] column value.
     * 
     * @return string
     */
    public function getIntituleEs()
    {

        return $this->intitule_es;
    }

    /**
     * Get the [intitule_su] column value.
     * 
     * @return string
     */
    public function getIntituleSu()
    {

        return $this->intitule_su;
    }

    /**
     * Get the [intitule_du] column value.
     * 
     * @return string
     */
    public function getIntituleDu()
    {

        return $this->intitule_du;
    }

    /**
     * Get the [intitule_cz] column value.
     * 
     * @return string
     */
    public function getIntituleCz()
    {

        return $this->intitule_cz;
    }

    /**
     * Get the [intitule_ar] column value.
     * 
     * @return string
     */
    public function getIntituleAr()
    {

        return $this->intitule_ar;
    }

    /**
     * Get the [intitule_it] column value.
     * 
     * @return string
     */
    public function getIntituleIt()
    {

        return $this->intitule_it;
    }

    /**
     * Get the [objet_fr] column value.
     * 
     * @return string
     */
    public function getObjetFr()
    {

        return $this->objet_fr;
    }

    /**
     * Get the [objet_en] column value.
     * 
     * @return string
     */
    public function getObjetEn()
    {

        return $this->objet_en;
    }

    /**
     * Get the [objet_es] column value.
     * 
     * @return string
     */
    public function getObjetEs()
    {

        return $this->objet_es;
    }

    /**
     * Get the [objet_su] column value.
     * 
     * @return string
     */
    public function getObjetSu()
    {

        return $this->objet_su;
    }

    /**
     * Get the [objet_du] column value.
     * 
     * @return string
     */
    public function getObjetDu()
    {

        return $this->objet_du;
    }

    /**
     * Get the [objet_cz] column value.
     * 
     * @return string
     */
    public function getObjetCz()
    {

        return $this->objet_cz;
    }

    /**
     * Get the [objet_ar] column value.
     * 
     * @return string
     */
    public function getObjetAr()
    {

        return $this->objet_ar;
    }

    /**
     * Get the [objet_it] column value.
     * 
     * @return string
     */
    public function getObjetIt()
    {

        return $this->objet_it;
    }

    /**
     * Get the [clause_sociale] column value.
     * 
     * @return string
     */
    public function getClauseSociale()
    {

        return $this->clause_sociale;
    }

    /**
     * Get the [clause_environnementale] column value.
     * 
     * @return string
     */
    public function getClauseEnvironnementale()
    {

        return $this->clause_environnementale;
    }

    /**
     * Get the [reponse_obligatoire] column value.
     * 
     * @return string
     */
    public function getReponseObligatoire()
    {

        return $this->reponse_obligatoire;
    }

    /**
     * Get the [autoriser_publicite] column value.
     * 
     * @return int
     */
    public function getAutoriserPublicite()
    {

        return $this->autoriser_publicite;
    }

    /**
     * Get the [type_envoi] column value.
     * 
     * @return string
     */
    public function getTypeEnvoi()
    {

        return $this->type_envoi;
    }

    /**
     * Get the [chiffrement_offre] column value.
     * 
     * @return string
     */
    public function getChiffrementOffre()
    {

        return $this->chiffrement_offre;
    }

    /**
     * Get the [env_candidature] column value.
     * 
     * @return int
     */
    public function getEnvCandidature()
    {

        return $this->env_candidature;
    }

    /**
     * Get the [env_offre] column value.
     * 
     * @return int
     */
    public function getEnvOffre()
    {

        return $this->env_offre;
    }

    /**
     * Get the [env_anonymat] column value.
     * 
     * @return int
     */
    public function getEnvAnonymat()
    {

        return $this->env_anonymat;
    }

    /**
     * Get the [id_etat_consultation] column value.
     * 
     * @return int
     */
    public function getIdEtatConsultation()
    {

        return $this->id_etat_consultation;
    }

    /**
     * Get the [reference_connecteur] column value.
     * 
     * @return string
     */
    public function getReferenceConnecteur()
    {

        return $this->reference_connecteur;
    }

    /**
     * Get the [cons_statut] column value.
     * 
     * @return string
     */
    public function getConsStatut()
    {

        return $this->cons_statut;
    }

    /**
     * Get the [id_approbateur] column value.
     * 
     * @return int
     */
    public function getIdApprobateur()
    {

        return $this->id_approbateur;
    }

    /**
     * Get the [id_valideur] column value.
     * 
     * @return int
     */
    public function getIdValideur()
    {

        return $this->id_valideur;
    }

    /**
     * Get the [service_validation] column value.
     * 
     * @return int
     */
    public function getServiceValidation()
    {

        return $this->service_validation;
    }

    /**
     * Get the [id_createur] column value.
     * 
     * @return int
     */
    public function getIdCreateur()
    {

        return $this->id_createur;
    }

    /**
     * Get the [nom_createur] column value.
     * 
     * @return string
     */
    public function getNomCreateur()
    {

        return $this->nom_createur;
    }

    /**
     * Get the [prenom_createur] column value.
     * 
     * @return string
     */
    public function getPrenomCreateur()
    {

        return $this->prenom_createur;
    }

    /**
     * Get the [signature_acte_engagement] column value.
     * 
     * @return string
     */
    public function getSignatureActeEngagement()
    {

        return $this->signature_acte_engagement;
    }

    /**
     * Get the [archivemetadescription] column value.
     * 
     * @return string
     */
    public function getArchivemetadescription()
    {

        return $this->archivemetadescription;
    }

    /**
     * Get the [archivemetamotsclef] column value.
     * 
     * @return string
     */
    public function getArchivemetamotsclef()
    {

        return $this->archivemetamotsclef;
    }

    /**
     * Get the [archiveidblobzip] column value.
     * 
     * @return int
     */
    public function getArchiveidblobzip()
    {

        return $this->archiveidblobzip;
    }

    /**
     * Get the [decision_partielle] column value.
     * 
     * @return string
     */
    public function getDecisionPartielle()
    {

        return $this->decision_partielle;
    }

    /**
     * Get the [type_decision_a_renseigner] column value.
     * 
     * @return string
     */
    public function getTypeDecisionARenseigner()
    {

        return $this->type_decision_a_renseigner;
    }

    /**
     * Get the [type_decision_attribution_marche] column value.
     * 
     * @return string
     */
    public function getTypeDecisionAttributionMarche()
    {

        return $this->type_decision_attribution_marche;
    }

    /**
     * Get the [type_decision_declaration_sans_suite] column value.
     * 
     * @return string
     */
    public function getTypeDecisionDeclarationSansSuite()
    {

        return $this->type_decision_declaration_sans_suite;
    }

    /**
     * Get the [type_decision_declaration_infructueux] column value.
     * 
     * @return string
     */
    public function getTypeDecisionDeclarationInfructueux()
    {

        return $this->type_decision_declaration_infructueux;
    }

    /**
     * Get the [type_decision_selection_entreprise] column value.
     * 
     * @return string
     */
    public function getTypeDecisionSelectionEntreprise()
    {

        return $this->type_decision_selection_entreprise;
    }

    /**
     * Get the [type_decision_attribution_accord_cadre] column value.
     * 
     * @return string
     */
    public function getTypeDecisionAttributionAccordCadre()
    {

        return $this->type_decision_attribution_accord_cadre;
    }

    /**
     * Get the [type_decision_admission_sad] column value.
     * 
     * @return string
     */
    public function getTypeDecisionAdmissionSad()
    {

        return $this->type_decision_admission_sad;
    }

    /**
     * Get the [type_decision_autre] column value.
     * 
     * @return string
     */
    public function getTypeDecisionAutre()
    {

        return $this->type_decision_autre;
    }

    /**
     * Get the [id_archiveur] column value.
     * 
     * @return int
     */
    public function getIdArchiveur()
    {

        return $this->id_archiveur;
    }

    /**
     * Get the [prenom_nom_agent_telechargement_plis] column value.
     * 
     * @return string
     */
    public function getPrenomNomAgentTelechargementPlis()
    {

        return $this->prenom_nom_agent_telechargement_plis;
    }

    /**
     * Get the [id_agent_telechargement_plis] column value.
     * 
     * @return int
     */
    public function getIdAgentTelechargementPlis()
    {

        return $this->id_agent_telechargement_plis;
    }

    /**
     * Get the [path_telechargement_plis] column value.
     * 
     * @return string
     */
    public function getPathTelechargementPlis()
    {

        return $this->path_telechargement_plis;
    }

    /**
     * Get the [date_telechargement_plis] column value.
     * 
     * @return string
     */
    public function getDateTelechargementPlis()
    {

        return $this->date_telechargement_plis;
    }

    /**
     * Get the [service_validation_intermediaire] column value.
     * 
     * @return int
     */
    public function getServiceValidationIntermediaire()
    {

        return $this->service_validation_intermediaire;
    }

    /**
     * Get the [env_offre_technique] column value.
     * 
     * @return int
     */
    public function getEnvOffreTechnique()
    {

        return $this->env_offre_technique;
    }

    /**
     * Get the [ref_org_partenaire] column value.
     * 
     * @return string
     */
    public function getRefOrgPartenaire()
    {

        return $this->ref_org_partenaire;
    }

    /**
     * Get the [date_archivage] column value.
     * 
     * @return string
     */
    public function getDateArchivage()
    {

        return $this->date_archivage;
    }

    /**
     * Get the [date_decision_annulation] column value.
     * 
     * @return string
     */
    public function getDateDecisionAnnulation()
    {

        return $this->date_decision_annulation;
    }

    /**
     * Get the [commentaire_annulation] column value.
     * 
     * @return string
     */
    public function getCommentaireAnnulation()
    {

        return $this->commentaire_annulation;
    }

    /**
     * Get the [date_mise_en_ligne_souhaitee] column value.
     * 
     * @return string
     */
    public function getDateMiseEnLigneSouhaitee()
    {

        return $this->date_mise_en_ligne_souhaitee;
    }

    /**
     * Get the [etat_en_attente_validation] column value.
     * 
     * @return string
     */
    public function getEtatEnAttenteValidation()
    {

        return $this->etat_en_attente_validation;
    }

    /**
     * Get the [dossier_additif] column value.
     * 
     * @return string
     */
    public function getDossierAdditif()
    {

        return $this->dossier_additif;
    }

    /**
     * Get the [type_marche] column value.
     * 
     * @return int
     */
    public function getTypeMarche()
    {

        return $this->type_marche;
    }

    /**
     * Get the [type_prestation] column value.
     * 
     * @return int
     */
    public function getTypePrestation()
    {

        return $this->type_prestation;
    }

    /**
     * Get the [date_modification] column value.
     * 
     * @return string
     */
    public function getDateModification()
    {

        return $this->date_modification;
    }

    /**
     * Get the [delai_partiel] column value.
     * 
     * @return string
     */
    public function getDelaiPartiel()
    {

        return $this->delai_partiel;
    }

    /**
     * Get the [datefinlocale] column value.
     * 
     * @return string
     */
    public function getDatefinlocale()
    {

        return $this->datefinlocale;
    }

    /**
     * Get the [lieuresidence] column value.
     * 
     * @return string
     */
    public function getLieuresidence()
    {

        return $this->lieuresidence;
    }

    /**
     * Get the [alerte] column value.
     * 
     * @return string
     */
    public function getAlerte()
    {

        return $this->alerte;
    }

    /**
     * Get the [doublon] column value.
     * 
     * @return string
     */
    public function getDoublon()
    {

        return $this->doublon;
    }

    /**
     * Get the [denomination_adapte] column value.
     * 
     * @return string
     */
    public function getDenominationAdapte()
    {

        return $this->denomination_adapte;
    }

    /**
     * Get the [url_consultation_avis_pub] column value.
     * 
     * @return string
     */
    public function getUrlConsultationAvisPub()
    {

        return $this->url_consultation_avis_pub;
    }

    /**
     * Get the [doublon_de] column value.
     * 
     * @return string
     */
    public function getDoublonDe()
    {

        return $this->doublon_de;
    }

    /**
     * Get the [entite_adjudicatrice] column value.
     * 
     * @return string
     */
    public function getEntiteAdjudicatrice()
    {

        return $this->entite_adjudicatrice;
    }

    /**
     * Get the [code_operation] column value.
     * 
     * @return string
     */
    public function getCodeOperation()
    {

        return $this->code_operation;
    }

    /**
     * Get the [clause_sociale_condition_execution] column value.
     * 
     * @return string
     */
    public function getClauseSocialeConditionExecution()
    {

        return $this->clause_sociale_condition_execution;
    }

    /**
     * Get the [clause_sociale_insertion] column value.
     * 
     * @return string
     */
    public function getClauseSocialeInsertion()
    {

        return $this->clause_sociale_insertion;
    }

    /**
     * Get the [clause_sociale_ateliers_proteges] column value.
     * 
     * @return string
     */
    public function getClauseSocialeAteliersProteges()
    {

        return $this->clause_sociale_ateliers_proteges;
    }

    /**
     * Get the [clause_env_specs_techniques] column value.
     * 
     * @return string
     */
    public function getClauseEnvSpecsTechniques()
    {

        return $this->clause_env_specs_techniques;
    }

    /**
     * Get the [clause_env_cond_execution] column value.
     * 
     * @return string
     */
    public function getClauseEnvCondExecution()
    {

        return $this->clause_env_cond_execution;
    }

    /**
     * Get the [clause_env_criteres_select] column value.
     * 
     * @return string
     */
    public function getClauseEnvCriteresSelect()
    {

        return $this->clause_env_criteres_select;
    }

    /**
     * Get the [id_donnee_complementaire] column value.
     * 
     * @return int
     */
    public function getIdDonneeComplementaire()
    {

        return $this->id_donnee_complementaire;
    }

    /**
     * Get the [donnee_complementaire_obligatoire] column value.
     * 
     * @return string
     */
    public function getDonneeComplementaireObligatoire()
    {

        return $this->donnee_complementaire_obligatoire;
    }

    /**
     * Get the [mode_ouverture_reponse] column value.
     * 
     * @return string
     */
    public function getModeOuvertureReponse()
    {

        return $this->mode_ouverture_reponse;
    }

    /**
     * Get the [id_fichier_annulation] column value.
     * 
     * @return int
     */
    public function getIdFichierAnnulation()
    {

        return $this->id_fichier_annulation;
    }

    /**
     * Get the [idoperation] column value.
     * 
     * @return int
     */
    public function getIdoperation()
    {

        return $this->idoperation;
    }

    /**
     * Get the [marche_public_simplifie] column value.
     * 
     * @return string
     */
    public function getMarchePublicSimplifie()
    {

        return $this->marche_public_simplifie;
    }

    /**
     * Get the [infos_blocs_atlas] column value.
     * 
     * @return string
     */
    public function getInfosBlocsAtlas()
    {

        return $this->infos_blocs_atlas;
    }

    /**
     * Get the [date_fin_unix] column value.
     * 
     * @return string
     */
    public function getDateFinUnix()
    {

        return $this->date_fin_unix;
    }

    /**
     * Get the [optionally formatted] temporal [date_achevement] column value.
     * 
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getDateAchevement($format = 'Y-m-d H:i:s')
    {
        if ($this->date_achevement === null) {
            return null;
        }

        if ($this->date_achevement === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        }

        try {
            $dt = new DateTime($this->date_achevement);
        } catch (Exception $x) {
            throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_achevement, true), $x);
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        }

        if (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        }

        return $dt->format($format);
        
    }

    /**
     * Get the [nombre_de_lots] column value.
     * 
     * @return int
     */
    public function getNombreDeLots()
    {

        return $this->nombre_de_lots;
    }

    /**
     * Set the value of [reference] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReference($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->reference !== $v) {
            $this->reference = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REFERENCE;
        }


        return $this;
    } // setReference()

    /**
     * Set the value of [organisme] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setOrganisme($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->organisme !== $v) {
            $this->organisme = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ORGANISME;
        }


        return $this;
    } // setOrganisme()

    /**
     * Set the value of [reference_utilisateur] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReferenceUtilisateur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reference_utilisateur !== $v) {
            $this->reference_utilisateur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REFERENCE_UTILISATEUR;
        }


        return $this;
    } // setReferenceUtilisateur()

    /**
     * Set the value of [categorie] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCategorie($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->categorie !== $v) {
            $this->categorie = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CATEGORIE;
        }


        return $this;
    } // setCategorie()

    /**
     * Set the value of [titre] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTitre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->titre !== $v) {
            $this->titre = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TITRE;
        }


        return $this;
    } // setTitre()

    /**
     * Set the value of [resume] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setResume($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->resume !== $v) {
            $this->resume = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::RESUME;
        }


        return $this;
    } // setResume()

    /**
     * Sets the value of [datedebut] column to a normalized version of the date/time value specified.
     * 
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDatedebut($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->datedebut !== null || $dt !== null) {
            $currentDateAsString = ($this->datedebut !== null && $tmpDt = new DateTime($this->datedebut)) ? $tmpDt->format('Y-m-d') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d') : null;
            if ( ($currentDateAsString !== $newDateAsString) // normalized values don't match
                || ($dt->format('Y-m-d') === NULL) // or the entered value matches the default
                 ) {
                $this->datedebut = $newDateAsString;
                $this->modifiedColumns[] = CommonConsultationPeer::DATEDEBUT;
            }
        } // if either are not null


        return $this;
    } // setDatedebut()

    /**
     * Sets the value of [datefin] column to a normalized version of the date/time value specified.
     * 
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDatefin($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->datefin !== null || $dt !== null) {
            $currentDateAsString = ($this->datefin !== null && $tmpDt = new DateTime($this->datefin)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ( ($currentDateAsString !== $newDateAsString) // normalized values don't match
                || ($dt->format('Y-m-d H:i:s') === NULL) // or the entered value matches the default
                 ) {
                $this->datefin = $newDateAsString;
                $this->modifiedColumns[] = CommonConsultationPeer::DATEFIN;
            }
        } // if either are not null


        return $this;
    } // setDatefin()

    /**
     * Set the value of [datevalidation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDatevalidation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->datevalidation !== $v) {
            $this->datevalidation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATEVALIDATION;
        }


        return $this;
    } // setDatevalidation()

    /**
     * Set the value of [type_procedure] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeProcedure($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_procedure !== $v) {
            $this->type_procedure = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_PROCEDURE;
        }


        return $this;
    } // setTypeProcedure()

    /**
     * Set the value of [code_procedure] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCodeProcedure($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->code_procedure !== $v) {
            $this->code_procedure = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CODE_PROCEDURE;
        }


        return $this;
    } // setCodeProcedure()

    /**
     * Set the value of [reponse_electronique] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReponseElectronique($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reponse_electronique !== $v) {
            $this->reponse_electronique = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REPONSE_ELECTRONIQUE;
        }


        return $this;
    } // setReponseElectronique()

    /**
     * Set the value of [num_procedure] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setNumProcedure($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->num_procedure !== $v) {
            $this->num_procedure = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::NUM_PROCEDURE;
        }


        return $this;
    } // setNumProcedure()

    /**
     * Set the value of [id_type_procedure] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTypeProcedure($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_type_procedure !== $v) {
            $this->id_type_procedure = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TYPE_PROCEDURE;
        }


        return $this;
    } // setIdTypeProcedure()

    /**
     * Set the value of [id_type_avis] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTypeAvis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_type_avis !== $v) {
            $this->id_type_avis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TYPE_AVIS;
        }


        return $this;
    } // setIdTypeAvis()

    /**
     * Set the value of [lieu_execution] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuExecution($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_execution !== $v) {
            $this->lieu_execution = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_EXECUTION;
        }


        return $this;
    } // setLieuExecution()

    /**
     * Set the value of [type_mise_en_ligne] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeMiseEnLigne($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->type_mise_en_ligne !== $v) {
            $this->type_mise_en_ligne = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_MISE_EN_LIGNE;
        }


        return $this;
    } // setTypeMiseEnLigne()

    /**
     * Sets the value of [datemiseenligne] column to a normalized version of the date/time value specified.
     * 
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDatemiseenligne($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->datemiseenligne !== null || $dt !== null) {
            $currentDateAsString = ($this->datemiseenligne !== null && $tmpDt = new DateTime($this->datemiseenligne)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ( ($currentDateAsString !== $newDateAsString) // normalized values don't match
                || ($dt->format('Y-m-d H:i:s') === NULL) // or the entered value matches the default
                 ) {
                $this->datemiseenligne = $newDateAsString;
                $this->modifiedColumns[] = CommonConsultationPeer::DATEMISEENLIGNE;
            }
        } // if either are not null


        return $this;
    } // setDatemiseenligne()

    /**
     * Set the value of [is_tiers_avis] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIsTiersAvis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->is_tiers_avis !== $v) {
            $this->is_tiers_avis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::IS_TIERS_AVIS;
        }


        return $this;
    } // setIsTiersAvis()

    /**
     * Set the value of [url] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setUrl($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->url !== $v) {
            $this->url = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::URL;
        }


        return $this;
    } // setUrl()

    /**
     * Sets the value of [datefin_sad] column to a normalized version of the date/time value specified.
     * 
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDatefinSad($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->datefin_sad !== null || $dt !== null) {
            $currentDateAsString = ($this->datefin_sad !== null && $tmpDt = new DateTime($this->datefin_sad)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ( ($currentDateAsString !== $newDateAsString) // normalized values don't match
                || ($dt->format('Y-m-d H:i:s') === NULL) // or the entered value matches the default
                 ) {
                $this->datefin_sad = $newDateAsString;
                $this->modifiedColumns[] = CommonConsultationPeer::DATEFIN_SAD;
            }
        } // if either are not null


        return $this;
    } // setDatefinSad()

    /**
     * Set the value of [is_sys_acq_dyn] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIsSysAcqDyn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->is_sys_acq_dyn !== $v) {
            $this->is_sys_acq_dyn = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::IS_SYS_ACQ_DYN;
        }


        return $this;
    } // setIsSysAcqDyn()

    /**
     * Set the value of [reference_consultation_init] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReferenceConsultationInit($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reference_consultation_init !== $v) {
            $this->reference_consultation_init = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REFERENCE_CONSULTATION_INIT;
        }


        return $this;
    } // setReferenceConsultationInit()

    /**
     * Set the value of [signature_offre] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setSignatureOffre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->signature_offre !== $v) {
            $this->signature_offre = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::SIGNATURE_OFFRE;
        }


        return $this;
    } // setSignatureOffre()

    /**
     * Set the value of [id_type_validation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTypeValidation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_type_validation !== $v) {
            $this->id_type_validation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TYPE_VALIDATION;
        }


        return $this;
    } // setIdTypeValidation()

    /**
     * Set the value of [etat_approbation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEtatApprobation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->etat_approbation !== $v) {
            $this->etat_approbation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ETAT_APPROBATION;
        }


        return $this;
    } // setEtatApprobation()

    /**
     * Set the value of [etat_validation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEtatValidation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->etat_validation !== $v) {
            $this->etat_validation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ETAT_VALIDATION;
        }


        return $this;
    } // setEtatValidation()

    /**
     * Set the value of [champ_supp_invisible] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setChampSuppInvisible($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->champ_supp_invisible !== $v) {
            $this->champ_supp_invisible = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CHAMP_SUPP_INVISIBLE;
        }


        return $this;
    } // setChampSuppInvisible()

    /**
     * Set the value of [code_cpv_1] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCodeCpv1($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->code_cpv_1 !== $v) {
            $this->code_cpv_1 = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CODE_CPV_1;
        }


        return $this;
    } // setCodeCpv1()

    /**
     * Set the value of [code_cpv_2] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCodeCpv2($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->code_cpv_2 !== $v) {
            $this->code_cpv_2 = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CODE_CPV_2;
        }


        return $this;
    } // setCodeCpv2()

    /**
     * Set the value of [publication_europe] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPublicationEurope($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->publication_europe !== $v) {
            $this->publication_europe = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PUBLICATION_EUROPE;
        }


        return $this;
    } // setPublicationEurope()

    /**
     * Set the value of [etat_publication] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEtatPublication($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->etat_publication !== $v) {
            $this->etat_publication = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ETAT_PUBLICATION;
        }


        return $this;
    } // setEtatPublication()

    /**
     * Set the value of [poursuivre_affichage] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPoursuivreAffichage($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->poursuivre_affichage !== $v) {
            $this->poursuivre_affichage = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::POURSUIVRE_AFFICHAGE;
        }


        return $this;
    } // setPoursuivreAffichage()

    /**
     * Set the value of [nbr_telechargement_dce] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setNbrTelechargementDce($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->nbr_telechargement_dce !== $v) {
            $this->nbr_telechargement_dce = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::NBR_TELECHARGEMENT_DCE;
        }


        return $this;
    } // setNbrTelechargementDce()

    /**
     * Set the value of [service_id] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setServiceId($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->service_id !== $v) {
            $this->service_id = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::SERVICE_ID;
        }


        return $this;
    } // setServiceId()

    /**
     * Set the value of [service_associe_id] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setServiceAssocieId($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->service_associe_id !== $v) {
            $this->service_associe_id = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::SERVICE_ASSOCIE_ID;
        }


        return $this;
    } // setServiceAssocieId()

    /**
     * Set the value of [detail_consultation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation !== $v) {
            $this->detail_consultation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION;
        }


        return $this;
    } // setDetailConsultation()

    /**
     * Set the value of [date_fin_affichage] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateFinAffichage($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_fin_affichage !== $v) {
            $this->date_fin_affichage = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_FIN_AFFICHAGE;
        }


        return $this;
    } // setDateFinAffichage()

    /**
     * Set the value of [depouillable_phase_consultation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDepouillablePhaseConsultation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->depouillable_phase_consultation !== $v) {
            $this->depouillable_phase_consultation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DEPOUILLABLE_PHASE_CONSULTATION;
        }


        return $this;
    } // setDepouillablePhaseConsultation()

    /**
     * Set the value of [consultation_transverse] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setConsultationTransverse($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->consultation_transverse !== $v) {
            $this->consultation_transverse = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CONSULTATION_TRANSVERSE;
        }


        return $this;
    } // setConsultationTransverse()

    /**
     * Set the value of [consultation_achat_publique] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setConsultationAchatPublique($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->consultation_achat_publique !== $v) {
            $this->consultation_achat_publique = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CONSULTATION_ACHAT_PUBLIQUE;
        }


        return $this;
    } // setConsultationAchatPublique()

    /**
     * Set the value of [url_consultation_achat_publique] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setUrlConsultationAchatPublique($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->url_consultation_achat_publique !== $v) {
            $this->url_consultation_achat_publique = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::URL_CONSULTATION_ACHAT_PUBLIQUE;
        }


        return $this;
    } // setUrlConsultationAchatPublique()

    /**
     * Set the value of [partial_dce_download] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPartialDceDownload($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->partial_dce_download !== $v) {
            $this->partial_dce_download = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PARTIAL_DCE_DOWNLOAD;
        }


        return $this;
    } // setPartialDceDownload()

    /**
     * Set the value of [tirage_plan] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTiragePlan($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->tirage_plan !== $v) {
            $this->tirage_plan = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TIRAGE_PLAN;
        }


        return $this;
    } // setTiragePlan()

    /**
     * Set the value of [tireur_plan] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTireurPlan($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->tireur_plan !== $v) {
            $this->tireur_plan = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TIREUR_PLAN;
        }


        return $this;
    } // setTireurPlan()

    /**
     * Sets the value of [date_mise_en_ligne_calcule] column to a normalized version of the date/time value specified.
     * 
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateMiseEnLigneCalcule($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->date_mise_en_ligne_calcule !== null || $dt !== null) {
            $currentDateAsString = ($this->date_mise_en_ligne_calcule !== null && $tmpDt = new DateTime($this->date_mise_en_ligne_calcule)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->date_mise_en_ligne_calcule = $newDateAsString;
                $this->modifiedColumns[] = CommonConsultationPeer::DATE_MISE_EN_LIGNE_CALCULE;
            }
        } // if either are not null


        return $this;
    } // setDateMiseEnLigneCalcule()

    /**
     * Set the value of [accessibilite_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_en !== $v) {
            $this->accessibilite_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_EN;
        }


        return $this;
    } // setAccessibiliteEn()

    /**
     * Set the value of [accessibilite_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_es !== $v) {
            $this->accessibilite_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_ES;
        }


        return $this;
    } // setAccessibiliteEs()

    /**
     * Set the value of [nbr_reponse] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setNbrReponse($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->nbr_reponse !== $v) {
            $this->nbr_reponse = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::NBR_REPONSE;
        }


        return $this;
    } // setNbrReponse()

    /**
     * Set the value of [id_type_procedure_org] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTypeProcedureOrg($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_type_procedure_org !== $v) {
            $this->id_type_procedure_org = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TYPE_PROCEDURE_ORG;
        }


        return $this;
    } // setIdTypeProcedureOrg()

    /**
     * Set the value of [organisme_consultation_init] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setOrganismeConsultationInit($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->organisme_consultation_init !== $v) {
            $this->organisme_consultation_init = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ORGANISME_CONSULTATION_INIT;
        }


        return $this;
    } // setOrganismeConsultationInit()

    /**
     * Set the value of [tirage_descriptif] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTirageDescriptif($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->tirage_descriptif !== $v) {
            $this->tirage_descriptif = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TIRAGE_DESCRIPTIF;
        }


        return $this;
    } // setTirageDescriptif()

    /**
     * Set the value of [date_validation_intermediaire] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateValidationIntermediaire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_validation_intermediaire !== $v) {
            $this->date_validation_intermediaire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_VALIDATION_INTERMEDIAIRE;
        }


        return $this;
    } // setDateValidationIntermediaire()

    /**
     * Set the value of [accessibilite_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_fr !== $v) {
            $this->accessibilite_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_FR;
        }


        return $this;
    } // setAccessibiliteFr()

    /**
     * Set the value of [id_tr_accessibilite] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTrAccessibilite($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_tr_accessibilite !== $v) {
            $this->id_tr_accessibilite = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TR_ACCESSIBILITE;
        }


        return $this;
    } // setIdTrAccessibilite()

    /**
     * Set the value of [accessibilite_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_cz !== $v) {
            $this->accessibilite_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_CZ;
        }


        return $this;
    } // setAccessibiliteCz()

    /**
     * Set the value of [accessibilite_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_du !== $v) {
            $this->accessibilite_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_DU;
        }


        return $this;
    } // setAccessibiliteDu()

    /**
     * Set the value of [accessibilite_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_su !== $v) {
            $this->accessibilite_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_SU;
        }


        return $this;
    } // setAccessibiliteSu()

    /**
     * Set the value of [accessibilite_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_ar !== $v) {
            $this->accessibilite_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_AR;
        }


        return $this;
    } // setAccessibiliteAr()

    /**
     * Set the value of [alloti] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAlloti($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->alloti !== $v) {
            $this->alloti = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ALLOTI;
        }


        return $this;
    } // setAlloti()

    /**
     * Set the value of [numero_phase] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setNumeroPhase($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->numero_phase !== $v) {
            $this->numero_phase = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::NUMERO_PHASE;
        }


        return $this;
    } // setNumeroPhase()

    /**
     * Set the value of [consultation_externe] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setConsultationExterne($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->consultation_externe !== $v) {
            $this->consultation_externe = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CONSULTATION_EXTERNE;
        }


        return $this;
    } // setConsultationExterne()

    /**
     * Set the value of [url_consultation_externe] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setUrlConsultationExterne($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->url_consultation_externe !== $v) {
            $this->url_consultation_externe = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::URL_CONSULTATION_EXTERNE;
        }


        return $this;
    } // setUrlConsultationExterne()

    /**
     * Set the value of [org_denomination] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setOrgDenomination($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->org_denomination !== $v) {
            $this->org_denomination = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ORG_DENOMINATION;
        }


        return $this;
    } // setOrgDenomination()

    /**
     * Set the value of [domaines_activites] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDomainesActivites($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->domaines_activites !== $v) {
            $this->domaines_activites = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DOMAINES_ACTIVITES;
        }


        return $this;
    } // setDomainesActivites()

    /**
     * Set the value of [id_affaire] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdAffaire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_affaire !== $v) {
            $this->id_affaire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_AFFAIRE;
        }


        return $this;
    } // setIdAffaire()

    /**
     * Set the value of [adresse_retrais_dossiers] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiers($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers !== $v) {
            $this->adresse_retrais_dossiers = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS;
        }


        return $this;
    } // setAdresseRetraisDossiers()

    /**
     * Set the value of [caution_provisoire] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCautionProvisoire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->caution_provisoire !== $v) {
            $this->caution_provisoire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CAUTION_PROVISOIRE;
        }


        return $this;
    } // setCautionProvisoire()

    /**
     * Set the value of [adresse_depot_offres] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffres($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres !== $v) {
            $this->adresse_depot_offres = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES;
        }


        return $this;
    } // setAdresseDepotOffres()

    /**
     * Set the value of [lieu_ouverture_plis] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis !== $v) {
            $this->lieu_ouverture_plis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS;
        }


        return $this;
    } // setLieuOuverturePlis()

    /**
     * Set the value of [prix_aquisition_plans] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPrixAquisitionPlans($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->prix_aquisition_plans !== $v) {
            $this->prix_aquisition_plans = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PRIX_AQUISITION_PLANS;
        }


        return $this;
    } // setPrixAquisitionPlans()

    /**
     * Set the value of [qualification] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setQualification($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->qualification !== $v) {
            $this->qualification = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::QUALIFICATION;
        }


        return $this;
    } // setQualification()

    /**
     * Set the value of [agrements] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAgrements($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->agrements !== $v) {
            $this->agrements = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::AGREMENTS;
        }


        return $this;
    } // setAgrements()

    /**
     * Set the value of [add_echantillion] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillion($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion !== $v) {
            $this->add_echantillion = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION;
        }


        return $this;
    } // setAddEchantillion()

    /**
     * Set the value of [date_limite_echantillion] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateLimiteEchantillion($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_limite_echantillion !== $v) {
            $this->date_limite_echantillion = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_LIMITE_ECHANTILLION;
        }


        return $this;
    } // setDateLimiteEchantillion()

    /**
     * Set the value of [add_reunion] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunion($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion !== $v) {
            $this->add_reunion = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION;
        }


        return $this;
    } // setAddReunion()

    /**
     * Set the value of [date_reunion] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateReunion($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_reunion !== $v) {
            $this->date_reunion = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_REUNION;
        }


        return $this;
    } // setDateReunion()

    /**
     * Set the value of [variantes] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setVariantes($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->variantes !== $v) {
            $this->variantes = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::VARIANTES;
        }


        return $this;
    } // setVariantes()

    /**
     * Set the value of [adresse_retrais_dossiers_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_ar !== $v) {
            $this->adresse_retrais_dossiers_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_AR;
        }


        return $this;
    } // setAdresseRetraisDossiersAr()

    /**
     * Set the value of [adresse_depot_offres_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_ar !== $v) {
            $this->adresse_depot_offres_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_AR;
        }


        return $this;
    } // setAdresseDepotOffresAr()

    /**
     * Set the value of [lieu_ouverture_plis_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_ar !== $v) {
            $this->lieu_ouverture_plis_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_AR;
        }


        return $this;
    } // setLieuOuverturePlisAr()

    /**
     * Set the value of [pieces_dossier_admin] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdmin($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin !== $v) {
            $this->pieces_dossier_admin = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN;
        }


        return $this;
    } // setPiecesDossierAdmin()

    /**
     * Set the value of [pieces_dossier_admin_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_fr !== $v) {
            $this->pieces_dossier_admin_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_FR;
        }


        return $this;
    } // setPiecesDossierAdminFr()

    /**
     * Set the value of [pieces_dossier_admin_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_en !== $v) {
            $this->pieces_dossier_admin_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_EN;
        }


        return $this;
    } // setPiecesDossierAdminEn()

    /**
     * Set the value of [pieces_dossier_admin_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_es !== $v) {
            $this->pieces_dossier_admin_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_ES;
        }


        return $this;
    } // setPiecesDossierAdminEs()

    /**
     * Set the value of [pieces_dossier_admin_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_su !== $v) {
            $this->pieces_dossier_admin_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_SU;
        }


        return $this;
    } // setPiecesDossierAdminSu()

    /**
     * Set the value of [pieces_dossier_admin_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_du !== $v) {
            $this->pieces_dossier_admin_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_DU;
        }


        return $this;
    } // setPiecesDossierAdminDu()

    /**
     * Set the value of [pieces_dossier_admin_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_cz !== $v) {
            $this->pieces_dossier_admin_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_CZ;
        }


        return $this;
    } // setPiecesDossierAdminCz()

    /**
     * Set the value of [pieces_dossier_admin_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_ar !== $v) {
            $this->pieces_dossier_admin_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_AR;
        }


        return $this;
    } // setPiecesDossierAdminAr()

    /**
     * Set the value of [pieces_dossier_tech] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTech($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech !== $v) {
            $this->pieces_dossier_tech = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH;
        }


        return $this;
    } // setPiecesDossierTech()

    /**
     * Set the value of [pieces_dossier_tech_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_fr !== $v) {
            $this->pieces_dossier_tech_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_FR;
        }


        return $this;
    } // setPiecesDossierTechFr()

    /**
     * Set the value of [pieces_dossier_tech_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_en !== $v) {
            $this->pieces_dossier_tech_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_EN;
        }


        return $this;
    } // setPiecesDossierTechEn()

    /**
     * Set the value of [pieces_dossier_tech_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_es !== $v) {
            $this->pieces_dossier_tech_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_ES;
        }


        return $this;
    } // setPiecesDossierTechEs()

    /**
     * Set the value of [pieces_dossier_tech_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_su !== $v) {
            $this->pieces_dossier_tech_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_SU;
        }


        return $this;
    } // setPiecesDossierTechSu()

    /**
     * Set the value of [pieces_dossier_tech_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_du !== $v) {
            $this->pieces_dossier_tech_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_DU;
        }


        return $this;
    } // setPiecesDossierTechDu()

    /**
     * Set the value of [pieces_dossier_tech_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_cz !== $v) {
            $this->pieces_dossier_tech_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_CZ;
        }


        return $this;
    } // setPiecesDossierTechCz()

    /**
     * Set the value of [pieces_dossier_tech_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_ar !== $v) {
            $this->pieces_dossier_tech_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_AR;
        }


        return $this;
    } // setPiecesDossierTechAr()

    /**
     * Set the value of [pieces_dossier_additif] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditif($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif !== $v) {
            $this->pieces_dossier_additif = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF;
        }


        return $this;
    } // setPiecesDossierAdditif()

    /**
     * Set the value of [pieces_dossier_additif_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_fr !== $v) {
            $this->pieces_dossier_additif_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_FR;
        }


        return $this;
    } // setPiecesDossierAdditifFr()

    /**
     * Set the value of [pieces_dossier_additif_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_en !== $v) {
            $this->pieces_dossier_additif_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_EN;
        }


        return $this;
    } // setPiecesDossierAdditifEn()

    /**
     * Set the value of [pieces_dossier_additif_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_es !== $v) {
            $this->pieces_dossier_additif_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_ES;
        }


        return $this;
    } // setPiecesDossierAdditifEs()

    /**
     * Set the value of [pieces_dossier_additif_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_su !== $v) {
            $this->pieces_dossier_additif_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_SU;
        }


        return $this;
    } // setPiecesDossierAdditifSu()

    /**
     * Set the value of [pieces_dossier_additif_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_du !== $v) {
            $this->pieces_dossier_additif_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_DU;
        }


        return $this;
    } // setPiecesDossierAdditifDu()

    /**
     * Set the value of [pieces_dossier_additif_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_cz !== $v) {
            $this->pieces_dossier_additif_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_CZ;
        }


        return $this;
    } // setPiecesDossierAdditifCz()

    /**
     * Set the value of [pieces_dossier_additif_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_ar !== $v) {
            $this->pieces_dossier_additif_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_AR;
        }


        return $this;
    } // setPiecesDossierAdditifAr()

    /**
     * Set the value of [id_rpa] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdRpa($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_rpa !== $v) {
            $this->id_rpa = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_RPA;
        }


        return $this;
    } // setIdRpa()

    /**
     * Set the value of [detail_consultation_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_fr !== $v) {
            $this->detail_consultation_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_FR;
        }


        return $this;
    } // setDetailConsultationFr()

    /**
     * Set the value of [detail_consultation_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_en !== $v) {
            $this->detail_consultation_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_EN;
        }


        return $this;
    } // setDetailConsultationEn()

    /**
     * Set the value of [detail_consultation_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_es !== $v) {
            $this->detail_consultation_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_ES;
        }


        return $this;
    } // setDetailConsultationEs()

    /**
     * Set the value of [detail_consultation_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_su !== $v) {
            $this->detail_consultation_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_SU;
        }


        return $this;
    } // setDetailConsultationSu()

    /**
     * Set the value of [detail_consultation_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_du !== $v) {
            $this->detail_consultation_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_DU;
        }


        return $this;
    } // setDetailConsultationDu()

    /**
     * Set the value of [detail_consultation_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_cz !== $v) {
            $this->detail_consultation_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_CZ;
        }


        return $this;
    } // setDetailConsultationCz()

    /**
     * Set the value of [detail_consultation_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_ar !== $v) {
            $this->detail_consultation_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_AR;
        }


        return $this;
    } // setDetailConsultationAr()

    /**
     * Set the value of [echantillon] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEchantillon($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->echantillon !== $v) {
            $this->echantillon = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ECHANTILLON;
        }


        return $this;
    } // setEchantillon()

    /**
     * Set the value of [reunion] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReunion($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reunion !== $v) {
            $this->reunion = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REUNION;
        }


        return $this;
    } // setReunion()

    /**
     * Set the value of [visites_lieux] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setVisitesLieux($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->visites_lieux !== $v) {
            $this->visites_lieux = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::VISITES_LIEUX;
        }


        return $this;
    } // setVisitesLieux()

    /**
     * Set the value of [variante_calcule] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setVarianteCalcule($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->variante_calcule !== $v) {
            $this->variante_calcule = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::VARIANTE_CALCULE;
        }


        return $this;
    } // setVarianteCalcule()

    /**
     * Set the value of [adresse_retrais_dossiers_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_fr !== $v) {
            $this->adresse_retrais_dossiers_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_FR;
        }


        return $this;
    } // setAdresseRetraisDossiersFr()

    /**
     * Set the value of [adresse_retrais_dossiers_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_en !== $v) {
            $this->adresse_retrais_dossiers_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_EN;
        }


        return $this;
    } // setAdresseRetraisDossiersEn()

    /**
     * Set the value of [adresse_retrais_dossiers_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_es !== $v) {
            $this->adresse_retrais_dossiers_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_ES;
        }


        return $this;
    } // setAdresseRetraisDossiersEs()

    /**
     * Set the value of [adresse_retrais_dossiers_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_su !== $v) {
            $this->adresse_retrais_dossiers_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_SU;
        }


        return $this;
    } // setAdresseRetraisDossiersSu()

    /**
     * Set the value of [adresse_retrais_dossiers_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_du !== $v) {
            $this->adresse_retrais_dossiers_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_DU;
        }


        return $this;
    } // setAdresseRetraisDossiersDu()

    /**
     * Set the value of [adresse_retrais_dossiers_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_cz !== $v) {
            $this->adresse_retrais_dossiers_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_CZ;
        }


        return $this;
    } // setAdresseRetraisDossiersCz()

    /**
     * Set the value of [adresse_depot_offres_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_fr !== $v) {
            $this->adresse_depot_offres_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_FR;
        }


        return $this;
    } // setAdresseDepotOffresFr()

    /**
     * Set the value of [adresse_depot_offres_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_en !== $v) {
            $this->adresse_depot_offres_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_EN;
        }


        return $this;
    } // setAdresseDepotOffresEn()

    /**
     * Set the value of [adresse_depot_offres_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_es !== $v) {
            $this->adresse_depot_offres_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_ES;
        }


        return $this;
    } // setAdresseDepotOffresEs()

    /**
     * Set the value of [adresse_depot_offres_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_su !== $v) {
            $this->adresse_depot_offres_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_SU;
        }


        return $this;
    } // setAdresseDepotOffresSu()

    /**
     * Set the value of [adresse_depot_offres_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_du !== $v) {
            $this->adresse_depot_offres_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_DU;
        }


        return $this;
    } // setAdresseDepotOffresDu()

    /**
     * Set the value of [adresse_depot_offres_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_cz !== $v) {
            $this->adresse_depot_offres_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_CZ;
        }


        return $this;
    } // setAdresseDepotOffresCz()

    /**
     * Set the value of [lieu_ouverture_plis_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_fr !== $v) {
            $this->lieu_ouverture_plis_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_FR;
        }


        return $this;
    } // setLieuOuverturePlisFr()

    /**
     * Set the value of [lieu_ouverture_plis_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_en !== $v) {
            $this->lieu_ouverture_plis_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_EN;
        }


        return $this;
    } // setLieuOuverturePlisEn()

    /**
     * Set the value of [lieu_ouverture_plis_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_es !== $v) {
            $this->lieu_ouverture_plis_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_ES;
        }


        return $this;
    } // setLieuOuverturePlisEs()

    /**
     * Set the value of [lieu_ouverture_plis_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_su !== $v) {
            $this->lieu_ouverture_plis_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_SU;
        }


        return $this;
    } // setLieuOuverturePlisSu()

    /**
     * Set the value of [lieu_ouverture_plis_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_du !== $v) {
            $this->lieu_ouverture_plis_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_DU;
        }


        return $this;
    } // setLieuOuverturePlisDu()

    /**
     * Set the value of [lieu_ouverture_plis_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_cz !== $v) {
            $this->lieu_ouverture_plis_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_CZ;
        }


        return $this;
    } // setLieuOuverturePlisCz()

    /**
     * Set the value of [add_echantillion_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_fr !== $v) {
            $this->add_echantillion_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_FR;
        }


        return $this;
    } // setAddEchantillionFr()

    /**
     * Set the value of [add_echantillion_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_en !== $v) {
            $this->add_echantillion_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_EN;
        }


        return $this;
    } // setAddEchantillionEn()

    /**
     * Set the value of [add_echantillion_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_es !== $v) {
            $this->add_echantillion_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_ES;
        }


        return $this;
    } // setAddEchantillionEs()

    /**
     * Set the value of [add_echantillion_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_su !== $v) {
            $this->add_echantillion_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_SU;
        }


        return $this;
    } // setAddEchantillionSu()

    /**
     * Set the value of [add_echantillion_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_du !== $v) {
            $this->add_echantillion_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_DU;
        }


        return $this;
    } // setAddEchantillionDu()

    /**
     * Set the value of [add_echantillion_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_cz !== $v) {
            $this->add_echantillion_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_CZ;
        }


        return $this;
    } // setAddEchantillionCz()

    /**
     * Set the value of [add_echantillion_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_ar !== $v) {
            $this->add_echantillion_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_AR;
        }


        return $this;
    } // setAddEchantillionAr()

    /**
     * Set the value of [add_reunion_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_fr !== $v) {
            $this->add_reunion_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_FR;
        }


        return $this;
    } // setAddReunionFr()

    /**
     * Set the value of [add_reunion_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_en !== $v) {
            $this->add_reunion_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_EN;
        }


        return $this;
    } // setAddReunionEn()

    /**
     * Set the value of [add_reunion_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_es !== $v) {
            $this->add_reunion_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_ES;
        }


        return $this;
    } // setAddReunionEs()

    /**
     * Set the value of [add_reunion_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_su !== $v) {
            $this->add_reunion_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_SU;
        }


        return $this;
    } // setAddReunionSu()

    /**
     * Set the value of [add_reunion_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_du !== $v) {
            $this->add_reunion_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_DU;
        }


        return $this;
    } // setAddReunionDu()

    /**
     * Set the value of [add_reunion_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_cz !== $v) {
            $this->add_reunion_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_CZ;
        }


        return $this;
    } // setAddReunionCz()

    /**
     * Set the value of [add_reunion_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_ar !== $v) {
            $this->add_reunion_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_AR;
        }


        return $this;
    } // setAddReunionAr()

    /**
     * Set the value of [mode_passation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setModePassation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->mode_passation !== $v) {
            $this->mode_passation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::MODE_PASSATION;
        }


        return $this;
    } // setModePassation()

    /**
     * Set the value of [consultation_annulee] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setConsultationAnnulee($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->consultation_annulee !== $v) {
            $this->consultation_annulee = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CONSULTATION_ANNULEE;
        }


        return $this;
    } // setConsultationAnnulee()

    /**
     * Set the value of [compte_boamp_associe] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCompteBoampAssocie($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->compte_boamp_associe !== $v) {
            $this->compte_boamp_associe = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::COMPTE_BOAMP_ASSOCIE;
        }


        return $this;
    } // setCompteBoampAssocie()

    /**
     * Set the value of [accessibilite_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAccessibiliteIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->accessibilite_it !== $v) {
            $this->accessibilite_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ACCESSIBILITE_IT;
        }


        return $this;
    } // setAccessibiliteIt()

    /**
     * Set the value of [adresse_depot_offres_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseDepotOffresIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_depot_offres_it !== $v) {
            $this->adresse_depot_offres_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_IT;
        }


        return $this;
    } // setAdresseDepotOffresIt()

    /**
     * Set the value of [lieu_ouverture_plis_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuOuverturePlisIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieu_ouverture_plis_it !== $v) {
            $this->lieu_ouverture_plis_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEU_OUVERTURE_PLIS_IT;
        }


        return $this;
    } // setLieuOuverturePlisIt()

    /**
     * Set the value of [adresse_retrais_dossiers_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAdresseRetraisDossiersIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->adresse_retrais_dossiers_it !== $v) {
            $this->adresse_retrais_dossiers_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_IT;
        }


        return $this;
    } // setAdresseRetraisDossiersIt()

    /**
     * Set the value of [pieces_dossier_admin_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdminIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_admin_it !== $v) {
            $this->pieces_dossier_admin_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADMIN_IT;
        }


        return $this;
    } // setPiecesDossierAdminIt()

    /**
     * Set the value of [pieces_dossier_tech_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierTechIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_tech_it !== $v) {
            $this->pieces_dossier_tech_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_TECH_IT;
        }


        return $this;
    } // setPiecesDossierTechIt()

    /**
     * Set the value of [pieces_dossier_additif_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPiecesDossierAdditifIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->pieces_dossier_additif_it !== $v) {
            $this->pieces_dossier_additif_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_IT;
        }


        return $this;
    } // setPiecesDossierAdditifIt()

    /**
     * Set the value of [detail_consultation_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDetailConsultationIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->detail_consultation_it !== $v) {
            $this->detail_consultation_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DETAIL_CONSULTATION_IT;
        }


        return $this;
    } // setDetailConsultationIt()

    /**
     * Set the value of [add_echantillion_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddEchantillionIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_echantillion_it !== $v) {
            $this->add_echantillion_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_ECHANTILLION_IT;
        }


        return $this;
    } // setAddEchantillionIt()

    /**
     * Set the value of [add_reunion_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAddReunionIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->add_reunion_it !== $v) {
            $this->add_reunion_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ADD_REUNION_IT;
        }


        return $this;
    } // setAddReunionIt()

    /**
     * Set the value of [codes_nuts] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCodesNuts($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->codes_nuts !== $v) {
            $this->codes_nuts = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CODES_NUTS;
        }


        return $this;
    } // setCodesNuts()

    /**
     * Set the value of [intitule] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntitule($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule !== $v) {
            $this->intitule = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE;
        }


        return $this;
    } // setIntitule()

    /**
     * Set the value of [id_tr_intitule] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTrIntitule($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_tr_intitule !== $v) {
            $this->id_tr_intitule = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TR_INTITULE;
        }


        return $this;
    } // setIdTrIntitule()

    /**
     * Set the value of [objet] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjet($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet !== $v) {
            $this->objet = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET;
        }


        return $this;
    } // setObjet()

    /**
     * Set the value of [id_tr_objet] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdTrObjet($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_tr_objet !== $v) {
            $this->id_tr_objet = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_TR_OBJET;
        }


        return $this;
    } // setIdTrObjet()

    /**
     * Set the value of [date_decision] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateDecision($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_decision !== $v) {
            $this->date_decision = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_DECISION;
        }


        return $this;
    } // setDateDecision()

    /**
     * Set the value of [type_acces] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeAcces($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_acces !== $v) {
            $this->type_acces = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_ACCES;
        }


        return $this;
    } // setTypeAcces()

    /**
     * Set the value of [autoriser_reponse_electronique] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAutoriserReponseElectronique($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->autoriser_reponse_electronique !== $v) {
            $this->autoriser_reponse_electronique = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::AUTORISER_REPONSE_ELECTRONIQUE;
        }


        return $this;
    } // setAutoriserReponseElectronique()

    /**
     * Set the value of [regle_mise_en_ligne] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setRegleMiseEnLigne($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->regle_mise_en_ligne !== $v) {
            $this->regle_mise_en_ligne = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REGLE_MISE_EN_LIGNE;
        }


        return $this;
    } // setRegleMiseEnLigne()

    /**
     * Set the value of [id_regle_validation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdRegleValidation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_regle_validation !== $v) {
            $this->id_regle_validation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_REGLE_VALIDATION;
        }


        return $this;
    } // setIdRegleValidation()

    /**
     * Set the value of [intitule_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_fr !== $v) {
            $this->intitule_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_FR;
        }


        return $this;
    } // setIntituleFr()

    /**
     * Set the value of [intitule_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_en !== $v) {
            $this->intitule_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_EN;
        }


        return $this;
    } // setIntituleEn()

    /**
     * Set the value of [intitule_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_es !== $v) {
            $this->intitule_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_ES;
        }


        return $this;
    } // setIntituleEs()

    /**
     * Set the value of [intitule_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_su !== $v) {
            $this->intitule_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_SU;
        }


        return $this;
    } // setIntituleSu()

    /**
     * Set the value of [intitule_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_du !== $v) {
            $this->intitule_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_DU;
        }


        return $this;
    } // setIntituleDu()

    /**
     * Set the value of [intitule_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_cz !== $v) {
            $this->intitule_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_CZ;
        }


        return $this;
    } // setIntituleCz()

    /**
     * Set the value of [intitule_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_ar !== $v) {
            $this->intitule_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_AR;
        }


        return $this;
    } // setIntituleAr()

    /**
     * Set the value of [intitule_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIntituleIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->intitule_it !== $v) {
            $this->intitule_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INTITULE_IT;
        }


        return $this;
    } // setIntituleIt()

    /**
     * Set the value of [objet_fr] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetFr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_fr !== $v) {
            $this->objet_fr = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_FR;
        }


        return $this;
    } // setObjetFr()

    /**
     * Set the value of [objet_en] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetEn($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_en !== $v) {
            $this->objet_en = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_EN;
        }


        return $this;
    } // setObjetEn()

    /**
     * Set the value of [objet_es] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetEs($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_es !== $v) {
            $this->objet_es = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_ES;
        }


        return $this;
    } // setObjetEs()

    /**
     * Set the value of [objet_su] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetSu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_su !== $v) {
            $this->objet_su = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_SU;
        }


        return $this;
    } // setObjetSu()

    /**
     * Set the value of [objet_du] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetDu($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_du !== $v) {
            $this->objet_du = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_DU;
        }


        return $this;
    } // setObjetDu()

    /**
     * Set the value of [objet_cz] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetCz($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_cz !== $v) {
            $this->objet_cz = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_CZ;
        }


        return $this;
    } // setObjetCz()

    /**
     * Set the value of [objet_ar] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetAr($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_ar !== $v) {
            $this->objet_ar = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_AR;
        }


        return $this;
    } // setObjetAr()

    /**
     * Set the value of [objet_it] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setObjetIt($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->objet_it !== $v) {
            $this->objet_it = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::OBJET_IT;
        }


        return $this;
    } // setObjetIt()

    /**
     * Set the value of [clause_sociale] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseSociale($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_sociale !== $v) {
            $this->clause_sociale = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_SOCIALE;
        }


        return $this;
    } // setClauseSociale()

    /**
     * Set the value of [clause_environnementale] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseEnvironnementale($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_environnementale !== $v) {
            $this->clause_environnementale = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_ENVIRONNEMENTALE;
        }


        return $this;
    } // setClauseEnvironnementale()

    /**
     * Set the value of [reponse_obligatoire] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReponseObligatoire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reponse_obligatoire !== $v) {
            $this->reponse_obligatoire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REPONSE_OBLIGATOIRE;
        }


        return $this;
    } // setReponseObligatoire()

    /**
     * Set the value of [autoriser_publicite] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAutoriserPublicite($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->autoriser_publicite !== $v) {
            $this->autoriser_publicite = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::AUTORISER_PUBLICITE;
        }


        return $this;
    } // setAutoriserPublicite()

    /**
     * Set the value of [type_envoi] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeEnvoi($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_envoi !== $v) {
            $this->type_envoi = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_ENVOI;
        }


        return $this;
    } // setTypeEnvoi()

    /**
     * Set the value of [chiffrement_offre] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setChiffrementOffre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->chiffrement_offre !== $v) {
            $this->chiffrement_offre = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CHIFFREMENT_OFFRE;
        }


        return $this;
    } // setChiffrementOffre()

    /**
     * Set the value of [env_candidature] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEnvCandidature($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->env_candidature !== $v) {
            $this->env_candidature = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ENV_CANDIDATURE;
        }


        return $this;
    } // setEnvCandidature()

    /**
     * Set the value of [env_offre] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEnvOffre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->env_offre !== $v) {
            $this->env_offre = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ENV_OFFRE;
        }


        return $this;
    } // setEnvOffre()

    /**
     * Set the value of [env_anonymat] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEnvAnonymat($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->env_anonymat !== $v) {
            $this->env_anonymat = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ENV_ANONYMAT;
        }


        return $this;
    } // setEnvAnonymat()

    /**
     * Set the value of [id_etat_consultation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdEtatConsultation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_etat_consultation !== $v) {
            $this->id_etat_consultation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_ETAT_CONSULTATION;
        }


        return $this;
    } // setIdEtatConsultation()

    /**
     * Set the value of [reference_connecteur] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setReferenceConnecteur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->reference_connecteur !== $v) {
            $this->reference_connecteur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REFERENCE_CONNECTEUR;
        }


        return $this;
    } // setReferenceConnecteur()

    /**
     * Set the value of [cons_statut] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setConsStatut($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->cons_statut !== $v) {
            $this->cons_statut = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CONS_STATUT;
        }


        return $this;
    } // setConsStatut()

    /**
     * Set the value of [id_approbateur] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdApprobateur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_approbateur !== $v) {
            $this->id_approbateur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_APPROBATEUR;
        }


        return $this;
    } // setIdApprobateur()

    /**
     * Set the value of [id_valideur] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdValideur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_valideur !== $v) {
            $this->id_valideur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_VALIDEUR;
        }


        return $this;
    } // setIdValideur()

    /**
     * Set the value of [service_validation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setServiceValidation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->service_validation !== $v) {
            $this->service_validation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::SERVICE_VALIDATION;
        }


        return $this;
    } // setServiceValidation()

    /**
     * Set the value of [id_createur] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdCreateur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_createur !== $v) {
            $this->id_createur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_CREATEUR;
        }


        return $this;
    } // setIdCreateur()

    /**
     * Set the value of [nom_createur] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setNomCreateur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->nom_createur !== $v) {
            $this->nom_createur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::NOM_CREATEUR;
        }


        return $this;
    } // setNomCreateur()

    /**
     * Set the value of [prenom_createur] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPrenomCreateur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->prenom_createur !== $v) {
            $this->prenom_createur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PRENOM_CREATEUR;
        }


        return $this;
    } // setPrenomCreateur()

    /**
     * Set the value of [signature_acte_engagement] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setSignatureActeEngagement($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->signature_acte_engagement !== $v) {
            $this->signature_acte_engagement = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::SIGNATURE_ACTE_ENGAGEMENT;
        }


        return $this;
    } // setSignatureActeEngagement()

    /**
     * Set the value of [archivemetadescription] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setArchivemetadescription($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->archivemetadescription !== $v) {
            $this->archivemetadescription = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ARCHIVEMETADESCRIPTION;
        }


        return $this;
    } // setArchivemetadescription()

    /**
     * Set the value of [archivemetamotsclef] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setArchivemetamotsclef($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->archivemetamotsclef !== $v) {
            $this->archivemetamotsclef = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ARCHIVEMETAMOTSCLEF;
        }


        return $this;
    } // setArchivemetamotsclef()

    /**
     * Set the value of [archiveidblobzip] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setArchiveidblobzip($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->archiveidblobzip !== $v) {
            $this->archiveidblobzip = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ARCHIVEIDBLOBZIP;
        }


        return $this;
    } // setArchiveidblobzip()

    /**
     * Set the value of [decision_partielle] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDecisionPartielle($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->decision_partielle !== $v) {
            $this->decision_partielle = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DECISION_PARTIELLE;
        }


        return $this;
    } // setDecisionPartielle()

    /**
     * Set the value of [type_decision_a_renseigner] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionARenseigner($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_a_renseigner !== $v) {
            $this->type_decision_a_renseigner = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_A_RENSEIGNER;
        }


        return $this;
    } // setTypeDecisionARenseigner()

    /**
     * Set the value of [type_decision_attribution_marche] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionAttributionMarche($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_attribution_marche !== $v) {
            $this->type_decision_attribution_marche = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_MARCHE;
        }


        return $this;
    } // setTypeDecisionAttributionMarche()

    /**
     * Set the value of [type_decision_declaration_sans_suite] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionDeclarationSansSuite($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_declaration_sans_suite !== $v) {
            $this->type_decision_declaration_sans_suite = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_DECLARATION_SANS_SUITE;
        }


        return $this;
    } // setTypeDecisionDeclarationSansSuite()

    /**
     * Set the value of [type_decision_declaration_infructueux] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionDeclarationInfructueux($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_declaration_infructueux !== $v) {
            $this->type_decision_declaration_infructueux = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_DECLARATION_INFRUCTUEUX;
        }


        return $this;
    } // setTypeDecisionDeclarationInfructueux()

    /**
     * Set the value of [type_decision_selection_entreprise] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionSelectionEntreprise($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_selection_entreprise !== $v) {
            $this->type_decision_selection_entreprise = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_SELECTION_ENTREPRISE;
        }


        return $this;
    } // setTypeDecisionSelectionEntreprise()

    /**
     * Set the value of [type_decision_attribution_accord_cadre] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionAttributionAccordCadre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_attribution_accord_cadre !== $v) {
            $this->type_decision_attribution_accord_cadre = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_ACCORD_CADRE;
        }


        return $this;
    } // setTypeDecisionAttributionAccordCadre()

    /**
     * Set the value of [type_decision_admission_sad] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionAdmissionSad($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_admission_sad !== $v) {
            $this->type_decision_admission_sad = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_ADMISSION_SAD;
        }


        return $this;
    } // setTypeDecisionAdmissionSad()

    /**
     * Set the value of [type_decision_autre] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeDecisionAutre($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->type_decision_autre !== $v) {
            $this->type_decision_autre = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_DECISION_AUTRE;
        }


        return $this;
    } // setTypeDecisionAutre()

    /**
     * Set the value of [id_archiveur] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdArchiveur($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_archiveur !== $v) {
            $this->id_archiveur = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_ARCHIVEUR;
        }


        return $this;
    } // setIdArchiveur()

    /**
     * Set the value of [prenom_nom_agent_telechargement_plis] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPrenomNomAgentTelechargementPlis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->prenom_nom_agent_telechargement_plis !== $v) {
            $this->prenom_nom_agent_telechargement_plis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PRENOM_NOM_AGENT_TELECHARGEMENT_PLIS;
        }


        return $this;
    } // setPrenomNomAgentTelechargementPlis()

    /**
     * Set the value of [id_agent_telechargement_plis] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdAgentTelechargementPlis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_agent_telechargement_plis !== $v) {
            $this->id_agent_telechargement_plis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_AGENT_TELECHARGEMENT_PLIS;
        }


        return $this;
    } // setIdAgentTelechargementPlis()

    /**
     * Set the value of [path_telechargement_plis] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setPathTelechargementPlis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->path_telechargement_plis !== $v) {
            $this->path_telechargement_plis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::PATH_TELECHARGEMENT_PLIS;
        }


        return $this;
    } // setPathTelechargementPlis()

    /**
     * Set the value of [date_telechargement_plis] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateTelechargementPlis($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_telechargement_plis !== $v) {
            $this->date_telechargement_plis = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_TELECHARGEMENT_PLIS;
        }


        return $this;
    } // setDateTelechargementPlis()

    /**
     * Set the value of [service_validation_intermediaire] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setServiceValidationIntermediaire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->service_validation_intermediaire !== $v) {
            $this->service_validation_intermediaire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::SERVICE_VALIDATION_INTERMEDIAIRE;
        }


        return $this;
    } // setServiceValidationIntermediaire()

    /**
     * Set the value of [env_offre_technique] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEnvOffreTechnique($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->env_offre_technique !== $v) {
            $this->env_offre_technique = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ENV_OFFRE_TECHNIQUE;
        }


        return $this;
    } // setEnvOffreTechnique()

    /**
     * Set the value of [ref_org_partenaire] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setRefOrgPartenaire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->ref_org_partenaire !== $v) {
            $this->ref_org_partenaire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::REF_ORG_PARTENAIRE;
        }


        return $this;
    } // setRefOrgPartenaire()

    /**
     * Set the value of [date_archivage] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateArchivage($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_archivage !== $v) {
            $this->date_archivage = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_ARCHIVAGE;
        }


        return $this;
    } // setDateArchivage()

    /**
     * Set the value of [date_decision_annulation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateDecisionAnnulation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_decision_annulation !== $v) {
            $this->date_decision_annulation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_DECISION_ANNULATION;
        }


        return $this;
    } // setDateDecisionAnnulation()

    /**
     * Set the value of [commentaire_annulation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommentaireAnnulation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->commentaire_annulation !== $v) {
            $this->commentaire_annulation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::COMMENTAIRE_ANNULATION;
        }


        return $this;
    } // setCommentaireAnnulation()

    /**
     * Set the value of [date_mise_en_ligne_souhaitee] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateMiseEnLigneSouhaitee($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_mise_en_ligne_souhaitee !== $v) {
            $this->date_mise_en_ligne_souhaitee = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_MISE_EN_LIGNE_SOUHAITEE;
        }


        return $this;
    } // setDateMiseEnLigneSouhaitee()

    /**
     * Set the value of [etat_en_attente_validation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEtatEnAttenteValidation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->etat_en_attente_validation !== $v) {
            $this->etat_en_attente_validation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ETAT_EN_ATTENTE_VALIDATION;
        }


        return $this;
    } // setEtatEnAttenteValidation()

    /**
     * Set the value of [dossier_additif] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDossierAdditif($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->dossier_additif !== $v) {
            $this->dossier_additif = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DOSSIER_ADDITIF;
        }


        return $this;
    } // setDossierAdditif()

    /**
     * Set the value of [type_marche] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypeMarche($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->type_marche !== $v) {
            $this->type_marche = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_MARCHE;
        }


        return $this;
    } // setTypeMarche()

    /**
     * Set the value of [type_prestation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setTypePrestation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->type_prestation !== $v) {
            $this->type_prestation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::TYPE_PRESTATION;
        }


        return $this;
    } // setTypePrestation()

    /**
     * Set the value of [date_modification] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateModification($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_modification !== $v) {
            $this->date_modification = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_MODIFICATION;
        }


        return $this;
    } // setDateModification()

    /**
     * Set the value of [delai_partiel] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDelaiPartiel($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->delai_partiel !== $v) {
            $this->delai_partiel = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DELAI_PARTIEL;
        }


        return $this;
    } // setDelaiPartiel()

    /**
     * Set the value of [datefinlocale] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDatefinlocale($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->datefinlocale !== $v) {
            $this->datefinlocale = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATEFINLOCALE;
        }


        return $this;
    } // setDatefinlocale()

    /**
     * Set the value of [lieuresidence] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setLieuresidence($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->lieuresidence !== $v) {
            $this->lieuresidence = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::LIEURESIDENCE;
        }


        return $this;
    } // setLieuresidence()

    /**
     * Set the value of [alerte] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setAlerte($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->alerte !== $v) {
            $this->alerte = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ALERTE;
        }


        return $this;
    } // setAlerte()

    /**
     * Set the value of [doublon] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDoublon($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->doublon !== $v) {
            $this->doublon = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DOUBLON;
        }


        return $this;
    } // setDoublon()

    /**
     * Set the value of [denomination_adapte] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDenominationAdapte($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->denomination_adapte !== $v) {
            $this->denomination_adapte = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DENOMINATION_ADAPTE;
        }


        return $this;
    } // setDenominationAdapte()

    /**
     * Set the value of [url_consultation_avis_pub] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setUrlConsultationAvisPub($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->url_consultation_avis_pub !== $v) {
            $this->url_consultation_avis_pub = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::URL_CONSULTATION_AVIS_PUB;
        }


        return $this;
    } // setUrlConsultationAvisPub()

    /**
     * Set the value of [doublon_de] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDoublonDe($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->doublon_de !== $v) {
            $this->doublon_de = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DOUBLON_DE;
        }


        return $this;
    } // setDoublonDe()

    /**
     * Set the value of [entite_adjudicatrice] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setEntiteAdjudicatrice($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->entite_adjudicatrice !== $v) {
            $this->entite_adjudicatrice = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ENTITE_ADJUDICATRICE;
        }


        return $this;
    } // setEntiteAdjudicatrice()

    /**
     * Set the value of [code_operation] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCodeOperation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->code_operation !== $v) {
            $this->code_operation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CODE_OPERATION;
        }


        return $this;
    } // setCodeOperation()

    /**
     * Set the value of [clause_sociale_condition_execution] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseSocialeConditionExecution($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_sociale_condition_execution !== $v) {
            $this->clause_sociale_condition_execution = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_SOCIALE_CONDITION_EXECUTION;
        }


        return $this;
    } // setClauseSocialeConditionExecution()

    /**
     * Set the value of [clause_sociale_insertion] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseSocialeInsertion($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_sociale_insertion !== $v) {
            $this->clause_sociale_insertion = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_SOCIALE_INSERTION;
        }


        return $this;
    } // setClauseSocialeInsertion()

    /**
     * Set the value of [clause_sociale_ateliers_proteges] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseSocialeAteliersProteges($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_sociale_ateliers_proteges !== $v) {
            $this->clause_sociale_ateliers_proteges = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_SOCIALE_ATELIERS_PROTEGES;
        }


        return $this;
    } // setClauseSocialeAteliersProteges()

    /**
     * Set the value of [clause_env_specs_techniques] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseEnvSpecsTechniques($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_env_specs_techniques !== $v) {
            $this->clause_env_specs_techniques = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_ENV_SPECS_TECHNIQUES;
        }


        return $this;
    } // setClauseEnvSpecsTechniques()

    /**
     * Set the value of [clause_env_cond_execution] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseEnvCondExecution($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_env_cond_execution !== $v) {
            $this->clause_env_cond_execution = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_ENV_COND_EXECUTION;
        }


        return $this;
    } // setClauseEnvCondExecution()

    /**
     * Set the value of [clause_env_criteres_select] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setClauseEnvCriteresSelect($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->clause_env_criteres_select !== $v) {
            $this->clause_env_criteres_select = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::CLAUSE_ENV_CRITERES_SELECT;
        }


        return $this;
    } // setClauseEnvCriteresSelect()

    /**
     * Set the value of [id_donnee_complementaire] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdDonneeComplementaire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_donnee_complementaire !== $v) {
            $this->id_donnee_complementaire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_DONNEE_COMPLEMENTAIRE;
        }


        return $this;
    } // setIdDonneeComplementaire()

    /**
     * Set the value of [donnee_complementaire_obligatoire] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDonneeComplementaireObligatoire($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->donnee_complementaire_obligatoire !== $v) {
            $this->donnee_complementaire_obligatoire = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DONNEE_COMPLEMENTAIRE_OBLIGATOIRE;
        }


        return $this;
    } // setDonneeComplementaireObligatoire()

    /**
     * Set the value of [mode_ouverture_reponse] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setModeOuvertureReponse($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->mode_ouverture_reponse !== $v) {
            $this->mode_ouverture_reponse = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::MODE_OUVERTURE_REPONSE;
        }


        return $this;
    } // setModeOuvertureReponse()

    /**
     * Set the value of [id_fichier_annulation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdFichierAnnulation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->id_fichier_annulation !== $v) {
            $this->id_fichier_annulation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::ID_FICHIER_ANNULATION;
        }


        return $this;
    } // setIdFichierAnnulation()

    /**
     * Set the value of [idoperation] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setIdoperation($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->idoperation !== $v) {
            $this->idoperation = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::IDOPERATION;
        }


        return $this;
    } // setIdoperation()

    /**
     * Set the value of [marche_public_simplifie] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setMarchePublicSimplifie($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->marche_public_simplifie !== $v) {
            $this->marche_public_simplifie = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::MARCHE_PUBLIC_SIMPLIFIE;
        }


        return $this;
    } // setMarchePublicSimplifie()

    /**
     * Set the value of [infos_blocs_atlas] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setInfosBlocsAtlas($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->infos_blocs_atlas !== $v) {
            $this->infos_blocs_atlas = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::INFOS_BLOCS_ATLAS;
        }


        return $this;
    } // setInfosBlocsAtlas()

    /**
     * Set the value of [date_fin_unix] column.
     * 
     * @param string $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateFinUnix($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (string) $v;
        }

        if ($this->date_fin_unix !== $v) {
            $this->date_fin_unix = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::DATE_FIN_UNIX;
        }


        return $this;
    } // setDateFinUnix()

    /**
     * Sets the value of [date_achevement] column to a normalized version of the date/time value specified.
     * 
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setDateAchevement($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->date_achevement !== null || $dt !== null) {
            $currentDateAsString = ($this->date_achevement !== null && $tmpDt = new DateTime($this->date_achevement)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->date_achevement = $newDateAsString;
                $this->modifiedColumns[] = CommonConsultationPeer::DATE_ACHEVEMENT;
            }
        } // if either are not null


        return $this;
    } // setDateAchevement()

    /**
     * Set the value of [nombre_de_lots] column.
     * 
     * @param int $v new value
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setNombreDeLots($v)
    {
        if ($v !== null && is_numeric($v)) {
            $v = (int) $v;
        }

        if ($this->nombre_de_lots !== $v) {
            $this->nombre_de_lots = $v;
            $this->modifiedColumns[] = CommonConsultationPeer::NOMBRE_DE_LOTS;
        }


        return $this;
    } // setNombreDeLots()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
            if ($this->organisme !== '') {
                return false;
            }

            if ($this->reference_utilisateur !== '') {
                return false;
            }

            if ($this->categorie !== '0') {
                return false;
            }

            if ($this->datedebut !== NULL) {
                return false;
            }

            if ($this->datefin !== NULL) {
                return false;
            }

            if ($this->datevalidation !== '0000-00-00 00:00:00') {
                return false;
            }

            if ($this->type_procedure !== '') {
                return false;
            }

            if ($this->reponse_electronique !== '1') {
                return false;
            }

            if ($this->num_procedure !== 0) {
                return false;
            }

            if ($this->id_type_procedure !== 0) {
                return false;
            }

            if ($this->id_type_avis !== 0) {
                return false;
            }

            if ($this->type_mise_en_ligne !== 1) {
                return false;
            }

            if ($this->datemiseenligne !== NULL) {
                return false;
            }

            if ($this->is_tiers_avis !== '0') {
                return false;
            }

            if ($this->url !== '') {
                return false;
            }

            if ($this->datefin_sad !== NULL) {
                return false;
            }

            if ($this->is_sys_acq_dyn !== 0) {
                return false;
            }

            if ($this->reference_consultation_init !== '') {
                return false;
            }

            if ($this->id_type_validation !== 2) {
                return false;
            }

            if ($this->etat_approbation !== '0') {
                return false;
            }

            if ($this->etat_validation !== '0') {
                return false;
            }

            if ($this->publication_europe !== '0') {
                return false;
            }

            if ($this->etat_publication !== 0) {
                return false;
            }

            if ($this->poursuivre_affichage !== 0) {
                return false;
            }

            if ($this->date_fin_affichage !== '0000-00-00 00:00:00') {
                return false;
            }

            if ($this->depouillable_phase_consultation !== '0') {
                return false;
            }

            if ($this->consultation_transverse !== '0') {
                return false;
            }

            if ($this->consultation_achat_publique !== '0') {
                return false;
            }

            if ($this->partial_dce_download !== '0') {
                return false;
            }

            if ($this->tirage_plan !== 0) {
                return false;
            }

            if ($this->tireur_plan !== 0) {
                return false;
            }

            if ($this->accessibilite_en !== '0') {
                return false;
            }

            if ($this->accessibilite_es !== '0') {
                return false;
            }

            if ($this->id_type_procedure_org !== 0) {
                return false;
            }

            if ($this->organisme_consultation_init !== '') {
                return false;
            }

            if ($this->accessibilite_fr !== '0') {
                return false;
            }

            if ($this->accessibilite_cz !== '0') {
                return false;
            }

            if ($this->accessibilite_du !== '0') {
                return false;
            }

            if ($this->accessibilite_su !== '0') {
                return false;
            }

            if ($this->accessibilite_ar !== '0') {
                return false;
            }

            if ($this->alloti !== '0') {
                return false;
            }

            if ($this->numero_phase !== 0) {
                return false;
            }

            if ($this->consultation_externe !== '0') {
                return false;
            }

            if ($this->domaines_activites !== '') {
                return false;
            }

            if ($this->variante_calcule !== '0') {
                return false;
            }

            if ($this->consultation_annulee !== '0') {
                return false;
            }

            if ($this->accessibilite_it !== '0') {
                return false;
            }

            if ($this->adresse_depot_offres_it !== '') {
                return false;
            }

            if ($this->lieu_ouverture_plis_it !== '') {
                return false;
            }

            if ($this->adresse_retrais_dossiers_it !== '') {
                return false;
            }

            if ($this->pieces_dossier_admin_it !== '') {
                return false;
            }

            if ($this->pieces_dossier_tech_it !== '') {
                return false;
            }

            if ($this->pieces_dossier_additif_it !== '') {
                return false;
            }

            if ($this->add_echantillion_it !== '') {
                return false;
            }

            if ($this->add_reunion_it !== '') {
                return false;
            }

            if ($this->date_decision !== '') {
                return false;
            }

            if ($this->autoriser_reponse_electronique !== '1') {
                return false;
            }

            if ($this->regle_mise_en_ligne !== 1) {
                return false;
            }

            if ($this->id_regle_validation !== 2) {
                return false;
            }

            if ($this->clause_sociale !== '0') {
                return false;
            }

            if ($this->clause_environnementale !== '0') {
                return false;
            }

            if ($this->reponse_obligatoire !== '0') {
                return false;
            }

            if ($this->autoriser_publicite !== 1) {
                return false;
            }

            if ($this->type_envoi !== '') {
                return false;
            }

            if ($this->chiffrement_offre !== '') {
                return false;
            }

            if ($this->env_candidature !== 0) {
                return false;
            }

            if ($this->env_offre !== 0) {
                return false;
            }

            if ($this->env_anonymat !== 0) {
                return false;
            }

            if ($this->id_etat_consultation !== 0) {
                return false;
            }

            if ($this->reference_connecteur !== '') {
                return false;
            }

            if ($this->cons_statut !== '0') {
                return false;
            }

            if ($this->id_approbateur !== 0) {
                return false;
            }

            if ($this->id_valideur !== 0) {
                return false;
            }

            if ($this->service_validation !== 0) {
                return false;
            }

            if ($this->id_createur !== 0) {
                return false;
            }

            if ($this->signature_acte_engagement !== '0') {
                return false;
            }

            if ($this->decision_partielle !== '0') {
                return false;
            }

            if ($this->type_decision_a_renseigner !== '1') {
                return false;
            }

            if ($this->type_decision_attribution_marche !== '1') {
                return false;
            }

            if ($this->type_decision_declaration_sans_suite !== '1') {
                return false;
            }

            if ($this->type_decision_declaration_infructueux !== '1') {
                return false;
            }

            if ($this->type_decision_selection_entreprise !== '1') {
                return false;
            }

            if ($this->type_decision_attribution_accord_cadre !== '1') {
                return false;
            }

            if ($this->type_decision_admission_sad !== '1') {
                return false;
            }

            if ($this->type_decision_autre !== '1') {
                return false;
            }

            if ($this->id_agent_telechargement_plis !== 0) {
                return false;
            }

            if ($this->env_offre_technique !== 0) {
                return false;
            }

            if ($this->ref_org_partenaire !== '') {
                return false;
            }

            if ($this->etat_en_attente_validation !== '1') {
                return false;
            }

            if ($this->dossier_additif !== '0') {
                return false;
            }

            if ($this->type_marche !== 0) {
                return false;
            }

            if ($this->type_prestation !== 1) {
                return false;
            }

            if ($this->delai_partiel !== '0') {
                return false;
            }

            if ($this->datefinlocale !== '0000-00-00 00:00:00') {
                return false;
            }

            if ($this->alerte !== '0') {
                return false;
            }

            if ($this->doublon !== '0') {
                return false;
            }

            if ($this->clause_sociale_condition_execution !== '0') {
                return false;
            }

            if ($this->clause_sociale_insertion !== '0') {
                return false;
            }

            if ($this->clause_sociale_ateliers_proteges !== '0') {
                return false;
            }

            if ($this->clause_env_specs_techniques !== '0') {
                return false;
            }

            if ($this->clause_env_cond_execution !== '0') {
                return false;
            }

            if ($this->clause_env_criteres_select !== '0') {
                return false;
            }

            if ($this->donnee_complementaire_obligatoire !== '0') {
                return false;
            }

            if ($this->mode_ouverture_reponse !== '0') {
                return false;
            }

            if ($this->marche_public_simplifie !== '0') {
                return false;
            }

            if ($this->infos_blocs_atlas !== '0##0') {
                return false;
            }

            if ($this->date_fin_unix !== '0') {
                return false;
            }

        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which resultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->reference = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->organisme = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
            $this->reference_utilisateur = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
            $this->categorie = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
            $this->titre = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
            $this->resume = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
            $this->datedebut = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
            $this->datefin = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->datevalidation = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->type_procedure = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->code_procedure = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->reponse_electronique = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->num_procedure = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
            $this->id_type_procedure = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
            $this->id_type_avis = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
            $this->lieu_execution = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
            $this->type_mise_en_ligne = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
            $this->datemiseenligne = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
            $this->is_tiers_avis = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
            $this->url = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
            $this->datefin_sad = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
            $this->is_sys_acq_dyn = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
            $this->reference_consultation_init = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
            $this->signature_offre = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
            $this->id_type_validation = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
            $this->etat_approbation = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
            $this->etat_validation = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
            $this->champ_supp_invisible = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
            $this->code_cpv_1 = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
            $this->code_cpv_2 = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
            $this->publication_europe = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
            $this->etat_publication = ($row[$startcol + 31] !== null) ? (int) $row[$startcol + 31] : null;
            $this->poursuivre_affichage = ($row[$startcol + 32] !== null) ? (int) $row[$startcol + 32] : null;
            $this->nbr_telechargement_dce = ($row[$startcol + 33] !== null) ? (int) $row[$startcol + 33] : null;
            $this->service_id = ($row[$startcol + 34] !== null) ? (int) $row[$startcol + 34] : null;
            $this->service_associe_id = ($row[$startcol + 35] !== null) ? (int) $row[$startcol + 35] : null;
            $this->detail_consultation = ($row[$startcol + 36] !== null) ? (string) $row[$startcol + 36] : null;
            $this->date_fin_affichage = ($row[$startcol + 37] !== null) ? (string) $row[$startcol + 37] : null;
            $this->depouillable_phase_consultation = ($row[$startcol + 38] !== null) ? (string) $row[$startcol + 38] : null;
            $this->consultation_transverse = ($row[$startcol + 39] !== null) ? (string) $row[$startcol + 39] : null;
            $this->consultation_achat_publique = ($row[$startcol + 40] !== null) ? (string) $row[$startcol + 40] : null;
            $this->url_consultation_achat_publique = ($row[$startcol + 41] !== null) ? (string) $row[$startcol + 41] : null;
            $this->partial_dce_download = ($row[$startcol + 42] !== null) ? (string) $row[$startcol + 42] : null;
            $this->tirage_plan = ($row[$startcol + 43] !== null) ? (int) $row[$startcol + 43] : null;
            $this->tireur_plan = ($row[$startcol + 44] !== null) ? (int) $row[$startcol + 44] : null;
            $this->date_mise_en_ligne_calcule = ($row[$startcol + 45] !== null) ? (string) $row[$startcol + 45] : null;
            $this->accessibilite_en = ($row[$startcol + 46] !== null) ? (string) $row[$startcol + 46] : null;
            $this->accessibilite_es = ($row[$startcol + 47] !== null) ? (string) $row[$startcol + 47] : null;
            $this->nbr_reponse = ($row[$startcol + 48] !== null) ? (int) $row[$startcol + 48] : null;
            $this->id_type_procedure_org = ($row[$startcol + 49] !== null) ? (int) $row[$startcol + 49] : null;
            $this->organisme_consultation_init = ($row[$startcol + 50] !== null) ? (string) $row[$startcol + 50] : null;
            $this->tirage_descriptif = ($row[$startcol + 51] !== null) ? (string) $row[$startcol + 51] : null;
            $this->date_validation_intermediaire = ($row[$startcol + 52] !== null) ? (string) $row[$startcol + 52] : null;
            $this->accessibilite_fr = ($row[$startcol + 53] !== null) ? (string) $row[$startcol + 53] : null;
            $this->id_tr_accessibilite = ($row[$startcol + 54] !== null) ? (int) $row[$startcol + 54] : null;
            $this->accessibilite_cz = ($row[$startcol + 55] !== null) ? (string) $row[$startcol + 55] : null;
            $this->accessibilite_du = ($row[$startcol + 56] !== null) ? (string) $row[$startcol + 56] : null;
            $this->accessibilite_su = ($row[$startcol + 57] !== null) ? (string) $row[$startcol + 57] : null;
            $this->accessibilite_ar = ($row[$startcol + 58] !== null) ? (string) $row[$startcol + 58] : null;
            $this->alloti = ($row[$startcol + 59] !== null) ? (string) $row[$startcol + 59] : null;
            $this->numero_phase = ($row[$startcol + 60] !== null) ? (int) $row[$startcol + 60] : null;
            $this->consultation_externe = ($row[$startcol + 61] !== null) ? (string) $row[$startcol + 61] : null;
            $this->url_consultation_externe = ($row[$startcol + 62] !== null) ? (string) $row[$startcol + 62] : null;
            $this->org_denomination = ($row[$startcol + 63] !== null) ? (string) $row[$startcol + 63] : null;
            $this->domaines_activites = ($row[$startcol + 64] !== null) ? (string) $row[$startcol + 64] : null;
            $this->id_affaire = ($row[$startcol + 65] !== null) ? (int) $row[$startcol + 65] : null;
            $this->adresse_retrais_dossiers = ($row[$startcol + 66] !== null) ? (string) $row[$startcol + 66] : null;
            $this->caution_provisoire = ($row[$startcol + 67] !== null) ? (string) $row[$startcol + 67] : null;
            $this->adresse_depot_offres = ($row[$startcol + 68] !== null) ? (string) $row[$startcol + 68] : null;
            $this->lieu_ouverture_plis = ($row[$startcol + 69] !== null) ? (string) $row[$startcol + 69] : null;
            $this->prix_aquisition_plans = ($row[$startcol + 70] !== null) ? (string) $row[$startcol + 70] : null;
            $this->qualification = ($row[$startcol + 71] !== null) ? (string) $row[$startcol + 71] : null;
            $this->agrements = ($row[$startcol + 72] !== null) ? (string) $row[$startcol + 72] : null;
            $this->add_echantillion = ($row[$startcol + 73] !== null) ? (string) $row[$startcol + 73] : null;
            $this->date_limite_echantillion = ($row[$startcol + 74] !== null) ? (string) $row[$startcol + 74] : null;
            $this->add_reunion = ($row[$startcol + 75] !== null) ? (string) $row[$startcol + 75] : null;
            $this->date_reunion = ($row[$startcol + 76] !== null) ? (string) $row[$startcol + 76] : null;
            $this->variantes = ($row[$startcol + 77] !== null) ? (string) $row[$startcol + 77] : null;
            $this->adresse_retrais_dossiers_ar = ($row[$startcol + 78] !== null) ? (string) $row[$startcol + 78] : null;
            $this->adresse_depot_offres_ar = ($row[$startcol + 79] !== null) ? (string) $row[$startcol + 79] : null;
            $this->lieu_ouverture_plis_ar = ($row[$startcol + 80] !== null) ? (string) $row[$startcol + 80] : null;
            $this->pieces_dossier_admin = ($row[$startcol + 81] !== null) ? (string) $row[$startcol + 81] : null;
            $this->pieces_dossier_admin_fr = ($row[$startcol + 82] !== null) ? (string) $row[$startcol + 82] : null;
            $this->pieces_dossier_admin_en = ($row[$startcol + 83] !== null) ? (string) $row[$startcol + 83] : null;
            $this->pieces_dossier_admin_es = ($row[$startcol + 84] !== null) ? (string) $row[$startcol + 84] : null;
            $this->pieces_dossier_admin_su = ($row[$startcol + 85] !== null) ? (string) $row[$startcol + 85] : null;
            $this->pieces_dossier_admin_du = ($row[$startcol + 86] !== null) ? (string) $row[$startcol + 86] : null;
            $this->pieces_dossier_admin_cz = ($row[$startcol + 87] !== null) ? (string) $row[$startcol + 87] : null;
            $this->pieces_dossier_admin_ar = ($row[$startcol + 88] !== null) ? (string) $row[$startcol + 88] : null;
            $this->pieces_dossier_tech = ($row[$startcol + 89] !== null) ? (string) $row[$startcol + 89] : null;
            $this->pieces_dossier_tech_fr = ($row[$startcol + 90] !== null) ? (string) $row[$startcol + 90] : null;
            $this->pieces_dossier_tech_en = ($row[$startcol + 91] !== null) ? (string) $row[$startcol + 91] : null;
            $this->pieces_dossier_tech_es = ($row[$startcol + 92] !== null) ? (string) $row[$startcol + 92] : null;
            $this->pieces_dossier_tech_su = ($row[$startcol + 93] !== null) ? (string) $row[$startcol + 93] : null;
            $this->pieces_dossier_tech_du = ($row[$startcol + 94] !== null) ? (string) $row[$startcol + 94] : null;
            $this->pieces_dossier_tech_cz = ($row[$startcol + 95] !== null) ? (string) $row[$startcol + 95] : null;
            $this->pieces_dossier_tech_ar = ($row[$startcol + 96] !== null) ? (string) $row[$startcol + 96] : null;
            $this->pieces_dossier_additif = ($row[$startcol + 97] !== null) ? (string) $row[$startcol + 97] : null;
            $this->pieces_dossier_additif_fr = ($row[$startcol + 98] !== null) ? (string) $row[$startcol + 98] : null;
            $this->pieces_dossier_additif_en = ($row[$startcol + 99] !== null) ? (string) $row[$startcol + 99] : null;
            $this->pieces_dossier_additif_es = ($row[$startcol + 100] !== null) ? (string) $row[$startcol + 100] : null;
            $this->pieces_dossier_additif_su = ($row[$startcol + 101] !== null) ? (string) $row[$startcol + 101] : null;
            $this->pieces_dossier_additif_du = ($row[$startcol + 102] !== null) ? (string) $row[$startcol + 102] : null;
            $this->pieces_dossier_additif_cz = ($row[$startcol + 103] !== null) ? (string) $row[$startcol + 103] : null;
            $this->pieces_dossier_additif_ar = ($row[$startcol + 104] !== null) ? (string) $row[$startcol + 104] : null;
            $this->id_rpa = ($row[$startcol + 105] !== null) ? (int) $row[$startcol + 105] : null;
            $this->detail_consultation_fr = ($row[$startcol + 106] !== null) ? (string) $row[$startcol + 106] : null;
            $this->detail_consultation_en = ($row[$startcol + 107] !== null) ? (string) $row[$startcol + 107] : null;
            $this->detail_consultation_es = ($row[$startcol + 108] !== null) ? (string) $row[$startcol + 108] : null;
            $this->detail_consultation_su = ($row[$startcol + 109] !== null) ? (string) $row[$startcol + 109] : null;
            $this->detail_consultation_du = ($row[$startcol + 110] !== null) ? (string) $row[$startcol + 110] : null;
            $this->detail_consultation_cz = ($row[$startcol + 111] !== null) ? (string) $row[$startcol + 111] : null;
            $this->detail_consultation_ar = ($row[$startcol + 112] !== null) ? (string) $row[$startcol + 112] : null;
            $this->echantillon = ($row[$startcol + 113] !== null) ? (string) $row[$startcol + 113] : null;
            $this->reunion = ($row[$startcol + 114] !== null) ? (string) $row[$startcol + 114] : null;
            $this->visites_lieux = ($row[$startcol + 115] !== null) ? (string) $row[$startcol + 115] : null;
            $this->variante_calcule = ($row[$startcol + 116] !== null) ? (string) $row[$startcol + 116] : null;
            $this->adresse_retrais_dossiers_fr = ($row[$startcol + 117] !== null) ? (string) $row[$startcol + 117] : null;
            $this->adresse_retrais_dossiers_en = ($row[$startcol + 118] !== null) ? (string) $row[$startcol + 118] : null;
            $this->adresse_retrais_dossiers_es = ($row[$startcol + 119] !== null) ? (string) $row[$startcol + 119] : null;
            $this->adresse_retrais_dossiers_su = ($row[$startcol + 120] !== null) ? (string) $row[$startcol + 120] : null;
            $this->adresse_retrais_dossiers_du = ($row[$startcol + 121] !== null) ? (string) $row[$startcol + 121] : null;
            $this->adresse_retrais_dossiers_cz = ($row[$startcol + 122] !== null) ? (string) $row[$startcol + 122] : null;
            $this->adresse_depot_offres_fr = ($row[$startcol + 123] !== null) ? (string) $row[$startcol + 123] : null;
            $this->adresse_depot_offres_en = ($row[$startcol + 124] !== null) ? (string) $row[$startcol + 124] : null;
            $this->adresse_depot_offres_es = ($row[$startcol + 125] !== null) ? (string) $row[$startcol + 125] : null;
            $this->adresse_depot_offres_su = ($row[$startcol + 126] !== null) ? (string) $row[$startcol + 126] : null;
            $this->adresse_depot_offres_du = ($row[$startcol + 127] !== null) ? (string) $row[$startcol + 127] : null;
            $this->adresse_depot_offres_cz = ($row[$startcol + 128] !== null) ? (string) $row[$startcol + 128] : null;
            $this->lieu_ouverture_plis_fr = ($row[$startcol + 129] !== null) ? (string) $row[$startcol + 129] : null;
            $this->lieu_ouverture_plis_en = ($row[$startcol + 130] !== null) ? (string) $row[$startcol + 130] : null;
            $this->lieu_ouverture_plis_es = ($row[$startcol + 131] !== null) ? (string) $row[$startcol + 131] : null;
            $this->lieu_ouverture_plis_su = ($row[$startcol + 132] !== null) ? (string) $row[$startcol + 132] : null;
            $this->lieu_ouverture_plis_du = ($row[$startcol + 133] !== null) ? (string) $row[$startcol + 133] : null;
            $this->lieu_ouverture_plis_cz = ($row[$startcol + 134] !== null) ? (string) $row[$startcol + 134] : null;
            $this->add_echantillion_fr = ($row[$startcol + 135] !== null) ? (string) $row[$startcol + 135] : null;
            $this->add_echantillion_en = ($row[$startcol + 136] !== null) ? (string) $row[$startcol + 136] : null;
            $this->add_echantillion_es = ($row[$startcol + 137] !== null) ? (string) $row[$startcol + 137] : null;
            $this->add_echantillion_su = ($row[$startcol + 138] !== null) ? (string) $row[$startcol + 138] : null;
            $this->add_echantillion_du = ($row[$startcol + 139] !== null) ? (string) $row[$startcol + 139] : null;
            $this->add_echantillion_cz = ($row[$startcol + 140] !== null) ? (string) $row[$startcol + 140] : null;
            $this->add_echantillion_ar = ($row[$startcol + 141] !== null) ? (string) $row[$startcol + 141] : null;
            $this->add_reunion_fr = ($row[$startcol + 142] !== null) ? (string) $row[$startcol + 142] : null;
            $this->add_reunion_en = ($row[$startcol + 143] !== null) ? (string) $row[$startcol + 143] : null;
            $this->add_reunion_es = ($row[$startcol + 144] !== null) ? (string) $row[$startcol + 144] : null;
            $this->add_reunion_su = ($row[$startcol + 145] !== null) ? (string) $row[$startcol + 145] : null;
            $this->add_reunion_du = ($row[$startcol + 146] !== null) ? (string) $row[$startcol + 146] : null;
            $this->add_reunion_cz = ($row[$startcol + 147] !== null) ? (string) $row[$startcol + 147] : null;
            $this->add_reunion_ar = ($row[$startcol + 148] !== null) ? (string) $row[$startcol + 148] : null;
            $this->mode_passation = ($row[$startcol + 149] !== null) ? (string) $row[$startcol + 149] : null;
            $this->consultation_annulee = ($row[$startcol + 150] !== null) ? (string) $row[$startcol + 150] : null;
            $this->compte_boamp_associe = ($row[$startcol + 151] !== null) ? (int) $row[$startcol + 151] : null;
            $this->accessibilite_it = ($row[$startcol + 152] !== null) ? (string) $row[$startcol + 152] : null;
            $this->adresse_depot_offres_it = ($row[$startcol + 153] !== null) ? (string) $row[$startcol + 153] : null;
            $this->lieu_ouverture_plis_it = ($row[$startcol + 154] !== null) ? (string) $row[$startcol + 154] : null;
            $this->adresse_retrais_dossiers_it = ($row[$startcol + 155] !== null) ? (string) $row[$startcol + 155] : null;
            $this->pieces_dossier_admin_it = ($row[$startcol + 156] !== null) ? (string) $row[$startcol + 156] : null;
            $this->pieces_dossier_tech_it = ($row[$startcol + 157] !== null) ? (string) $row[$startcol + 157] : null;
            $this->pieces_dossier_additif_it = ($row[$startcol + 158] !== null) ? (string) $row[$startcol + 158] : null;
            $this->detail_consultation_it = ($row[$startcol + 159] !== null) ? (string) $row[$startcol + 159] : null;
            $this->add_echantillion_it = ($row[$startcol + 160] !== null) ? (string) $row[$startcol + 160] : null;
            $this->add_reunion_it = ($row[$startcol + 161] !== null) ? (string) $row[$startcol + 161] : null;
            $this->codes_nuts = ($row[$startcol + 162] !== null) ? (string) $row[$startcol + 162] : null;
            $this->intitule = ($row[$startcol + 163] !== null) ? (string) $row[$startcol + 163] : null;
            $this->id_tr_intitule = ($row[$startcol + 164] !== null) ? (int) $row[$startcol + 164] : null;
            $this->objet = ($row[$startcol + 165] !== null) ? (string) $row[$startcol + 165] : null;
            $this->id_tr_objet = ($row[$startcol + 166] !== null) ? (int) $row[$startcol + 166] : null;
            $this->date_decision = ($row[$startcol + 167] !== null) ? (string) $row[$startcol + 167] : null;
            $this->type_acces = ($row[$startcol + 168] !== null) ? (string) $row[$startcol + 168] : null;
            $this->autoriser_reponse_electronique = ($row[$startcol + 169] !== null) ? (string) $row[$startcol + 169] : null;
            $this->regle_mise_en_ligne = ($row[$startcol + 170] !== null) ? (int) $row[$startcol + 170] : null;
            $this->id_regle_validation = ($row[$startcol + 171] !== null) ? (int) $row[$startcol + 171] : null;
            $this->intitule_fr = ($row[$startcol + 172] !== null) ? (string) $row[$startcol + 172] : null;
            $this->intitule_en = ($row[$startcol + 173] !== null) ? (string) $row[$startcol + 173] : null;
            $this->intitule_es = ($row[$startcol + 174] !== null) ? (string) $row[$startcol + 174] : null;
            $this->intitule_su = ($row[$startcol + 175] !== null) ? (string) $row[$startcol + 175] : null;
            $this->intitule_du = ($row[$startcol + 176] !== null) ? (string) $row[$startcol + 176] : null;
            $this->intitule_cz = ($row[$startcol + 177] !== null) ? (string) $row[$startcol + 177] : null;
            $this->intitule_ar = ($row[$startcol + 178] !== null) ? (string) $row[$startcol + 178] : null;
            $this->intitule_it = ($row[$startcol + 179] !== null) ? (string) $row[$startcol + 179] : null;
            $this->objet_fr = ($row[$startcol + 180] !== null) ? (string) $row[$startcol + 180] : null;
            $this->objet_en = ($row[$startcol + 181] !== null) ? (string) $row[$startcol + 181] : null;
            $this->objet_es = ($row[$startcol + 182] !== null) ? (string) $row[$startcol + 182] : null;
            $this->objet_su = ($row[$startcol + 183] !== null) ? (string) $row[$startcol + 183] : null;
            $this->objet_du = ($row[$startcol + 184] !== null) ? (string) $row[$startcol + 184] : null;
            $this->objet_cz = ($row[$startcol + 185] !== null) ? (string) $row[$startcol + 185] : null;
            $this->objet_ar = ($row[$startcol + 186] !== null) ? (string) $row[$startcol + 186] : null;
            $this->objet_it = ($row[$startcol + 187] !== null) ? (string) $row[$startcol + 187] : null;
            $this->clause_sociale = ($row[$startcol + 188] !== null) ? (string) $row[$startcol + 188] : null;
            $this->clause_environnementale = ($row[$startcol + 189] !== null) ? (string) $row[$startcol + 189] : null;
            $this->reponse_obligatoire = ($row[$startcol + 190] !== null) ? (string) $row[$startcol + 190] : null;
            $this->autoriser_publicite = ($row[$startcol + 191] !== null) ? (int) $row[$startcol + 191] : null;
            $this->type_envoi = ($row[$startcol + 192] !== null) ? (string) $row[$startcol + 192] : null;
            $this->chiffrement_offre = ($row[$startcol + 193] !== null) ? (string) $row[$startcol + 193] : null;
            $this->env_candidature = ($row[$startcol + 194] !== null) ? (int) $row[$startcol + 194] : null;
            $this->env_offre = ($row[$startcol + 195] !== null) ? (int) $row[$startcol + 195] : null;
            $this->env_anonymat = ($row[$startcol + 196] !== null) ? (int) $row[$startcol + 196] : null;
            $this->id_etat_consultation = ($row[$startcol + 197] !== null) ? (int) $row[$startcol + 197] : null;
            $this->reference_connecteur = ($row[$startcol + 198] !== null) ? (string) $row[$startcol + 198] : null;
            $this->cons_statut = ($row[$startcol + 199] !== null) ? (string) $row[$startcol + 199] : null;
            $this->id_approbateur = ($row[$startcol + 200] !== null) ? (int) $row[$startcol + 200] : null;
            $this->id_valideur = ($row[$startcol + 201] !== null) ? (int) $row[$startcol + 201] : null;
            $this->service_validation = ($row[$startcol + 202] !== null) ? (int) $row[$startcol + 202] : null;
            $this->id_createur = ($row[$startcol + 203] !== null) ? (int) $row[$startcol + 203] : null;
            $this->nom_createur = ($row[$startcol + 204] !== null) ? (string) $row[$startcol + 204] : null;
            $this->prenom_createur = ($row[$startcol + 205] !== null) ? (string) $row[$startcol + 205] : null;
            $this->signature_acte_engagement = ($row[$startcol + 206] !== null) ? (string) $row[$startcol + 206] : null;
            $this->archivemetadescription = ($row[$startcol + 207] !== null) ? (string) $row[$startcol + 207] : null;
            $this->archivemetamotsclef = ($row[$startcol + 208] !== null) ? (string) $row[$startcol + 208] : null;
            $this->archiveidblobzip = ($row[$startcol + 209] !== null) ? (int) $row[$startcol + 209] : null;
            $this->decision_partielle = ($row[$startcol + 210] !== null) ? (string) $row[$startcol + 210] : null;
            $this->type_decision_a_renseigner = ($row[$startcol + 211] !== null) ? (string) $row[$startcol + 211] : null;
            $this->type_decision_attribution_marche = ($row[$startcol + 212] !== null) ? (string) $row[$startcol + 212] : null;
            $this->type_decision_declaration_sans_suite = ($row[$startcol + 213] !== null) ? (string) $row[$startcol + 213] : null;
            $this->type_decision_declaration_infructueux = ($row[$startcol + 214] !== null) ? (string) $row[$startcol + 214] : null;
            $this->type_decision_selection_entreprise = ($row[$startcol + 215] !== null) ? (string) $row[$startcol + 215] : null;
            $this->type_decision_attribution_accord_cadre = ($row[$startcol + 216] !== null) ? (string) $row[$startcol + 216] : null;
            $this->type_decision_admission_sad = ($row[$startcol + 217] !== null) ? (string) $row[$startcol + 217] : null;
            $this->type_decision_autre = ($row[$startcol + 218] !== null) ? (string) $row[$startcol + 218] : null;
            $this->id_archiveur = ($row[$startcol + 219] !== null) ? (int) $row[$startcol + 219] : null;
            $this->prenom_nom_agent_telechargement_plis = ($row[$startcol + 220] !== null) ? (string) $row[$startcol + 220] : null;
            $this->id_agent_telechargement_plis = ($row[$startcol + 221] !== null) ? (int) $row[$startcol + 221] : null;
            $this->path_telechargement_plis = ($row[$startcol + 222] !== null) ? (string) $row[$startcol + 222] : null;
            $this->date_telechargement_plis = ($row[$startcol + 223] !== null) ? (string) $row[$startcol + 223] : null;
            $this->service_validation_intermediaire = ($row[$startcol + 224] !== null) ? (int) $row[$startcol + 224] : null;
            $this->env_offre_technique = ($row[$startcol + 225] !== null) ? (int) $row[$startcol + 225] : null;
            $this->ref_org_partenaire = ($row[$startcol + 226] !== null) ? (string) $row[$startcol + 226] : null;
            $this->date_archivage = ($row[$startcol + 227] !== null) ? (string) $row[$startcol + 227] : null;
            $this->date_decision_annulation = ($row[$startcol + 228] !== null) ? (string) $row[$startcol + 228] : null;
            $this->commentaire_annulation = ($row[$startcol + 229] !== null) ? (string) $row[$startcol + 229] : null;
            $this->date_mise_en_ligne_souhaitee = ($row[$startcol + 230] !== null) ? (string) $row[$startcol + 230] : null;
            $this->etat_en_attente_validation = ($row[$startcol + 231] !== null) ? (string) $row[$startcol + 231] : null;
            $this->dossier_additif = ($row[$startcol + 232] !== null) ? (string) $row[$startcol + 232] : null;
            $this->type_marche = ($row[$startcol + 233] !== null) ? (int) $row[$startcol + 233] : null;
            $this->type_prestation = ($row[$startcol + 234] !== null) ? (int) $row[$startcol + 234] : null;
            $this->date_modification = ($row[$startcol + 235] !== null) ? (string) $row[$startcol + 235] : null;
            $this->delai_partiel = ($row[$startcol + 236] !== null) ? (string) $row[$startcol + 236] : null;
            $this->datefinlocale = ($row[$startcol + 237] !== null) ? (string) $row[$startcol + 237] : null;
            $this->lieuresidence = ($row[$startcol + 238] !== null) ? (string) $row[$startcol + 238] : null;
            $this->alerte = ($row[$startcol + 239] !== null) ? (string) $row[$startcol + 239] : null;
            $this->doublon = ($row[$startcol + 240] !== null) ? (string) $row[$startcol + 240] : null;
            $this->denomination_adapte = ($row[$startcol + 241] !== null) ? (string) $row[$startcol + 241] : null;
            $this->url_consultation_avis_pub = ($row[$startcol + 242] !== null) ? (string) $row[$startcol + 242] : null;
            $this->doublon_de = ($row[$startcol + 243] !== null) ? (string) $row[$startcol + 243] : null;
            $this->entite_adjudicatrice = ($row[$startcol + 244] !== null) ? (string) $row[$startcol + 244] : null;
            $this->code_operation = ($row[$startcol + 245] !== null) ? (string) $row[$startcol + 245] : null;
            $this->clause_sociale_condition_execution = ($row[$startcol + 246] !== null) ? (string) $row[$startcol + 246] : null;
            $this->clause_sociale_insertion = ($row[$startcol + 247] !== null) ? (string) $row[$startcol + 247] : null;
            $this->clause_sociale_ateliers_proteges = ($row[$startcol + 248] !== null) ? (string) $row[$startcol + 248] : null;
            $this->clause_env_specs_techniques = ($row[$startcol + 249] !== null) ? (string) $row[$startcol + 249] : null;
            $this->clause_env_cond_execution = ($row[$startcol + 250] !== null) ? (string) $row[$startcol + 250] : null;
            $this->clause_env_criteres_select = ($row[$startcol + 251] !== null) ? (string) $row[$startcol + 251] : null;
            $this->id_donnee_complementaire = ($row[$startcol + 252] !== null) ? (int) $row[$startcol + 252] : null;
            $this->donnee_complementaire_obligatoire = ($row[$startcol + 253] !== null) ? (string) $row[$startcol + 253] : null;
            $this->mode_ouverture_reponse = ($row[$startcol + 254] !== null) ? (string) $row[$startcol + 254] : null;
            $this->id_fichier_annulation = ($row[$startcol + 255] !== null) ? (int) $row[$startcol + 255] : null;
            $this->idoperation = ($row[$startcol + 256] !== null) ? (int) $row[$startcol + 256] : null;
            $this->marche_public_simplifie = ($row[$startcol + 257] !== null) ? (string) $row[$startcol + 257] : null;
            $this->infos_blocs_atlas = ($row[$startcol + 258] !== null) ? (string) $row[$startcol + 258] : null;
            $this->date_fin_unix = ($row[$startcol + 259] !== null) ? (string) $row[$startcol + 259] : null;
            $this->date_achevement = ($row[$startcol + 260] !== null) ? (string) $row[$startcol + 260] : null;
            $this->nombre_de_lots = ($row[$startcol + 261] !== null) ? (int) $row[$startcol + 261] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }
            $this->postHydrate($row, $startcol, $rehydrate);

            return $startcol + 262; // 262 = CommonConsultationPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating CommonConsultation object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(CommonConsultationPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = CommonConsultationPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->collCommonAVISs = null;

            $this->collCommonAnnonces = null;

            $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = null;

            $this->collCommonAnnonceBoampsRelatedByConsultationRef = null;

            $this->collCommonAvisPubs = null;

            $this->collCommonCategorieLots = null;

            $this->collCommonComplements = null;

            $this->collCommonConsultationHistoriqueEtats = null;

            $this->collCommonDATEFINs = null;

            $this->collCommonDAConsultations = null;

            $this->collCommonDCEs = null;

            $this->collCommonDocumentExternes = null;

            $this->collCommonHeliosPiecePublicites = null;

            $this->collCommonHeliosPvConsultations = null;

            $this->collCommonHeliosRapportPrefets = null;

            $this->collCommonHeliosTableauArs = null;

            $this->collCommonHeliosTeletransmissions = null;

            $this->collCommonInterneConsultations = null;

            $this->collCommonInterneConsultationSuiviSeuls = null;

            $this->collCommonOffrePapiers = null;

            $this->collCommonOffress = null;

            $this->collCommonPanierEntreprises = null;

            $this->collCommonPiecesDCEsRelatedByRefConsultation = null;

            $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = null;

            $this->collCommonRGs = null;

            $this->collCommonRetraitPapiers = null;

            $this->collCommonSupportPublications = null;

            $this->collCommonTelechargements = null;

            $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = null;

            $this->collCommonTelechargementAnonymesRelatedByConsultationRef = null;

            $this->collCommonConsultationDocumentCfes = null;

            $this->collCommonTCalendriers = null;

            $this->collCommonTParamDossierFormulaires = null;

            $this->collCommonTReponseElecFormulaires = null;

            $this->collCommonVisiteLieuxs = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(CommonConsultationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = CommonConsultationQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(CommonConsultationPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
            } else {
                $ret = $ret && $this->preUpdate($con);
            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                CommonConsultationPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->commonAVISsScheduledForDeletion !== null) {
                if (!$this->commonAVISsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonAVISQuery::create()
                        ->filterByPrimaryKeys($this->commonAVISsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonAVISsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonAVISs !== null) {
                foreach ($this->collCommonAVISs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonAnnoncesScheduledForDeletion !== null) {
                if (!$this->commonAnnoncesScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonAnnonceQuery::create()
                        ->filterByPrimaryKeys($this->commonAnnoncesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonAnnoncesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonAnnonces !== null) {
                foreach ($this->collCommonAnnonces as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion !== null) {
                if (!$this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion as $commonAnnonceBoampRelatedByOrganismeConsultationRef) {
                        // need to save related object because we set the relation to null
                        $commonAnnonceBoampRelatedByOrganismeConsultationRef->save($con);
                    }
                    $this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion = null;
                }
            }

            if ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef !== null) {
                foreach ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion !== null) {
                if (!$this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion as $commonAnnonceBoampRelatedByConsultationRef) {
                        // need to save related object because we set the relation to null
                        $commonAnnonceBoampRelatedByConsultationRef->save($con);
                    }
                    $this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion = null;
                }
            }

            if ($this->collCommonAnnonceBoampsRelatedByConsultationRef !== null) {
                foreach ($this->collCommonAnnonceBoampsRelatedByConsultationRef as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonAvisPubsScheduledForDeletion !== null) {
                if (!$this->commonAvisPubsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonAvisPubQuery::create()
                        ->filterByPrimaryKeys($this->commonAvisPubsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonAvisPubsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonAvisPubs !== null) {
                foreach ($this->collCommonAvisPubs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonCategorieLotsScheduledForDeletion !== null) {
                if (!$this->commonCategorieLotsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonCategorieLotQuery::create()
                        ->filterByPrimaryKeys($this->commonCategorieLotsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonCategorieLotsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonCategorieLots !== null) {
                foreach ($this->collCommonCategorieLots as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonComplementsScheduledForDeletion !== null) {
                if (!$this->commonComplementsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonComplementQuery::create()
                        ->filterByPrimaryKeys($this->commonComplementsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonComplementsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonComplements !== null) {
                foreach ($this->collCommonComplements as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonConsultationHistoriqueEtatsScheduledForDeletion !== null) {
                if (!$this->commonConsultationHistoriqueEtatsScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonConsultationHistoriqueEtatsScheduledForDeletion as $commonConsultationHistoriqueEtat) {
                        // need to save related object because we set the relation to null
                        $commonConsultationHistoriqueEtat->save($con);
                    }
                    $this->commonConsultationHistoriqueEtatsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonConsultationHistoriqueEtats !== null) {
                foreach ($this->collCommonConsultationHistoriqueEtats as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonDATEFINsScheduledForDeletion !== null) {
                if (!$this->commonDATEFINsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonDATEFINQuery::create()
                        ->filterByPrimaryKeys($this->commonDATEFINsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonDATEFINsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonDATEFINs !== null) {
                foreach ($this->collCommonDATEFINs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonDAConsultationsScheduledForDeletion !== null) {
                if (!$this->commonDAConsultationsScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonDAConsultationsScheduledForDeletion as $commonDAConsultation) {
                        // need to save related object because we set the relation to null
                        $commonDAConsultation->save($con);
                    }
                    $this->commonDAConsultationsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonDAConsultations !== null) {
                foreach ($this->collCommonDAConsultations as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonDCEsScheduledForDeletion !== null) {
                if (!$this->commonDCEsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonDCEQuery::create()
                        ->filterByPrimaryKeys($this->commonDCEsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonDCEsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonDCEs !== null) {
                foreach ($this->collCommonDCEs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonDocumentExternesScheduledForDeletion !== null) {
                if (!$this->commonDocumentExternesScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonDocumentExterneQuery::create()
                        ->filterByPrimaryKeys($this->commonDocumentExternesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonDocumentExternesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonDocumentExternes !== null) {
                foreach ($this->collCommonDocumentExternes as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonHeliosPiecePublicitesScheduledForDeletion !== null) {
                if (!$this->commonHeliosPiecePublicitesScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonHeliosPiecePubliciteQuery::create()
                        ->filterByPrimaryKeys($this->commonHeliosPiecePublicitesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonHeliosPiecePublicitesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonHeliosPiecePublicites !== null) {
                foreach ($this->collCommonHeliosPiecePublicites as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonHeliosPvConsultationsScheduledForDeletion !== null) {
                if (!$this->commonHeliosPvConsultationsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonHeliosPvConsultationQuery::create()
                        ->filterByPrimaryKeys($this->commonHeliosPvConsultationsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonHeliosPvConsultationsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonHeliosPvConsultations !== null) {
                foreach ($this->collCommonHeliosPvConsultations as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonHeliosRapportPrefetsScheduledForDeletion !== null) {
                if (!$this->commonHeliosRapportPrefetsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonHeliosRapportPrefetQuery::create()
                        ->filterByPrimaryKeys($this->commonHeliosRapportPrefetsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonHeliosRapportPrefetsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonHeliosRapportPrefets !== null) {
                foreach ($this->collCommonHeliosRapportPrefets as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonHeliosTableauArsScheduledForDeletion !== null) {
                if (!$this->commonHeliosTableauArsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonHeliosTableauArQuery::create()
                        ->filterByPrimaryKeys($this->commonHeliosTableauArsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonHeliosTableauArsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonHeliosTableauArs !== null) {
                foreach ($this->collCommonHeliosTableauArs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonHeliosTeletransmissionsScheduledForDeletion !== null) {
                if (!$this->commonHeliosTeletransmissionsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonHeliosTeletransmissionQuery::create()
                        ->filterByPrimaryKeys($this->commonHeliosTeletransmissionsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonHeliosTeletransmissionsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonHeliosTeletransmissions !== null) {
                foreach ($this->collCommonHeliosTeletransmissions as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonInterneConsultationsScheduledForDeletion !== null) {
                if (!$this->commonInterneConsultationsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonInterneConsultationQuery::create()
                        ->filterByPrimaryKeys($this->commonInterneConsultationsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonInterneConsultationsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonInterneConsultations !== null) {
                foreach ($this->collCommonInterneConsultations as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonInterneConsultationSuiviSeulsScheduledForDeletion !== null) {
                if (!$this->commonInterneConsultationSuiviSeulsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonInterneConsultationSuiviSeulQuery::create()
                        ->filterByPrimaryKeys($this->commonInterneConsultationSuiviSeulsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonInterneConsultationSuiviSeulsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonInterneConsultationSuiviSeuls !== null) {
                foreach ($this->collCommonInterneConsultationSuiviSeuls as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonOffrePapiersScheduledForDeletion !== null) {
                if (!$this->commonOffrePapiersScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonOffrePapierQuery::create()
                        ->filterByPrimaryKeys($this->commonOffrePapiersScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonOffrePapiersScheduledForDeletion = null;
                }
            }

            if ($this->collCommonOffrePapiers !== null) {
                foreach ($this->collCommonOffrePapiers as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonOffressScheduledForDeletion !== null) {
                if (!$this->commonOffressScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonOffresQuery::create()
                        ->filterByPrimaryKeys($this->commonOffressScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonOffressScheduledForDeletion = null;
                }
            }

            if ($this->collCommonOffress !== null) {
                foreach ($this->collCommonOffress as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonPanierEntreprisesScheduledForDeletion !== null) {
                if (!$this->commonPanierEntreprisesScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonPanierEntrepriseQuery::create()
                        ->filterByPrimaryKeys($this->commonPanierEntreprisesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonPanierEntreprisesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonPanierEntreprises !== null) {
                foreach ($this->collCommonPanierEntreprises as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion !== null) {
                if (!$this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonPiecesDCEQuery::create()
                        ->filterByPrimaryKeys($this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion = null;
                }
            }

            if ($this->collCommonPiecesDCEsRelatedByRefConsultation !== null) {
                foreach ($this->collCommonPiecesDCEsRelatedByRefConsultation as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion !== null) {
                if (!$this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonPiecesDCEQuery::create()
                        ->filterByPrimaryKeys($this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion = null;
                }
            }

            if ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation !== null) {
                foreach ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonRGsScheduledForDeletion !== null) {
                if (!$this->commonRGsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonRGQuery::create()
                        ->filterByPrimaryKeys($this->commonRGsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonRGsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonRGs !== null) {
                foreach ($this->collCommonRGs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonRetraitPapiersScheduledForDeletion !== null) {
                if (!$this->commonRetraitPapiersScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonRetraitPapierQuery::create()
                        ->filterByPrimaryKeys($this->commonRetraitPapiersScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonRetraitPapiersScheduledForDeletion = null;
                }
            }

            if ($this->collCommonRetraitPapiers !== null) {
                foreach ($this->collCommonRetraitPapiers as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonSupportPublicationsScheduledForDeletion !== null) {
                if (!$this->commonSupportPublicationsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonSupportPublicationQuery::create()
                        ->filterByPrimaryKeys($this->commonSupportPublicationsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonSupportPublicationsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonSupportPublications !== null) {
                foreach ($this->collCommonSupportPublications as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonTelechargementsScheduledForDeletion !== null) {
                if (!$this->commonTelechargementsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonTelechargementQuery::create()
                        ->filterByPrimaryKeys($this->commonTelechargementsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonTelechargementsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonTelechargements !== null) {
                foreach ($this->collCommonTelechargements as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion !== null) {
                if (!$this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonTelechargementAnonymeQuery::create()
                        ->filterByPrimaryKeys($this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion = null;
                }
            }

            if ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef !== null) {
                foreach ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion !== null) {
                if (!$this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion as $commonTelechargementAnonymeRelatedByConsultationRef) {
                        // need to save related object because we set the relation to null
                        $commonTelechargementAnonymeRelatedByConsultationRef->save($con);
                    }
                    $this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion = null;
                }
            }

            if ($this->collCommonTelechargementAnonymesRelatedByConsultationRef !== null) {
                foreach ($this->collCommonTelechargementAnonymesRelatedByConsultationRef as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonConsultationDocumentCfesScheduledForDeletion !== null) {
                if (!$this->commonConsultationDocumentCfesScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonConsultationDocumentCfeQuery::create()
                        ->filterByPrimaryKeys($this->commonConsultationDocumentCfesScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonConsultationDocumentCfesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonConsultationDocumentCfes !== null) {
                foreach ($this->collCommonConsultationDocumentCfes as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonTCalendriersScheduledForDeletion !== null) {
                if (!$this->commonTCalendriersScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonTCalendrierQuery::create()
                        ->filterByPrimaryKeys($this->commonTCalendriersScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonTCalendriersScheduledForDeletion = null;
                }
            }

            if ($this->collCommonTCalendriers !== null) {
                foreach ($this->collCommonTCalendriers as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonTParamDossierFormulairesScheduledForDeletion !== null) {
                if (!$this->commonTParamDossierFormulairesScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonTParamDossierFormulairesScheduledForDeletion as $commonTParamDossierFormulaire) {
                        // need to save related object because we set the relation to null
                        $commonTParamDossierFormulaire->save($con);
                    }
                    $this->commonTParamDossierFormulairesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonTParamDossierFormulaires !== null) {
                foreach ($this->collCommonTParamDossierFormulaires as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonTReponseElecFormulairesScheduledForDeletion !== null) {
                if (!$this->commonTReponseElecFormulairesScheduledForDeletion->isEmpty()) {
                    foreach ($this->commonTReponseElecFormulairesScheduledForDeletion as $commonTReponseElecFormulaire) {
                        // need to save related object because we set the relation to null
                        $commonTReponseElecFormulaire->save($con);
                    }
                    $this->commonTReponseElecFormulairesScheduledForDeletion = null;
                }
            }

            if ($this->collCommonTReponseElecFormulaires !== null) {
                foreach ($this->collCommonTReponseElecFormulaires as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->commonVisiteLieuxsScheduledForDeletion !== null) {
                if (!$this->commonVisiteLieuxsScheduledForDeletion->isEmpty()) {
                    //the foreign key is flagged as `CASCADE`, so we delete the items
                    CommonVisiteLieuxQuery::create()
                        ->filterByPrimaryKeys($this->commonVisiteLieuxsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->commonVisiteLieuxsScheduledForDeletion = null;
                }
            }

            if ($this->collCommonVisiteLieuxs !== null) {
                foreach ($this->collCommonVisiteLieuxs as $referrerFK) {
                    if (!$referrerFK->isDeleted() && ($referrerFK->isNew() || $referrerFK->isModified())) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = CommonConsultationPeer::REFERENCE;
        if (null !== $this->reference) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . CommonConsultationPeer::REFERENCE . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE)) {
            $modifiedColumns[':p' . $index++]  = '`reference`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ORGANISME)) {
            $modifiedColumns[':p' . $index++]  = '`organisme`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE_UTILISATEUR)) {
            $modifiedColumns[':p' . $index++]  = '`reference_utilisateur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CATEGORIE)) {
            $modifiedColumns[':p' . $index++]  = '`categorie`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TITRE)) {
            $modifiedColumns[':p' . $index++]  = '`titre`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::RESUME)) {
            $modifiedColumns[':p' . $index++]  = '`resume`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATEDEBUT)) {
            $modifiedColumns[':p' . $index++]  = '`datedebut`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATEFIN)) {
            $modifiedColumns[':p' . $index++]  = '`datefin`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATEVALIDATION)) {
            $modifiedColumns[':p' . $index++]  = '`datevalidation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_PROCEDURE)) {
            $modifiedColumns[':p' . $index++]  = '`type_procedure`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CODE_PROCEDURE)) {
            $modifiedColumns[':p' . $index++]  = '`code_procedure`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REPONSE_ELECTRONIQUE)) {
            $modifiedColumns[':p' . $index++]  = '`reponse_electronique`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::NUM_PROCEDURE)) {
            $modifiedColumns[':p' . $index++]  = '`num_procedure`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_PROCEDURE)) {
            $modifiedColumns[':p' . $index++]  = '`id_type_procedure`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_AVIS)) {
            $modifiedColumns[':p' . $index++]  = '`id_type_avis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_EXECUTION)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_execution`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_MISE_EN_LIGNE)) {
            $modifiedColumns[':p' . $index++]  = '`type_mise_en_ligne`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATEMISEENLIGNE)) {
            $modifiedColumns[':p' . $index++]  = '`datemiseenligne`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::IS_TIERS_AVIS)) {
            $modifiedColumns[':p' . $index++]  = '`is_tiers_avis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::URL)) {
            $modifiedColumns[':p' . $index++]  = '`url`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATEFIN_SAD)) {
            $modifiedColumns[':p' . $index++]  = '`datefin_sad`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::IS_SYS_ACQ_DYN)) {
            $modifiedColumns[':p' . $index++]  = '`is_sys_acq_dyn`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE_CONSULTATION_INIT)) {
            $modifiedColumns[':p' . $index++]  = '`reference_consultation_init`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::SIGNATURE_OFFRE)) {
            $modifiedColumns[':p' . $index++]  = '`signature_offre`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_VALIDATION)) {
            $modifiedColumns[':p' . $index++]  = '`id_type_validation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_APPROBATION)) {
            $modifiedColumns[':p' . $index++]  = '`etat_approbation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_VALIDATION)) {
            $modifiedColumns[':p' . $index++]  = '`etat_validation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CHAMP_SUPP_INVISIBLE)) {
            $modifiedColumns[':p' . $index++]  = '`champ_supp_invisible`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CODE_CPV_1)) {
            $modifiedColumns[':p' . $index++]  = '`code_cpv_1`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CODE_CPV_2)) {
            $modifiedColumns[':p' . $index++]  = '`code_cpv_2`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PUBLICATION_EUROPE)) {
            $modifiedColumns[':p' . $index++]  = '`publication_europe`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_PUBLICATION)) {
            $modifiedColumns[':p' . $index++]  = '`etat_publication`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::POURSUIVRE_AFFICHAGE)) {
            $modifiedColumns[':p' . $index++]  = '`poursuivre_affichage`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::NBR_TELECHARGEMENT_DCE)) {
            $modifiedColumns[':p' . $index++]  = '`nbr_telechargement_dce`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`service_id`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_ASSOCIE_ID)) {
            $modifiedColumns[':p' . $index++]  = '`service_associe_id`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_FIN_AFFICHAGE)) {
            $modifiedColumns[':p' . $index++]  = '`date_fin_affichage`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DEPOUILLABLE_PHASE_CONSULTATION)) {
            $modifiedColumns[':p' . $index++]  = '`depouillable_phase_consultation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_TRANSVERSE)) {
            $modifiedColumns[':p' . $index++]  = '`consultation_transverse`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_ACHAT_PUBLIQUE)) {
            $modifiedColumns[':p' . $index++]  = '`consultation_achat_publique`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::URL_CONSULTATION_ACHAT_PUBLIQUE)) {
            $modifiedColumns[':p' . $index++]  = '`url_consultation_achat_publique`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PARTIAL_DCE_DOWNLOAD)) {
            $modifiedColumns[':p' . $index++]  = '`partial_dce_download`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TIRAGE_PLAN)) {
            $modifiedColumns[':p' . $index++]  = '`tirage_plan`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TIREUR_PLAN)) {
            $modifiedColumns[':p' . $index++]  = '`tireur_plan`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_MISE_EN_LIGNE_CALCULE)) {
            $modifiedColumns[':p' . $index++]  = '`date_mise_en_ligne_calcule`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_EN)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_ES)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::NBR_REPONSE)) {
            $modifiedColumns[':p' . $index++]  = '`nbr_reponse`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_PROCEDURE_ORG)) {
            $modifiedColumns[':p' . $index++]  = '`id_type_procedure_org`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ORGANISME_CONSULTATION_INIT)) {
            $modifiedColumns[':p' . $index++]  = '`organisme_consultation_init`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TIRAGE_DESCRIPTIF)) {
            $modifiedColumns[':p' . $index++]  = '`tirage_descriptif`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_VALIDATION_INTERMEDIAIRE)) {
            $modifiedColumns[':p' . $index++]  = '`date_validation_intermediaire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_FR)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TR_ACCESSIBILITE)) {
            $modifiedColumns[':p' . $index++]  = '`id_tr_accessibilite`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_DU)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_SU)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_AR)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ALLOTI)) {
            $modifiedColumns[':p' . $index++]  = '`alloti`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::NUMERO_PHASE)) {
            $modifiedColumns[':p' . $index++]  = '`numero_phase`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_EXTERNE)) {
            $modifiedColumns[':p' . $index++]  = '`consultation_externe`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::URL_CONSULTATION_EXTERNE)) {
            $modifiedColumns[':p' . $index++]  = '`url_consultation_externe`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ORG_DENOMINATION)) {
            $modifiedColumns[':p' . $index++]  = '`org_denomination`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DOMAINES_ACTIVITES)) {
            $modifiedColumns[':p' . $index++]  = '`domaines_activites`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_AFFAIRE)) {
            $modifiedColumns[':p' . $index++]  = '`id_affaire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CAUTION_PROVISOIRE)) {
            $modifiedColumns[':p' . $index++]  = '`caution_provisoire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PRIX_AQUISITION_PLANS)) {
            $modifiedColumns[':p' . $index++]  = '`prix_aquisition_plans`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::QUALIFICATION)) {
            $modifiedColumns[':p' . $index++]  = '`qualification`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::AGREMENTS)) {
            $modifiedColumns[':p' . $index++]  = '`agrements`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_LIMITE_ECHANTILLION)) {
            $modifiedColumns[':p' . $index++]  = '`date_limite_echantillion`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_REUNION)) {
            $modifiedColumns[':p' . $index++]  = '`date_reunion`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::VARIANTES)) {
            $modifiedColumns[':p' . $index++]  = '`variantes`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_AR)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_AR)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_AR)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_FR)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_EN)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_ES)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_SU)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_DU)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_AR)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_FR)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_EN)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_ES)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_SU)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_DU)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_AR)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_FR)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_EN)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_ES)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_SU)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_DU)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_AR)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_RPA)) {
            $modifiedColumns[':p' . $index++]  = '`id_rpa`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_FR)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_EN)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_ES)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_SU)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_DU)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_AR)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ECHANTILLON)) {
            $modifiedColumns[':p' . $index++]  = '`echantillon`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REUNION)) {
            $modifiedColumns[':p' . $index++]  = '`reunion`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::VISITES_LIEUX)) {
            $modifiedColumns[':p' . $index++]  = '`visites_lieux`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::VARIANTE_CALCULE)) {
            $modifiedColumns[':p' . $index++]  = '`variante_calcule`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_FR)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_EN)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_ES)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_SU)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_DU)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_FR)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_EN)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_ES)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_SU)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_DU)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_FR)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_EN)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_ES)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_SU)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_DU)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_FR)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_EN)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_ES)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_SU)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_DU)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_AR)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_FR)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_EN)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_ES)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_SU)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_DU)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_AR)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::MODE_PASSATION)) {
            $modifiedColumns[':p' . $index++]  = '`mode_passation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_ANNULEE)) {
            $modifiedColumns[':p' . $index++]  = '`consultation_annulee`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::COMPTE_BOAMP_ASSOCIE)) {
            $modifiedColumns[':p' . $index++]  = '`Compte_Boamp_Associe`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_IT)) {
            $modifiedColumns[':p' . $index++]  = '`accessibilite_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_IT)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_depot_offres_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_IT)) {
            $modifiedColumns[':p' . $index++]  = '`lieu_ouverture_plis_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_IT)) {
            $modifiedColumns[':p' . $index++]  = '`adresse_retrais_dossiers_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_IT)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_admin_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_IT)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_tech_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_IT)) {
            $modifiedColumns[':p' . $index++]  = '`pieces_dossier_additif_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_IT)) {
            $modifiedColumns[':p' . $index++]  = '`detail_consultation_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_IT)) {
            $modifiedColumns[':p' . $index++]  = '`add_echantillion_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_IT)) {
            $modifiedColumns[':p' . $index++]  = '`add_reunion_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CODES_NUTS)) {
            $modifiedColumns[':p' . $index++]  = '`codes_nuts`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE)) {
            $modifiedColumns[':p' . $index++]  = '`intitule`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TR_INTITULE)) {
            $modifiedColumns[':p' . $index++]  = '`id_tr_intitule`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET)) {
            $modifiedColumns[':p' . $index++]  = '`objet`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_TR_OBJET)) {
            $modifiedColumns[':p' . $index++]  = '`id_tr_objet`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_DECISION)) {
            $modifiedColumns[':p' . $index++]  = '`date_decision`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_ACCES)) {
            $modifiedColumns[':p' . $index++]  = '`type_acces`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::AUTORISER_REPONSE_ELECTRONIQUE)) {
            $modifiedColumns[':p' . $index++]  = '`autoriser_reponse_electronique`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REGLE_MISE_EN_LIGNE)) {
            $modifiedColumns[':p' . $index++]  = '`regle_mise_en_ligne`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_REGLE_VALIDATION)) {
            $modifiedColumns[':p' . $index++]  = '`id_regle_validation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_FR)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_EN)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_ES)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_SU)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_DU)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_AR)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_IT)) {
            $modifiedColumns[':p' . $index++]  = '`intitule_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_FR)) {
            $modifiedColumns[':p' . $index++]  = '`objet_fr`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_EN)) {
            $modifiedColumns[':p' . $index++]  = '`objet_en`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_ES)) {
            $modifiedColumns[':p' . $index++]  = '`objet_es`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_SU)) {
            $modifiedColumns[':p' . $index++]  = '`objet_su`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_DU)) {
            $modifiedColumns[':p' . $index++]  = '`objet_du`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_CZ)) {
            $modifiedColumns[':p' . $index++]  = '`objet_cz`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_AR)) {
            $modifiedColumns[':p' . $index++]  = '`objet_ar`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_IT)) {
            $modifiedColumns[':p' . $index++]  = '`objet_it`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE)) {
            $modifiedColumns[':p' . $index++]  = '`clause_sociale`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENVIRONNEMENTALE)) {
            $modifiedColumns[':p' . $index++]  = '`clause_environnementale`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REPONSE_OBLIGATOIRE)) {
            $modifiedColumns[':p' . $index++]  = '`reponse_obligatoire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::AUTORISER_PUBLICITE)) {
            $modifiedColumns[':p' . $index++]  = '`autoriser_publicite`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_ENVOI)) {
            $modifiedColumns[':p' . $index++]  = '`type_envoi`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CHIFFREMENT_OFFRE)) {
            $modifiedColumns[':p' . $index++]  = '`chiffrement_offre`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ENV_CANDIDATURE)) {
            $modifiedColumns[':p' . $index++]  = '`env_candidature`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ENV_OFFRE)) {
            $modifiedColumns[':p' . $index++]  = '`env_offre`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ENV_ANONYMAT)) {
            $modifiedColumns[':p' . $index++]  = '`env_anonymat`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_ETAT_CONSULTATION)) {
            $modifiedColumns[':p' . $index++]  = '`id_etat_consultation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE_CONNECTEUR)) {
            $modifiedColumns[':p' . $index++]  = '`reference_connecteur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CONS_STATUT)) {
            $modifiedColumns[':p' . $index++]  = '`cons_statut`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_APPROBATEUR)) {
            $modifiedColumns[':p' . $index++]  = '`id_approbateur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_VALIDEUR)) {
            $modifiedColumns[':p' . $index++]  = '`id_valideur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_VALIDATION)) {
            $modifiedColumns[':p' . $index++]  = '`service_validation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_CREATEUR)) {
            $modifiedColumns[':p' . $index++]  = '`id_createur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::NOM_CREATEUR)) {
            $modifiedColumns[':p' . $index++]  = '`nom_createur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PRENOM_CREATEUR)) {
            $modifiedColumns[':p' . $index++]  = '`prenom_createur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::SIGNATURE_ACTE_ENGAGEMENT)) {
            $modifiedColumns[':p' . $index++]  = '`signature_acte_engagement`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ARCHIVEMETADESCRIPTION)) {
            $modifiedColumns[':p' . $index++]  = '`archiveMetaDescription`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ARCHIVEMETAMOTSCLEF)) {
            $modifiedColumns[':p' . $index++]  = '`archiveMetaMotsClef`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ARCHIVEIDBLOBZIP)) {
            $modifiedColumns[':p' . $index++]  = '`archiveIdBlobZip`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DECISION_PARTIELLE)) {
            $modifiedColumns[':p' . $index++]  = '`decision_partielle`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_A_RENSEIGNER)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_a_renseigner`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_MARCHE)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_attribution_marche`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_DECLARATION_SANS_SUITE)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_declaration_sans_suite`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_DECLARATION_INFRUCTUEUX)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_declaration_infructueux`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_SELECTION_ENTREPRISE)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_selection_entreprise`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_ACCORD_CADRE)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_attribution_accord_cadre`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_ADMISSION_SAD)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_admission_sad`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_AUTRE)) {
            $modifiedColumns[':p' . $index++]  = '`type_decision_autre`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_ARCHIVEUR)) {
            $modifiedColumns[':p' . $index++]  = '`id_archiveur`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PRENOM_NOM_AGENT_TELECHARGEMENT_PLIS)) {
            $modifiedColumns[':p' . $index++]  = '`prenom_nom_agent_telechargement_plis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_AGENT_TELECHARGEMENT_PLIS)) {
            $modifiedColumns[':p' . $index++]  = '`id_agent_telechargement_plis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::PATH_TELECHARGEMENT_PLIS)) {
            $modifiedColumns[':p' . $index++]  = '`path_telechargement_plis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_TELECHARGEMENT_PLIS)) {
            $modifiedColumns[':p' . $index++]  = '`date_telechargement_plis`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_VALIDATION_INTERMEDIAIRE)) {
            $modifiedColumns[':p' . $index++]  = '`service_validation_intermediaire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ENV_OFFRE_TECHNIQUE)) {
            $modifiedColumns[':p' . $index++]  = '`env_offre_technique`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::REF_ORG_PARTENAIRE)) {
            $modifiedColumns[':p' . $index++]  = '`ref_org_partenaire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_ARCHIVAGE)) {
            $modifiedColumns[':p' . $index++]  = '`date_archivage`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_DECISION_ANNULATION)) {
            $modifiedColumns[':p' . $index++]  = '`date_decision_annulation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::COMMENTAIRE_ANNULATION)) {
            $modifiedColumns[':p' . $index++]  = '`commentaire_annulation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_MISE_EN_LIGNE_SOUHAITEE)) {
            $modifiedColumns[':p' . $index++]  = '`date_mise_en_ligne_souhaitee`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_EN_ATTENTE_VALIDATION)) {
            $modifiedColumns[':p' . $index++]  = '`etat_en_attente_validation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DOSSIER_ADDITIF)) {
            $modifiedColumns[':p' . $index++]  = '`dossier_additif`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_MARCHE)) {
            $modifiedColumns[':p' . $index++]  = '`type_marche`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_PRESTATION)) {
            $modifiedColumns[':p' . $index++]  = '`type_prestation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_MODIFICATION)) {
            $modifiedColumns[':p' . $index++]  = '`date_modification`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DELAI_PARTIEL)) {
            $modifiedColumns[':p' . $index++]  = '`delai_partiel`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATEFINLOCALE)) {
            $modifiedColumns[':p' . $index++]  = '`dateFinLocale`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::LIEURESIDENCE)) {
            $modifiedColumns[':p' . $index++]  = '`lieuResidence`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ALERTE)) {
            $modifiedColumns[':p' . $index++]  = '`alerte`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DOUBLON)) {
            $modifiedColumns[':p' . $index++]  = '`doublon`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DENOMINATION_ADAPTE)) {
            $modifiedColumns[':p' . $index++]  = '`denomination_adapte`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::URL_CONSULTATION_AVIS_PUB)) {
            $modifiedColumns[':p' . $index++]  = '`url_consultation_avis_pub`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DOUBLON_DE)) {
            $modifiedColumns[':p' . $index++]  = '`doublon_de`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ENTITE_ADJUDICATRICE)) {
            $modifiedColumns[':p' . $index++]  = '`entite_adjudicatrice`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CODE_OPERATION)) {
            $modifiedColumns[':p' . $index++]  = '`code_operation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE_CONDITION_EXECUTION)) {
            $modifiedColumns[':p' . $index++]  = '`clause_sociale_condition_execution`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE_INSERTION)) {
            $modifiedColumns[':p' . $index++]  = '`clause_sociale_insertion`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE_ATELIERS_PROTEGES)) {
            $modifiedColumns[':p' . $index++]  = '`clause_sociale_ateliers_proteges`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENV_SPECS_TECHNIQUES)) {
            $modifiedColumns[':p' . $index++]  = '`clause_env_specs_techniques`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENV_COND_EXECUTION)) {
            $modifiedColumns[':p' . $index++]  = '`clause_env_cond_execution`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENV_CRITERES_SELECT)) {
            $modifiedColumns[':p' . $index++]  = '`clause_env_criteres_select`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_DONNEE_COMPLEMENTAIRE)) {
            $modifiedColumns[':p' . $index++]  = '`id_donnee_complementaire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DONNEE_COMPLEMENTAIRE_OBLIGATOIRE)) {
            $modifiedColumns[':p' . $index++]  = '`donnee_complementaire_obligatoire`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::MODE_OUVERTURE_REPONSE)) {
            $modifiedColumns[':p' . $index++]  = '`mode_ouverture_reponse`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::ID_FICHIER_ANNULATION)) {
            $modifiedColumns[':p' . $index++]  = '`id_fichier_annulation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::IDOPERATION)) {
            $modifiedColumns[':p' . $index++]  = '`idOperation`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::MARCHE_PUBLIC_SIMPLIFIE)) {
            $modifiedColumns[':p' . $index++]  = '`marche_public_simplifie`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::INFOS_BLOCS_ATLAS)) {
            $modifiedColumns[':p' . $index++]  = '`infos_blocs_atlas`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_FIN_UNIX)) {
            $modifiedColumns[':p' . $index++]  = '`DATE_FIN_UNIX`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::DATE_ACHEVEMENT)) {
            $modifiedColumns[':p' . $index++]  = '`date_achevement`';
        }
        if ($this->isColumnModified(CommonConsultationPeer::NOMBRE_DE_LOTS)) {
            $modifiedColumns[':p' . $index++]  = '`nombre_de_lots`';
        }

        $sql = sprintf(
            'INSERT INTO `consultation` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`reference`':						
                        $stmt->bindValue($identifier, $this->reference, PDO::PARAM_INT);
                        break;
                    case '`organisme`':						
                        $stmt->bindValue($identifier, $this->organisme, PDO::PARAM_STR);
                        break;
                    case '`reference_utilisateur`':						
                        $stmt->bindValue($identifier, $this->reference_utilisateur, PDO::PARAM_STR);
                        break;
                    case '`categorie`':						
                        $stmt->bindValue($identifier, $this->categorie, PDO::PARAM_STR);
                        break;
                    case '`titre`':						
                        $stmt->bindValue($identifier, $this->titre, PDO::PARAM_STR);
                        break;
                    case '`resume`':						
                        $stmt->bindValue($identifier, $this->resume, PDO::PARAM_STR);
                        break;
                    case '`datedebut`':						
                        $stmt->bindValue($identifier, $this->datedebut, PDO::PARAM_STR);
                        break;
                    case '`datefin`':						
                        $stmt->bindValue($identifier, $this->datefin, PDO::PARAM_STR);
                        break;
                    case '`datevalidation`':						
                        $stmt->bindValue($identifier, $this->datevalidation, PDO::PARAM_STR);
                        break;
                    case '`type_procedure`':						
                        $stmt->bindValue($identifier, $this->type_procedure, PDO::PARAM_STR);
                        break;
                    case '`code_procedure`':						
                        $stmt->bindValue($identifier, $this->code_procedure, PDO::PARAM_STR);
                        break;
                    case '`reponse_electronique`':						
                        $stmt->bindValue($identifier, $this->reponse_electronique, PDO::PARAM_STR);
                        break;
                    case '`num_procedure`':						
                        $stmt->bindValue($identifier, $this->num_procedure, PDO::PARAM_INT);
                        break;
                    case '`id_type_procedure`':						
                        $stmt->bindValue($identifier, $this->id_type_procedure, PDO::PARAM_INT);
                        break;
                    case '`id_type_avis`':						
                        $stmt->bindValue($identifier, $this->id_type_avis, PDO::PARAM_INT);
                        break;
                    case '`lieu_execution`':						
                        $stmt->bindValue($identifier, $this->lieu_execution, PDO::PARAM_STR);
                        break;
                    case '`type_mise_en_ligne`':						
                        $stmt->bindValue($identifier, $this->type_mise_en_ligne, PDO::PARAM_INT);
                        break;
                    case '`datemiseenligne`':						
                        $stmt->bindValue($identifier, $this->datemiseenligne, PDO::PARAM_STR);
                        break;
                    case '`is_tiers_avis`':						
                        $stmt->bindValue($identifier, $this->is_tiers_avis, PDO::PARAM_STR);
                        break;
                    case '`url`':						
                        $stmt->bindValue($identifier, $this->url, PDO::PARAM_STR);
                        break;
                    case '`datefin_sad`':						
                        $stmt->bindValue($identifier, $this->datefin_sad, PDO::PARAM_STR);
                        break;
                    case '`is_sys_acq_dyn`':						
                        $stmt->bindValue($identifier, $this->is_sys_acq_dyn, PDO::PARAM_INT);
                        break;
                    case '`reference_consultation_init`':						
                        $stmt->bindValue($identifier, $this->reference_consultation_init, PDO::PARAM_STR);
                        break;
                    case '`signature_offre`':						
                        $stmt->bindValue($identifier, $this->signature_offre, PDO::PARAM_STR);
                        break;
                    case '`id_type_validation`':						
                        $stmt->bindValue($identifier, $this->id_type_validation, PDO::PARAM_INT);
                        break;
                    case '`etat_approbation`':						
                        $stmt->bindValue($identifier, $this->etat_approbation, PDO::PARAM_STR);
                        break;
                    case '`etat_validation`':						
                        $stmt->bindValue($identifier, $this->etat_validation, PDO::PARAM_STR);
                        break;
                    case '`champ_supp_invisible`':						
                        $stmt->bindValue($identifier, $this->champ_supp_invisible, PDO::PARAM_STR);
                        break;
                    case '`code_cpv_1`':						
                        $stmt->bindValue($identifier, $this->code_cpv_1, PDO::PARAM_STR);
                        break;
                    case '`code_cpv_2`':						
                        $stmt->bindValue($identifier, $this->code_cpv_2, PDO::PARAM_STR);
                        break;
                    case '`publication_europe`':						
                        $stmt->bindValue($identifier, $this->publication_europe, PDO::PARAM_STR);
                        break;
                    case '`etat_publication`':						
                        $stmt->bindValue($identifier, $this->etat_publication, PDO::PARAM_INT);
                        break;
                    case '`poursuivre_affichage`':						
                        $stmt->bindValue($identifier, $this->poursuivre_affichage, PDO::PARAM_INT);
                        break;
                    case '`nbr_telechargement_dce`':						
                        $stmt->bindValue($identifier, $this->nbr_telechargement_dce, PDO::PARAM_INT);
                        break;
                    case '`service_id`':						
                        $stmt->bindValue($identifier, $this->service_id, PDO::PARAM_INT);
                        break;
                    case '`service_associe_id`':						
                        $stmt->bindValue($identifier, $this->service_associe_id, PDO::PARAM_INT);
                        break;
                    case '`detail_consultation`':						
                        $stmt->bindValue($identifier, $this->detail_consultation, PDO::PARAM_STR);
                        break;
                    case '`date_fin_affichage`':						
                        $stmt->bindValue($identifier, $this->date_fin_affichage, PDO::PARAM_STR);
                        break;
                    case '`depouillable_phase_consultation`':						
                        $stmt->bindValue($identifier, $this->depouillable_phase_consultation, PDO::PARAM_STR);
                        break;
                    case '`consultation_transverse`':						
                        $stmt->bindValue($identifier, $this->consultation_transverse, PDO::PARAM_STR);
                        break;
                    case '`consultation_achat_publique`':						
                        $stmt->bindValue($identifier, $this->consultation_achat_publique, PDO::PARAM_STR);
                        break;
                    case '`url_consultation_achat_publique`':						
                        $stmt->bindValue($identifier, $this->url_consultation_achat_publique, PDO::PARAM_STR);
                        break;
                    case '`partial_dce_download`':						
                        $stmt->bindValue($identifier, $this->partial_dce_download, PDO::PARAM_STR);
                        break;
                    case '`tirage_plan`':						
                        $stmt->bindValue($identifier, $this->tirage_plan, PDO::PARAM_INT);
                        break;
                    case '`tireur_plan`':						
                        $stmt->bindValue($identifier, $this->tireur_plan, PDO::PARAM_INT);
                        break;
                    case '`date_mise_en_ligne_calcule`':						
                        $stmt->bindValue($identifier, $this->date_mise_en_ligne_calcule, PDO::PARAM_STR);
                        break;
                    case '`accessibilite_en`':						
                        $stmt->bindValue($identifier, $this->accessibilite_en, PDO::PARAM_STR);
                        break;
                    case '`accessibilite_es`':						
                        $stmt->bindValue($identifier, $this->accessibilite_es, PDO::PARAM_STR);
                        break;
                    case '`nbr_reponse`':						
                        $stmt->bindValue($identifier, $this->nbr_reponse, PDO::PARAM_INT);
                        break;
                    case '`id_type_procedure_org`':						
                        $stmt->bindValue($identifier, $this->id_type_procedure_org, PDO::PARAM_INT);
                        break;
                    case '`organisme_consultation_init`':						
                        $stmt->bindValue($identifier, $this->organisme_consultation_init, PDO::PARAM_STR);
                        break;
                    case '`tirage_descriptif`':						
                        $stmt->bindValue($identifier, $this->tirage_descriptif, PDO::PARAM_STR);
                        break;
                    case '`date_validation_intermediaire`':						
                        $stmt->bindValue($identifier, $this->date_validation_intermediaire, PDO::PARAM_STR);
                        break;
                    case '`accessibilite_fr`':						
                        $stmt->bindValue($identifier, $this->accessibilite_fr, PDO::PARAM_STR);
                        break;
                    case '`id_tr_accessibilite`':						
                        $stmt->bindValue($identifier, $this->id_tr_accessibilite, PDO::PARAM_INT);
                        break;
                    case '`accessibilite_cz`':						
                        $stmt->bindValue($identifier, $this->accessibilite_cz, PDO::PARAM_STR);
                        break;
                    case '`accessibilite_du`':						
                        $stmt->bindValue($identifier, $this->accessibilite_du, PDO::PARAM_STR);
                        break;
                    case '`accessibilite_su`':						
                        $stmt->bindValue($identifier, $this->accessibilite_su, PDO::PARAM_STR);
                        break;
                    case '`accessibilite_ar`':						
                        $stmt->bindValue($identifier, $this->accessibilite_ar, PDO::PARAM_STR);
                        break;
                    case '`alloti`':						
                        $stmt->bindValue($identifier, $this->alloti, PDO::PARAM_STR);
                        break;
                    case '`numero_phase`':						
                        $stmt->bindValue($identifier, $this->numero_phase, PDO::PARAM_INT);
                        break;
                    case '`consultation_externe`':						
                        $stmt->bindValue($identifier, $this->consultation_externe, PDO::PARAM_STR);
                        break;
                    case '`url_consultation_externe`':						
                        $stmt->bindValue($identifier, $this->url_consultation_externe, PDO::PARAM_STR);
                        break;
                    case '`org_denomination`':						
                        $stmt->bindValue($identifier, $this->org_denomination, PDO::PARAM_STR);
                        break;
                    case '`domaines_activites`':						
                        $stmt->bindValue($identifier, $this->domaines_activites, PDO::PARAM_STR);
                        break;
                    case '`id_affaire`':						
                        $stmt->bindValue($identifier, $this->id_affaire, PDO::PARAM_INT);
                        break;
                    case '`adresse_retrais_dossiers`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers, PDO::PARAM_STR);
                        break;
                    case '`caution_provisoire`':						
                        $stmt->bindValue($identifier, $this->caution_provisoire, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis, PDO::PARAM_STR);
                        break;
                    case '`prix_aquisition_plans`':						
                        $stmt->bindValue($identifier, $this->prix_aquisition_plans, PDO::PARAM_STR);
                        break;
                    case '`qualification`':						
                        $stmt->bindValue($identifier, $this->qualification, PDO::PARAM_STR);
                        break;
                    case '`agrements`':						
                        $stmt->bindValue($identifier, $this->agrements, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion`':						
                        $stmt->bindValue($identifier, $this->add_echantillion, PDO::PARAM_STR);
                        break;
                    case '`date_limite_echantillion`':						
                        $stmt->bindValue($identifier, $this->date_limite_echantillion, PDO::PARAM_STR);
                        break;
                    case '`add_reunion`':						
                        $stmt->bindValue($identifier, $this->add_reunion, PDO::PARAM_STR);
                        break;
                    case '`date_reunion`':						
                        $stmt->bindValue($identifier, $this->date_reunion, PDO::PARAM_STR);
                        break;
                    case '`variantes`':						
                        $stmt->bindValue($identifier, $this->variantes, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_ar`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_ar, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_ar`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_ar, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_ar`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_ar, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_fr`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_fr, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_en`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_en, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_es`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_es, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_su`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_su, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_du`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_du, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_cz`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_cz, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_ar`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_ar, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_fr`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_fr, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_en`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_en, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_es`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_es, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_su`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_su, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_du`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_du, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_cz`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_cz, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_ar`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_ar, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_fr`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_fr, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_en`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_en, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_es`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_es, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_su`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_su, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_du`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_du, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_cz`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_cz, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_ar`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_ar, PDO::PARAM_STR);
                        break;
                    case '`id_rpa`':						
                        $stmt->bindValue($identifier, $this->id_rpa, PDO::PARAM_INT);
                        break;
                    case '`detail_consultation_fr`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_fr, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_en`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_en, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_es`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_es, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_su`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_su, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_du`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_du, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_cz`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_cz, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_ar`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_ar, PDO::PARAM_STR);
                        break;
                    case '`echantillon`':						
                        $stmt->bindValue($identifier, $this->echantillon, PDO::PARAM_STR);
                        break;
                    case '`reunion`':						
                        $stmt->bindValue($identifier, $this->reunion, PDO::PARAM_STR);
                        break;
                    case '`visites_lieux`':						
                        $stmt->bindValue($identifier, $this->visites_lieux, PDO::PARAM_STR);
                        break;
                    case '`variante_calcule`':						
                        $stmt->bindValue($identifier, $this->variante_calcule, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_fr`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_fr, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_en`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_en, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_es`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_es, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_su`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_su, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_du`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_du, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_cz`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_cz, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_fr`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_fr, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_en`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_en, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_es`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_es, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_su`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_su, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_du`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_du, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_cz`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_cz, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_fr`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_fr, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_en`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_en, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_es`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_es, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_su`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_su, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_du`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_du, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_cz`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_cz, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_fr`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_fr, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_en`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_en, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_es`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_es, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_su`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_su, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_du`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_du, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_cz`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_cz, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_ar`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_ar, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_fr`':						
                        $stmt->bindValue($identifier, $this->add_reunion_fr, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_en`':						
                        $stmt->bindValue($identifier, $this->add_reunion_en, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_es`':						
                        $stmt->bindValue($identifier, $this->add_reunion_es, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_su`':						
                        $stmt->bindValue($identifier, $this->add_reunion_su, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_du`':						
                        $stmt->bindValue($identifier, $this->add_reunion_du, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_cz`':						
                        $stmt->bindValue($identifier, $this->add_reunion_cz, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_ar`':						
                        $stmt->bindValue($identifier, $this->add_reunion_ar, PDO::PARAM_STR);
                        break;
                    case '`mode_passation`':						
                        $stmt->bindValue($identifier, $this->mode_passation, PDO::PARAM_STR);
                        break;
                    case '`consultation_annulee`':						
                        $stmt->bindValue($identifier, $this->consultation_annulee, PDO::PARAM_STR);
                        break;
                    case '`Compte_Boamp_Associe`':						
                        $stmt->bindValue($identifier, $this->compte_boamp_associe, PDO::PARAM_INT);
                        break;
                    case '`accessibilite_it`':						
                        $stmt->bindValue($identifier, $this->accessibilite_it, PDO::PARAM_STR);
                        break;
                    case '`adresse_depot_offres_it`':						
                        $stmt->bindValue($identifier, $this->adresse_depot_offres_it, PDO::PARAM_STR);
                        break;
                    case '`lieu_ouverture_plis_it`':						
                        $stmt->bindValue($identifier, $this->lieu_ouverture_plis_it, PDO::PARAM_STR);
                        break;
                    case '`adresse_retrais_dossiers_it`':						
                        $stmt->bindValue($identifier, $this->adresse_retrais_dossiers_it, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_admin_it`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_admin_it, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_tech_it`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_tech_it, PDO::PARAM_STR);
                        break;
                    case '`pieces_dossier_additif_it`':						
                        $stmt->bindValue($identifier, $this->pieces_dossier_additif_it, PDO::PARAM_STR);
                        break;
                    case '`detail_consultation_it`':						
                        $stmt->bindValue($identifier, $this->detail_consultation_it, PDO::PARAM_STR);
                        break;
                    case '`add_echantillion_it`':						
                        $stmt->bindValue($identifier, $this->add_echantillion_it, PDO::PARAM_STR);
                        break;
                    case '`add_reunion_it`':						
                        $stmt->bindValue($identifier, $this->add_reunion_it, PDO::PARAM_STR);
                        break;
                    case '`codes_nuts`':						
                        $stmt->bindValue($identifier, $this->codes_nuts, PDO::PARAM_STR);
                        break;
                    case '`intitule`':						
                        $stmt->bindValue($identifier, $this->intitule, PDO::PARAM_STR);
                        break;
                    case '`id_tr_intitule`':						
                        $stmt->bindValue($identifier, $this->id_tr_intitule, PDO::PARAM_INT);
                        break;
                    case '`objet`':						
                        $stmt->bindValue($identifier, $this->objet, PDO::PARAM_STR);
                        break;
                    case '`id_tr_objet`':						
                        $stmt->bindValue($identifier, $this->id_tr_objet, PDO::PARAM_INT);
                        break;
                    case '`date_decision`':						
                        $stmt->bindValue($identifier, $this->date_decision, PDO::PARAM_STR);
                        break;
                    case '`type_acces`':						
                        $stmt->bindValue($identifier, $this->type_acces, PDO::PARAM_STR);
                        break;
                    case '`autoriser_reponse_electronique`':						
                        $stmt->bindValue($identifier, $this->autoriser_reponse_electronique, PDO::PARAM_STR);
                        break;
                    case '`regle_mise_en_ligne`':						
                        $stmt->bindValue($identifier, $this->regle_mise_en_ligne, PDO::PARAM_INT);
                        break;
                    case '`id_regle_validation`':						
                        $stmt->bindValue($identifier, $this->id_regle_validation, PDO::PARAM_INT);
                        break;
                    case '`intitule_fr`':						
                        $stmt->bindValue($identifier, $this->intitule_fr, PDO::PARAM_STR);
                        break;
                    case '`intitule_en`':						
                        $stmt->bindValue($identifier, $this->intitule_en, PDO::PARAM_STR);
                        break;
                    case '`intitule_es`':						
                        $stmt->bindValue($identifier, $this->intitule_es, PDO::PARAM_STR);
                        break;
                    case '`intitule_su`':						
                        $stmt->bindValue($identifier, $this->intitule_su, PDO::PARAM_STR);
                        break;
                    case '`intitule_du`':						
                        $stmt->bindValue($identifier, $this->intitule_du, PDO::PARAM_STR);
                        break;
                    case '`intitule_cz`':						
                        $stmt->bindValue($identifier, $this->intitule_cz, PDO::PARAM_STR);
                        break;
                    case '`intitule_ar`':						
                        $stmt->bindValue($identifier, $this->intitule_ar, PDO::PARAM_STR);
                        break;
                    case '`intitule_it`':						
                        $stmt->bindValue($identifier, $this->intitule_it, PDO::PARAM_STR);
                        break;
                    case '`objet_fr`':						
                        $stmt->bindValue($identifier, $this->objet_fr, PDO::PARAM_STR);
                        break;
                    case '`objet_en`':						
                        $stmt->bindValue($identifier, $this->objet_en, PDO::PARAM_STR);
                        break;
                    case '`objet_es`':						
                        $stmt->bindValue($identifier, $this->objet_es, PDO::PARAM_STR);
                        break;
                    case '`objet_su`':						
                        $stmt->bindValue($identifier, $this->objet_su, PDO::PARAM_STR);
                        break;
                    case '`objet_du`':						
                        $stmt->bindValue($identifier, $this->objet_du, PDO::PARAM_STR);
                        break;
                    case '`objet_cz`':						
                        $stmt->bindValue($identifier, $this->objet_cz, PDO::PARAM_STR);
                        break;
                    case '`objet_ar`':						
                        $stmt->bindValue($identifier, $this->objet_ar, PDO::PARAM_STR);
                        break;
                    case '`objet_it`':						
                        $stmt->bindValue($identifier, $this->objet_it, PDO::PARAM_STR);
                        break;
                    case '`clause_sociale`':						
                        $stmt->bindValue($identifier, $this->clause_sociale, PDO::PARAM_STR);
                        break;
                    case '`clause_environnementale`':						
                        $stmt->bindValue($identifier, $this->clause_environnementale, PDO::PARAM_STR);
                        break;
                    case '`reponse_obligatoire`':						
                        $stmt->bindValue($identifier, $this->reponse_obligatoire, PDO::PARAM_STR);
                        break;
                    case '`autoriser_publicite`':						
                        $stmt->bindValue($identifier, $this->autoriser_publicite, PDO::PARAM_INT);
                        break;
                    case '`type_envoi`':						
                        $stmt->bindValue($identifier, $this->type_envoi, PDO::PARAM_STR);
                        break;
                    case '`chiffrement_offre`':						
                        $stmt->bindValue($identifier, $this->chiffrement_offre, PDO::PARAM_STR);
                        break;
                    case '`env_candidature`':						
                        $stmt->bindValue($identifier, $this->env_candidature, PDO::PARAM_INT);
                        break;
                    case '`env_offre`':						
                        $stmt->bindValue($identifier, $this->env_offre, PDO::PARAM_INT);
                        break;
                    case '`env_anonymat`':						
                        $stmt->bindValue($identifier, $this->env_anonymat, PDO::PARAM_INT);
                        break;
                    case '`id_etat_consultation`':						
                        $stmt->bindValue($identifier, $this->id_etat_consultation, PDO::PARAM_INT);
                        break;
                    case '`reference_connecteur`':						
                        $stmt->bindValue($identifier, $this->reference_connecteur, PDO::PARAM_STR);
                        break;
                    case '`cons_statut`':						
                        $stmt->bindValue($identifier, $this->cons_statut, PDO::PARAM_STR);
                        break;
                    case '`id_approbateur`':						
                        $stmt->bindValue($identifier, $this->id_approbateur, PDO::PARAM_INT);
                        break;
                    case '`id_valideur`':						
                        $stmt->bindValue($identifier, $this->id_valideur, PDO::PARAM_INT);
                        break;
                    case '`service_validation`':						
                        $stmt->bindValue($identifier, $this->service_validation, PDO::PARAM_INT);
                        break;
                    case '`id_createur`':						
                        $stmt->bindValue($identifier, $this->id_createur, PDO::PARAM_INT);
                        break;
                    case '`nom_createur`':						
                        $stmt->bindValue($identifier, $this->nom_createur, PDO::PARAM_STR);
                        break;
                    case '`prenom_createur`':						
                        $stmt->bindValue($identifier, $this->prenom_createur, PDO::PARAM_STR);
                        break;
                    case '`signature_acte_engagement`':						
                        $stmt->bindValue($identifier, $this->signature_acte_engagement, PDO::PARAM_STR);
                        break;
                    case '`archiveMetaDescription`':						
                        $stmt->bindValue($identifier, $this->archivemetadescription, PDO::PARAM_STR);
                        break;
                    case '`archiveMetaMotsClef`':						
                        $stmt->bindValue($identifier, $this->archivemetamotsclef, PDO::PARAM_STR);
                        break;
                    case '`archiveIdBlobZip`':						
                        $stmt->bindValue($identifier, $this->archiveidblobzip, PDO::PARAM_INT);
                        break;
                    case '`decision_partielle`':						
                        $stmt->bindValue($identifier, $this->decision_partielle, PDO::PARAM_STR);
                        break;
                    case '`type_decision_a_renseigner`':						
                        $stmt->bindValue($identifier, $this->type_decision_a_renseigner, PDO::PARAM_STR);
                        break;
                    case '`type_decision_attribution_marche`':						
                        $stmt->bindValue($identifier, $this->type_decision_attribution_marche, PDO::PARAM_STR);
                        break;
                    case '`type_decision_declaration_sans_suite`':						
                        $stmt->bindValue($identifier, $this->type_decision_declaration_sans_suite, PDO::PARAM_STR);
                        break;
                    case '`type_decision_declaration_infructueux`':						
                        $stmt->bindValue($identifier, $this->type_decision_declaration_infructueux, PDO::PARAM_STR);
                        break;
                    case '`type_decision_selection_entreprise`':						
                        $stmt->bindValue($identifier, $this->type_decision_selection_entreprise, PDO::PARAM_STR);
                        break;
                    case '`type_decision_attribution_accord_cadre`':						
                        $stmt->bindValue($identifier, $this->type_decision_attribution_accord_cadre, PDO::PARAM_STR);
                        break;
                    case '`type_decision_admission_sad`':						
                        $stmt->bindValue($identifier, $this->type_decision_admission_sad, PDO::PARAM_STR);
                        break;
                    case '`type_decision_autre`':						
                        $stmt->bindValue($identifier, $this->type_decision_autre, PDO::PARAM_STR);
                        break;
                    case '`id_archiveur`':						
                        $stmt->bindValue($identifier, $this->id_archiveur, PDO::PARAM_INT);
                        break;
                    case '`prenom_nom_agent_telechargement_plis`':						
                        $stmt->bindValue($identifier, $this->prenom_nom_agent_telechargement_plis, PDO::PARAM_STR);
                        break;
                    case '`id_agent_telechargement_plis`':						
                        $stmt->bindValue($identifier, $this->id_agent_telechargement_plis, PDO::PARAM_INT);
                        break;
                    case '`path_telechargement_plis`':						
                        $stmt->bindValue($identifier, $this->path_telechargement_plis, PDO::PARAM_STR);
                        break;
                    case '`date_telechargement_plis`':						
                        $stmt->bindValue($identifier, $this->date_telechargement_plis, PDO::PARAM_STR);
                        break;
                    case '`service_validation_intermediaire`':						
                        $stmt->bindValue($identifier, $this->service_validation_intermediaire, PDO::PARAM_INT);
                        break;
                    case '`env_offre_technique`':						
                        $stmt->bindValue($identifier, $this->env_offre_technique, PDO::PARAM_INT);
                        break;
                    case '`ref_org_partenaire`':						
                        $stmt->bindValue($identifier, $this->ref_org_partenaire, PDO::PARAM_STR);
                        break;
                    case '`date_archivage`':						
                        $stmt->bindValue($identifier, $this->date_archivage, PDO::PARAM_STR);
                        break;
                    case '`date_decision_annulation`':						
                        $stmt->bindValue($identifier, $this->date_decision_annulation, PDO::PARAM_STR);
                        break;
                    case '`commentaire_annulation`':						
                        $stmt->bindValue($identifier, $this->commentaire_annulation, PDO::PARAM_STR);
                        break;
                    case '`date_mise_en_ligne_souhaitee`':						
                        $stmt->bindValue($identifier, $this->date_mise_en_ligne_souhaitee, PDO::PARAM_STR);
                        break;
                    case '`etat_en_attente_validation`':						
                        $stmt->bindValue($identifier, $this->etat_en_attente_validation, PDO::PARAM_STR);
                        break;
                    case '`dossier_additif`':						
                        $stmt->bindValue($identifier, $this->dossier_additif, PDO::PARAM_STR);
                        break;
                    case '`type_marche`':						
                        $stmt->bindValue($identifier, $this->type_marche, PDO::PARAM_INT);
                        break;
                    case '`type_prestation`':						
                        $stmt->bindValue($identifier, $this->type_prestation, PDO::PARAM_INT);
                        break;
                    case '`date_modification`':						
                        $stmt->bindValue($identifier, $this->date_modification, PDO::PARAM_STR);
                        break;
                    case '`delai_partiel`':						
                        $stmt->bindValue($identifier, $this->delai_partiel, PDO::PARAM_STR);
                        break;
                    case '`dateFinLocale`':						
                        $stmt->bindValue($identifier, $this->datefinlocale, PDO::PARAM_STR);
                        break;
                    case '`lieuResidence`':						
                        $stmt->bindValue($identifier, $this->lieuresidence, PDO::PARAM_STR);
                        break;
                    case '`alerte`':						
                        $stmt->bindValue($identifier, $this->alerte, PDO::PARAM_STR);
                        break;
                    case '`doublon`':						
                        $stmt->bindValue($identifier, $this->doublon, PDO::PARAM_STR);
                        break;
                    case '`denomination_adapte`':						
                        $stmt->bindValue($identifier, $this->denomination_adapte, PDO::PARAM_STR);
                        break;
                    case '`url_consultation_avis_pub`':						
                        $stmt->bindValue($identifier, $this->url_consultation_avis_pub, PDO::PARAM_STR);
                        break;
                    case '`doublon_de`':						
                        $stmt->bindValue($identifier, $this->doublon_de, PDO::PARAM_STR);
                        break;
                    case '`entite_adjudicatrice`':						
                        $stmt->bindValue($identifier, $this->entite_adjudicatrice, PDO::PARAM_STR);
                        break;
                    case '`code_operation`':						
                        $stmt->bindValue($identifier, $this->code_operation, PDO::PARAM_STR);
                        break;
                    case '`clause_sociale_condition_execution`':						
                        $stmt->bindValue($identifier, $this->clause_sociale_condition_execution, PDO::PARAM_STR);
                        break;
                    case '`clause_sociale_insertion`':						
                        $stmt->bindValue($identifier, $this->clause_sociale_insertion, PDO::PARAM_STR);
                        break;
                    case '`clause_sociale_ateliers_proteges`':						
                        $stmt->bindValue($identifier, $this->clause_sociale_ateliers_proteges, PDO::PARAM_STR);
                        break;
                    case '`clause_env_specs_techniques`':						
                        $stmt->bindValue($identifier, $this->clause_env_specs_techniques, PDO::PARAM_STR);
                        break;
                    case '`clause_env_cond_execution`':						
                        $stmt->bindValue($identifier, $this->clause_env_cond_execution, PDO::PARAM_STR);
                        break;
                    case '`clause_env_criteres_select`':						
                        $stmt->bindValue($identifier, $this->clause_env_criteres_select, PDO::PARAM_STR);
                        break;
                    case '`id_donnee_complementaire`':						
                        $stmt->bindValue($identifier, $this->id_donnee_complementaire, PDO::PARAM_INT);
                        break;
                    case '`donnee_complementaire_obligatoire`':						
                        $stmt->bindValue($identifier, $this->donnee_complementaire_obligatoire, PDO::PARAM_STR);
                        break;
                    case '`mode_ouverture_reponse`':						
                        $stmt->bindValue($identifier, $this->mode_ouverture_reponse, PDO::PARAM_STR);
                        break;
                    case '`id_fichier_annulation`':						
                        $stmt->bindValue($identifier, $this->id_fichier_annulation, PDO::PARAM_INT);
                        break;
                    case '`idOperation`':						
                        $stmt->bindValue($identifier, $this->idoperation, PDO::PARAM_INT);
                        break;
                    case '`marche_public_simplifie`':						
                        $stmt->bindValue($identifier, $this->marche_public_simplifie, PDO::PARAM_STR);
                        break;
                    case '`infos_blocs_atlas`':						
                        $stmt->bindValue($identifier, $this->infos_blocs_atlas, PDO::PARAM_STR);
                        break;
                    case '`DATE_FIN_UNIX`':						
                        $stmt->bindValue($identifier, $this->date_fin_unix, PDO::PARAM_STR);
                        break;
                    case '`date_achevement`':						
                        $stmt->bindValue($identifier, $this->date_achevement, PDO::PARAM_STR);
                        break;
                    case '`nombre_de_lots`':						
                        $stmt->bindValue($identifier, $this->nombre_de_lots, PDO::PARAM_INT);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setReference($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        }

        $this->validationFailures = $res;

        return false;
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggregated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objects otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            if (($retval = CommonConsultationPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collCommonAVISs !== null) {
                    foreach ($this->collCommonAVISs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonAnnonces !== null) {
                    foreach ($this->collCommonAnnonces as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef !== null) {
                    foreach ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonAnnonceBoampsRelatedByConsultationRef !== null) {
                    foreach ($this->collCommonAnnonceBoampsRelatedByConsultationRef as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonAvisPubs !== null) {
                    foreach ($this->collCommonAvisPubs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonCategorieLots !== null) {
                    foreach ($this->collCommonCategorieLots as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonComplements !== null) {
                    foreach ($this->collCommonComplements as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonConsultationHistoriqueEtats !== null) {
                    foreach ($this->collCommonConsultationHistoriqueEtats as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonDATEFINs !== null) {
                    foreach ($this->collCommonDATEFINs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonDAConsultations !== null) {
                    foreach ($this->collCommonDAConsultations as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonDCEs !== null) {
                    foreach ($this->collCommonDCEs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonDocumentExternes !== null) {
                    foreach ($this->collCommonDocumentExternes as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonHeliosPiecePublicites !== null) {
                    foreach ($this->collCommonHeliosPiecePublicites as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonHeliosPvConsultations !== null) {
                    foreach ($this->collCommonHeliosPvConsultations as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonHeliosRapportPrefets !== null) {
                    foreach ($this->collCommonHeliosRapportPrefets as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonHeliosTableauArs !== null) {
                    foreach ($this->collCommonHeliosTableauArs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonHeliosTeletransmissions !== null) {
                    foreach ($this->collCommonHeliosTeletransmissions as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonInterneConsultations !== null) {
                    foreach ($this->collCommonInterneConsultations as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonInterneConsultationSuiviSeuls !== null) {
                    foreach ($this->collCommonInterneConsultationSuiviSeuls as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonOffrePapiers !== null) {
                    foreach ($this->collCommonOffrePapiers as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonOffress !== null) {
                    foreach ($this->collCommonOffress as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonPanierEntreprises !== null) {
                    foreach ($this->collCommonPanierEntreprises as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonPiecesDCEsRelatedByRefConsultation !== null) {
                    foreach ($this->collCommonPiecesDCEsRelatedByRefConsultation as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation !== null) {
                    foreach ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonRGs !== null) {
                    foreach ($this->collCommonRGs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonRetraitPapiers !== null) {
                    foreach ($this->collCommonRetraitPapiers as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonSupportPublications !== null) {
                    foreach ($this->collCommonSupportPublications as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonTelechargements !== null) {
                    foreach ($this->collCommonTelechargements as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef !== null) {
                    foreach ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonTelechargementAnonymesRelatedByConsultationRef !== null) {
                    foreach ($this->collCommonTelechargementAnonymesRelatedByConsultationRef as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonConsultationDocumentCfes !== null) {
                    foreach ($this->collCommonConsultationDocumentCfes as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonTCalendriers !== null) {
                    foreach ($this->collCommonTCalendriers as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonTParamDossierFormulaires !== null) {
                    foreach ($this->collCommonTParamDossierFormulaires as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonTReponseElecFormulaires !== null) {
                    foreach ($this->collCommonTReponseElecFormulaires as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collCommonVisiteLieuxs !== null) {
                    foreach ($this->collCommonVisiteLieuxs as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = CommonConsultationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getReference();
                break;
            case 1:
                return $this->getOrganisme();
                break;
            case 2:
                return $this->getReferenceUtilisateur();
                break;
            case 3:
                return $this->getCategorie();
                break;
            case 4:
                return $this->getTitre();
                break;
            case 5:
                return $this->getResume();
                break;
            case 6:
                return $this->getDatedebut();
                break;
            case 7:
                return $this->getDatefin();
                break;
            case 8:
                return $this->getDatevalidation();
                break;
            case 9:
                return $this->getTypeProcedure();
                break;
            case 10:
                return $this->getCodeProcedure();
                break;
            case 11:
                return $this->getReponseElectronique();
                break;
            case 12:
                return $this->getNumProcedure();
                break;
            case 13:
                return $this->getIdTypeProcedure();
                break;
            case 14:
                return $this->getIdTypeAvis();
                break;
            case 15:
                return $this->getLieuExecution();
                break;
            case 16:
                return $this->getTypeMiseEnLigne();
                break;
            case 17:
                return $this->getDatemiseenligne();
                break;
            case 18:
                return $this->getIsTiersAvis();
                break;
            case 19:
                return $this->getUrl();
                break;
            case 20:
                return $this->getDatefinSad();
                break;
            case 21:
                return $this->getIsSysAcqDyn();
                break;
            case 22:
                return $this->getReferenceConsultationInit();
                break;
            case 23:
                return $this->getSignatureOffre();
                break;
            case 24:
                return $this->getIdTypeValidation();
                break;
            case 25:
                return $this->getEtatApprobation();
                break;
            case 26:
                return $this->getEtatValidation();
                break;
            case 27:
                return $this->getChampSuppInvisible();
                break;
            case 28:
                return $this->getCodeCpv1();
                break;
            case 29:
                return $this->getCodeCpv2();
                break;
            case 30:
                return $this->getPublicationEurope();
                break;
            case 31:
                return $this->getEtatPublication();
                break;
            case 32:
                return $this->getPoursuivreAffichage();
                break;
            case 33:
                return $this->getNbrTelechargementDce();
                break;
            case 34:
                return $this->getServiceId();
                break;
            case 35:
                return $this->getServiceAssocieId();
                break;
            case 36:
                return $this->getDetailConsultation();
                break;
            case 37:
                return $this->getDateFinAffichage();
                break;
            case 38:
                return $this->getDepouillablePhaseConsultation();
                break;
            case 39:
                return $this->getConsultationTransverse();
                break;
            case 40:
                return $this->getConsultationAchatPublique();
                break;
            case 41:
                return $this->getUrlConsultationAchatPublique();
                break;
            case 42:
                return $this->getPartialDceDownload();
                break;
            case 43:
                return $this->getTiragePlan();
                break;
            case 44:
                return $this->getTireurPlan();
                break;
            case 45:
                return $this->getDateMiseEnLigneCalcule();
                break;
            case 46:
                return $this->getAccessibiliteEn();
                break;
            case 47:
                return $this->getAccessibiliteEs();
                break;
            case 48:
                return $this->getNbrReponse();
                break;
            case 49:
                return $this->getIdTypeProcedureOrg();
                break;
            case 50:
                return $this->getOrganismeConsultationInit();
                break;
            case 51:
                return $this->getTirageDescriptif();
                break;
            case 52:
                return $this->getDateValidationIntermediaire();
                break;
            case 53:
                return $this->getAccessibiliteFr();
                break;
            case 54:
                return $this->getIdTrAccessibilite();
                break;
            case 55:
                return $this->getAccessibiliteCz();
                break;
            case 56:
                return $this->getAccessibiliteDu();
                break;
            case 57:
                return $this->getAccessibiliteSu();
                break;
            case 58:
                return $this->getAccessibiliteAr();
                break;
            case 59:
                return $this->getAlloti();
                break;
            case 60:
                return $this->getNumeroPhase();
                break;
            case 61:
                return $this->getConsultationExterne();
                break;
            case 62:
                return $this->getUrlConsultationExterne();
                break;
            case 63:
                return $this->getOrgDenomination();
                break;
            case 64:
                return $this->getDomainesActivites();
                break;
            case 65:
                return $this->getIdAffaire();
                break;
            case 66:
                return $this->getAdresseRetraisDossiers();
                break;
            case 67:
                return $this->getCautionProvisoire();
                break;
            case 68:
                return $this->getAdresseDepotOffres();
                break;
            case 69:
                return $this->getLieuOuverturePlis();
                break;
            case 70:
                return $this->getPrixAquisitionPlans();
                break;
            case 71:
                return $this->getQualification();
                break;
            case 72:
                return $this->getAgrements();
                break;
            case 73:
                return $this->getAddEchantillion();
                break;
            case 74:
                return $this->getDateLimiteEchantillion();
                break;
            case 75:
                return $this->getAddReunion();
                break;
            case 76:
                return $this->getDateReunion();
                break;
            case 77:
                return $this->getVariantes();
                break;
            case 78:
                return $this->getAdresseRetraisDossiersAr();
                break;
            case 79:
                return $this->getAdresseDepotOffresAr();
                break;
            case 80:
                return $this->getLieuOuverturePlisAr();
                break;
            case 81:
                return $this->getPiecesDossierAdmin();
                break;
            case 82:
                return $this->getPiecesDossierAdminFr();
                break;
            case 83:
                return $this->getPiecesDossierAdminEn();
                break;
            case 84:
                return $this->getPiecesDossierAdminEs();
                break;
            case 85:
                return $this->getPiecesDossierAdminSu();
                break;
            case 86:
                return $this->getPiecesDossierAdminDu();
                break;
            case 87:
                return $this->getPiecesDossierAdminCz();
                break;
            case 88:
                return $this->getPiecesDossierAdminAr();
                break;
            case 89:
                return $this->getPiecesDossierTech();
                break;
            case 90:
                return $this->getPiecesDossierTechFr();
                break;
            case 91:
                return $this->getPiecesDossierTechEn();
                break;
            case 92:
                return $this->getPiecesDossierTechEs();
                break;
            case 93:
                return $this->getPiecesDossierTechSu();
                break;
            case 94:
                return $this->getPiecesDossierTechDu();
                break;
            case 95:
                return $this->getPiecesDossierTechCz();
                break;
            case 96:
                return $this->getPiecesDossierTechAr();
                break;
            case 97:
                return $this->getPiecesDossierAdditif();
                break;
            case 98:
                return $this->getPiecesDossierAdditifFr();
                break;
            case 99:
                return $this->getPiecesDossierAdditifEn();
                break;
            case 100:
                return $this->getPiecesDossierAdditifEs();
                break;
            case 101:
                return $this->getPiecesDossierAdditifSu();
                break;
            case 102:
                return $this->getPiecesDossierAdditifDu();
                break;
            case 103:
                return $this->getPiecesDossierAdditifCz();
                break;
            case 104:
                return $this->getPiecesDossierAdditifAr();
                break;
            case 105:
                return $this->getIdRpa();
                break;
            case 106:
                return $this->getDetailConsultationFr();
                break;
            case 107:
                return $this->getDetailConsultationEn();
                break;
            case 108:
                return $this->getDetailConsultationEs();
                break;
            case 109:
                return $this->getDetailConsultationSu();
                break;
            case 110:
                return $this->getDetailConsultationDu();
                break;
            case 111:
                return $this->getDetailConsultationCz();
                break;
            case 112:
                return $this->getDetailConsultationAr();
                break;
            case 113:
                return $this->getEchantillon();
                break;
            case 114:
                return $this->getReunion();
                break;
            case 115:
                return $this->getVisitesLieux();
                break;
            case 116:
                return $this->getVarianteCalcule();
                break;
            case 117:
                return $this->getAdresseRetraisDossiersFr();
                break;
            case 118:
                return $this->getAdresseRetraisDossiersEn();
                break;
            case 119:
                return $this->getAdresseRetraisDossiersEs();
                break;
            case 120:
                return $this->getAdresseRetraisDossiersSu();
                break;
            case 121:
                return $this->getAdresseRetraisDossiersDu();
                break;
            case 122:
                return $this->getAdresseRetraisDossiersCz();
                break;
            case 123:
                return $this->getAdresseDepotOffresFr();
                break;
            case 124:
                return $this->getAdresseDepotOffresEn();
                break;
            case 125:
                return $this->getAdresseDepotOffresEs();
                break;
            case 126:
                return $this->getAdresseDepotOffresSu();
                break;
            case 127:
                return $this->getAdresseDepotOffresDu();
                break;
            case 128:
                return $this->getAdresseDepotOffresCz();
                break;
            case 129:
                return $this->getLieuOuverturePlisFr();
                break;
            case 130:
                return $this->getLieuOuverturePlisEn();
                break;
            case 131:
                return $this->getLieuOuverturePlisEs();
                break;
            case 132:
                return $this->getLieuOuverturePlisSu();
                break;
            case 133:
                return $this->getLieuOuverturePlisDu();
                break;
            case 134:
                return $this->getLieuOuverturePlisCz();
                break;
            case 135:
                return $this->getAddEchantillionFr();
                break;
            case 136:
                return $this->getAddEchantillionEn();
                break;
            case 137:
                return $this->getAddEchantillionEs();
                break;
            case 138:
                return $this->getAddEchantillionSu();
                break;
            case 139:
                return $this->getAddEchantillionDu();
                break;
            case 140:
                return $this->getAddEchantillionCz();
                break;
            case 141:
                return $this->getAddEchantillionAr();
                break;
            case 142:
                return $this->getAddReunionFr();
                break;
            case 143:
                return $this->getAddReunionEn();
                break;
            case 144:
                return $this->getAddReunionEs();
                break;
            case 145:
                return $this->getAddReunionSu();
                break;
            case 146:
                return $this->getAddReunionDu();
                break;
            case 147:
                return $this->getAddReunionCz();
                break;
            case 148:
                return $this->getAddReunionAr();
                break;
            case 149:
                return $this->getModePassation();
                break;
            case 150:
                return $this->getConsultationAnnulee();
                break;
            case 151:
                return $this->getCompteBoampAssocie();
                break;
            case 152:
                return $this->getAccessibiliteIt();
                break;
            case 153:
                return $this->getAdresseDepotOffresIt();
                break;
            case 154:
                return $this->getLieuOuverturePlisIt();
                break;
            case 155:
                return $this->getAdresseRetraisDossiersIt();
                break;
            case 156:
                return $this->getPiecesDossierAdminIt();
                break;
            case 157:
                return $this->getPiecesDossierTechIt();
                break;
            case 158:
                return $this->getPiecesDossierAdditifIt();
                break;
            case 159:
                return $this->getDetailConsultationIt();
                break;
            case 160:
                return $this->getAddEchantillionIt();
                break;
            case 161:
                return $this->getAddReunionIt();
                break;
            case 162:
                return $this->getCodesNuts();
                break;
            case 163:
                return $this->getIntitule();
                break;
            case 164:
                return $this->getIdTrIntitule();
                break;
            case 165:
                return $this->getObjet();
                break;
            case 166:
                return $this->getIdTrObjet();
                break;
            case 167:
                return $this->getDateDecision();
                break;
            case 168:
                return $this->getTypeAcces();
                break;
            case 169:
                return $this->getAutoriserReponseElectronique();
                break;
            case 170:
                return $this->getRegleMiseEnLigne();
                break;
            case 171:
                return $this->getIdRegleValidation();
                break;
            case 172:
                return $this->getIntituleFr();
                break;
            case 173:
                return $this->getIntituleEn();
                break;
            case 174:
                return $this->getIntituleEs();
                break;
            case 175:
                return $this->getIntituleSu();
                break;
            case 176:
                return $this->getIntituleDu();
                break;
            case 177:
                return $this->getIntituleCz();
                break;
            case 178:
                return $this->getIntituleAr();
                break;
            case 179:
                return $this->getIntituleIt();
                break;
            case 180:
                return $this->getObjetFr();
                break;
            case 181:
                return $this->getObjetEn();
                break;
            case 182:
                return $this->getObjetEs();
                break;
            case 183:
                return $this->getObjetSu();
                break;
            case 184:
                return $this->getObjetDu();
                break;
            case 185:
                return $this->getObjetCz();
                break;
            case 186:
                return $this->getObjetAr();
                break;
            case 187:
                return $this->getObjetIt();
                break;
            case 188:
                return $this->getClauseSociale();
                break;
            case 189:
                return $this->getClauseEnvironnementale();
                break;
            case 190:
                return $this->getReponseObligatoire();
                break;
            case 191:
                return $this->getAutoriserPublicite();
                break;
            case 192:
                return $this->getTypeEnvoi();
                break;
            case 193:
                return $this->getChiffrementOffre();
                break;
            case 194:
                return $this->getEnvCandidature();
                break;
            case 195:
                return $this->getEnvOffre();
                break;
            case 196:
                return $this->getEnvAnonymat();
                break;
            case 197:
                return $this->getIdEtatConsultation();
                break;
            case 198:
                return $this->getReferenceConnecteur();
                break;
            case 199:
                return $this->getConsStatut();
                break;
            case 200:
                return $this->getIdApprobateur();
                break;
            case 201:
                return $this->getIdValideur();
                break;
            case 202:
                return $this->getServiceValidation();
                break;
            case 203:
                return $this->getIdCreateur();
                break;
            case 204:
                return $this->getNomCreateur();
                break;
            case 205:
                return $this->getPrenomCreateur();
                break;
            case 206:
                return $this->getSignatureActeEngagement();
                break;
            case 207:
                return $this->getArchivemetadescription();
                break;
            case 208:
                return $this->getArchivemetamotsclef();
                break;
            case 209:
                return $this->getArchiveidblobzip();
                break;
            case 210:
                return $this->getDecisionPartielle();
                break;
            case 211:
                return $this->getTypeDecisionARenseigner();
                break;
            case 212:
                return $this->getTypeDecisionAttributionMarche();
                break;
            case 213:
                return $this->getTypeDecisionDeclarationSansSuite();
                break;
            case 214:
                return $this->getTypeDecisionDeclarationInfructueux();
                break;
            case 215:
                return $this->getTypeDecisionSelectionEntreprise();
                break;
            case 216:
                return $this->getTypeDecisionAttributionAccordCadre();
                break;
            case 217:
                return $this->getTypeDecisionAdmissionSad();
                break;
            case 218:
                return $this->getTypeDecisionAutre();
                break;
            case 219:
                return $this->getIdArchiveur();
                break;
            case 220:
                return $this->getPrenomNomAgentTelechargementPlis();
                break;
            case 221:
                return $this->getIdAgentTelechargementPlis();
                break;
            case 222:
                return $this->getPathTelechargementPlis();
                break;
            case 223:
                return $this->getDateTelechargementPlis();
                break;
            case 224:
                return $this->getServiceValidationIntermediaire();
                break;
            case 225:
                return $this->getEnvOffreTechnique();
                break;
            case 226:
                return $this->getRefOrgPartenaire();
                break;
            case 227:
                return $this->getDateArchivage();
                break;
            case 228:
                return $this->getDateDecisionAnnulation();
                break;
            case 229:
                return $this->getCommentaireAnnulation();
                break;
            case 230:
                return $this->getDateMiseEnLigneSouhaitee();
                break;
            case 231:
                return $this->getEtatEnAttenteValidation();
                break;
            case 232:
                return $this->getDossierAdditif();
                break;
            case 233:
                return $this->getTypeMarche();
                break;
            case 234:
                return $this->getTypePrestation();
                break;
            case 235:
                return $this->getDateModification();
                break;
            case 236:
                return $this->getDelaiPartiel();
                break;
            case 237:
                return $this->getDatefinlocale();
                break;
            case 238:
                return $this->getLieuresidence();
                break;
            case 239:
                return $this->getAlerte();
                break;
            case 240:
                return $this->getDoublon();
                break;
            case 241:
                return $this->getDenominationAdapte();
                break;
            case 242:
                return $this->getUrlConsultationAvisPub();
                break;
            case 243:
                return $this->getDoublonDe();
                break;
            case 244:
                return $this->getEntiteAdjudicatrice();
                break;
            case 245:
                return $this->getCodeOperation();
                break;
            case 246:
                return $this->getClauseSocialeConditionExecution();
                break;
            case 247:
                return $this->getClauseSocialeInsertion();
                break;
            case 248:
                return $this->getClauseSocialeAteliersProteges();
                break;
            case 249:
                return $this->getClauseEnvSpecsTechniques();
                break;
            case 250:
                return $this->getClauseEnvCondExecution();
                break;
            case 251:
                return $this->getClauseEnvCriteresSelect();
                break;
            case 252:
                return $this->getIdDonneeComplementaire();
                break;
            case 253:
                return $this->getDonneeComplementaireObligatoire();
                break;
            case 254:
                return $this->getModeOuvertureReponse();
                break;
            case 255:
                return $this->getIdFichierAnnulation();
                break;
            case 256:
                return $this->getIdoperation();
                break;
            case 257:
                return $this->getMarchePublicSimplifie();
                break;
            case 258:
                return $this->getInfosBlocsAtlas();
                break;
            case 259:
                return $this->getDateFinUnix();
                break;
            case 260:
                return $this->getDateAchevement();
                break;
            case 261:
                return $this->getNombreDeLots();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['CommonConsultation'][serialize($this->getPrimaryKey())])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['CommonConsultation'][serialize($this->getPrimaryKey())] = true;
        $keys = CommonConsultationPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getReference(),
            $keys[1] => $this->getOrganisme(),
            $keys[2] => $this->getReferenceUtilisateur(),
            $keys[3] => $this->getCategorie(),
            $keys[4] => $this->getTitre(),
            $keys[5] => $this->getResume(),
            $keys[6] => $this->getDatedebut(),
            $keys[7] => $this->getDatefin(),
            $keys[8] => $this->getDatevalidation(),
            $keys[9] => $this->getTypeProcedure(),
            $keys[10] => $this->getCodeProcedure(),
            $keys[11] => $this->getReponseElectronique(),
            $keys[12] => $this->getNumProcedure(),
            $keys[13] => $this->getIdTypeProcedure(),
            $keys[14] => $this->getIdTypeAvis(),
            $keys[15] => $this->getLieuExecution(),
            $keys[16] => $this->getTypeMiseEnLigne(),
            $keys[17] => $this->getDatemiseenligne(),
            $keys[18] => $this->getIsTiersAvis(),
            $keys[19] => $this->getUrl(),
            $keys[20] => $this->getDatefinSad(),
            $keys[21] => $this->getIsSysAcqDyn(),
            $keys[22] => $this->getReferenceConsultationInit(),
            $keys[23] => $this->getSignatureOffre(),
            $keys[24] => $this->getIdTypeValidation(),
            $keys[25] => $this->getEtatApprobation(),
            $keys[26] => $this->getEtatValidation(),
            $keys[27] => $this->getChampSuppInvisible(),
            $keys[28] => $this->getCodeCpv1(),
            $keys[29] => $this->getCodeCpv2(),
            $keys[30] => $this->getPublicationEurope(),
            $keys[31] => $this->getEtatPublication(),
            $keys[32] => $this->getPoursuivreAffichage(),
            $keys[33] => $this->getNbrTelechargementDce(),
            $keys[34] => $this->getServiceId(),
            $keys[35] => $this->getServiceAssocieId(),
            $keys[36] => $this->getDetailConsultation(),
            $keys[37] => $this->getDateFinAffichage(),
            $keys[38] => $this->getDepouillablePhaseConsultation(),
            $keys[39] => $this->getConsultationTransverse(),
            $keys[40] => $this->getConsultationAchatPublique(),
            $keys[41] => $this->getUrlConsultationAchatPublique(),
            $keys[42] => $this->getPartialDceDownload(),
            $keys[43] => $this->getTiragePlan(),
            $keys[44] => $this->getTireurPlan(),
            $keys[45] => $this->getDateMiseEnLigneCalcule(),
            $keys[46] => $this->getAccessibiliteEn(),
            $keys[47] => $this->getAccessibiliteEs(),
            $keys[48] => $this->getNbrReponse(),
            $keys[49] => $this->getIdTypeProcedureOrg(),
            $keys[50] => $this->getOrganismeConsultationInit(),
            $keys[51] => $this->getTirageDescriptif(),
            $keys[52] => $this->getDateValidationIntermediaire(),
            $keys[53] => $this->getAccessibiliteFr(),
            $keys[54] => $this->getIdTrAccessibilite(),
            $keys[55] => $this->getAccessibiliteCz(),
            $keys[56] => $this->getAccessibiliteDu(),
            $keys[57] => $this->getAccessibiliteSu(),
            $keys[58] => $this->getAccessibiliteAr(),
            $keys[59] => $this->getAlloti(),
            $keys[60] => $this->getNumeroPhase(),
            $keys[61] => $this->getConsultationExterne(),
            $keys[62] => $this->getUrlConsultationExterne(),
            $keys[63] => $this->getOrgDenomination(),
            $keys[64] => $this->getDomainesActivites(),
            $keys[65] => $this->getIdAffaire(),
            $keys[66] => $this->getAdresseRetraisDossiers(),
            $keys[67] => $this->getCautionProvisoire(),
            $keys[68] => $this->getAdresseDepotOffres(),
            $keys[69] => $this->getLieuOuverturePlis(),
            $keys[70] => $this->getPrixAquisitionPlans(),
            $keys[71] => $this->getQualification(),
            $keys[72] => $this->getAgrements(),
            $keys[73] => $this->getAddEchantillion(),
            $keys[74] => $this->getDateLimiteEchantillion(),
            $keys[75] => $this->getAddReunion(),
            $keys[76] => $this->getDateReunion(),
            $keys[77] => $this->getVariantes(),
            $keys[78] => $this->getAdresseRetraisDossiersAr(),
            $keys[79] => $this->getAdresseDepotOffresAr(),
            $keys[80] => $this->getLieuOuverturePlisAr(),
            $keys[81] => $this->getPiecesDossierAdmin(),
            $keys[82] => $this->getPiecesDossierAdminFr(),
            $keys[83] => $this->getPiecesDossierAdminEn(),
            $keys[84] => $this->getPiecesDossierAdminEs(),
            $keys[85] => $this->getPiecesDossierAdminSu(),
            $keys[86] => $this->getPiecesDossierAdminDu(),
            $keys[87] => $this->getPiecesDossierAdminCz(),
            $keys[88] => $this->getPiecesDossierAdminAr(),
            $keys[89] => $this->getPiecesDossierTech(),
            $keys[90] => $this->getPiecesDossierTechFr(),
            $keys[91] => $this->getPiecesDossierTechEn(),
            $keys[92] => $this->getPiecesDossierTechEs(),
            $keys[93] => $this->getPiecesDossierTechSu(),
            $keys[94] => $this->getPiecesDossierTechDu(),
            $keys[95] => $this->getPiecesDossierTechCz(),
            $keys[96] => $this->getPiecesDossierTechAr(),
            $keys[97] => $this->getPiecesDossierAdditif(),
            $keys[98] => $this->getPiecesDossierAdditifFr(),
            $keys[99] => $this->getPiecesDossierAdditifEn(),
            $keys[100] => $this->getPiecesDossierAdditifEs(),
            $keys[101] => $this->getPiecesDossierAdditifSu(),
            $keys[102] => $this->getPiecesDossierAdditifDu(),
            $keys[103] => $this->getPiecesDossierAdditifCz(),
            $keys[104] => $this->getPiecesDossierAdditifAr(),
            $keys[105] => $this->getIdRpa(),
            $keys[106] => $this->getDetailConsultationFr(),
            $keys[107] => $this->getDetailConsultationEn(),
            $keys[108] => $this->getDetailConsultationEs(),
            $keys[109] => $this->getDetailConsultationSu(),
            $keys[110] => $this->getDetailConsultationDu(),
            $keys[111] => $this->getDetailConsultationCz(),
            $keys[112] => $this->getDetailConsultationAr(),
            $keys[113] => $this->getEchantillon(),
            $keys[114] => $this->getReunion(),
            $keys[115] => $this->getVisitesLieux(),
            $keys[116] => $this->getVarianteCalcule(),
            $keys[117] => $this->getAdresseRetraisDossiersFr(),
            $keys[118] => $this->getAdresseRetraisDossiersEn(),
            $keys[119] => $this->getAdresseRetraisDossiersEs(),
            $keys[120] => $this->getAdresseRetraisDossiersSu(),
            $keys[121] => $this->getAdresseRetraisDossiersDu(),
            $keys[122] => $this->getAdresseRetraisDossiersCz(),
            $keys[123] => $this->getAdresseDepotOffresFr(),
            $keys[124] => $this->getAdresseDepotOffresEn(),
            $keys[125] => $this->getAdresseDepotOffresEs(),
            $keys[126] => $this->getAdresseDepotOffresSu(),
            $keys[127] => $this->getAdresseDepotOffresDu(),
            $keys[128] => $this->getAdresseDepotOffresCz(),
            $keys[129] => $this->getLieuOuverturePlisFr(),
            $keys[130] => $this->getLieuOuverturePlisEn(),
            $keys[131] => $this->getLieuOuverturePlisEs(),
            $keys[132] => $this->getLieuOuverturePlisSu(),
            $keys[133] => $this->getLieuOuverturePlisDu(),
            $keys[134] => $this->getLieuOuverturePlisCz(),
            $keys[135] => $this->getAddEchantillionFr(),
            $keys[136] => $this->getAddEchantillionEn(),
            $keys[137] => $this->getAddEchantillionEs(),
            $keys[138] => $this->getAddEchantillionSu(),
            $keys[139] => $this->getAddEchantillionDu(),
            $keys[140] => $this->getAddEchantillionCz(),
            $keys[141] => $this->getAddEchantillionAr(),
            $keys[142] => $this->getAddReunionFr(),
            $keys[143] => $this->getAddReunionEn(),
            $keys[144] => $this->getAddReunionEs(),
            $keys[145] => $this->getAddReunionSu(),
            $keys[146] => $this->getAddReunionDu(),
            $keys[147] => $this->getAddReunionCz(),
            $keys[148] => $this->getAddReunionAr(),
            $keys[149] => $this->getModePassation(),
            $keys[150] => $this->getConsultationAnnulee(),
            $keys[151] => $this->getCompteBoampAssocie(),
            $keys[152] => $this->getAccessibiliteIt(),
            $keys[153] => $this->getAdresseDepotOffresIt(),
            $keys[154] => $this->getLieuOuverturePlisIt(),
            $keys[155] => $this->getAdresseRetraisDossiersIt(),
            $keys[156] => $this->getPiecesDossierAdminIt(),
            $keys[157] => $this->getPiecesDossierTechIt(),
            $keys[158] => $this->getPiecesDossierAdditifIt(),
            $keys[159] => $this->getDetailConsultationIt(),
            $keys[160] => $this->getAddEchantillionIt(),
            $keys[161] => $this->getAddReunionIt(),
            $keys[162] => $this->getCodesNuts(),
            $keys[163] => $this->getIntitule(),
            $keys[164] => $this->getIdTrIntitule(),
            $keys[165] => $this->getObjet(),
            $keys[166] => $this->getIdTrObjet(),
            $keys[167] => $this->getDateDecision(),
            $keys[168] => $this->getTypeAcces(),
            $keys[169] => $this->getAutoriserReponseElectronique(),
            $keys[170] => $this->getRegleMiseEnLigne(),
            $keys[171] => $this->getIdRegleValidation(),
            $keys[172] => $this->getIntituleFr(),
            $keys[173] => $this->getIntituleEn(),
            $keys[174] => $this->getIntituleEs(),
            $keys[175] => $this->getIntituleSu(),
            $keys[176] => $this->getIntituleDu(),
            $keys[177] => $this->getIntituleCz(),
            $keys[178] => $this->getIntituleAr(),
            $keys[179] => $this->getIntituleIt(),
            $keys[180] => $this->getObjetFr(),
            $keys[181] => $this->getObjetEn(),
            $keys[182] => $this->getObjetEs(),
            $keys[183] => $this->getObjetSu(),
            $keys[184] => $this->getObjetDu(),
            $keys[185] => $this->getObjetCz(),
            $keys[186] => $this->getObjetAr(),
            $keys[187] => $this->getObjetIt(),
            $keys[188] => $this->getClauseSociale(),
            $keys[189] => $this->getClauseEnvironnementale(),
            $keys[190] => $this->getReponseObligatoire(),
            $keys[191] => $this->getAutoriserPublicite(),
            $keys[192] => $this->getTypeEnvoi(),
            $keys[193] => $this->getChiffrementOffre(),
            $keys[194] => $this->getEnvCandidature(),
            $keys[195] => $this->getEnvOffre(),
            $keys[196] => $this->getEnvAnonymat(),
            $keys[197] => $this->getIdEtatConsultation(),
            $keys[198] => $this->getReferenceConnecteur(),
            $keys[199] => $this->getConsStatut(),
            $keys[200] => $this->getIdApprobateur(),
            $keys[201] => $this->getIdValideur(),
            $keys[202] => $this->getServiceValidation(),
            $keys[203] => $this->getIdCreateur(),
            $keys[204] => $this->getNomCreateur(),
            $keys[205] => $this->getPrenomCreateur(),
            $keys[206] => $this->getSignatureActeEngagement(),
            $keys[207] => $this->getArchivemetadescription(),
            $keys[208] => $this->getArchivemetamotsclef(),
            $keys[209] => $this->getArchiveidblobzip(),
            $keys[210] => $this->getDecisionPartielle(),
            $keys[211] => $this->getTypeDecisionARenseigner(),
            $keys[212] => $this->getTypeDecisionAttributionMarche(),
            $keys[213] => $this->getTypeDecisionDeclarationSansSuite(),
            $keys[214] => $this->getTypeDecisionDeclarationInfructueux(),
            $keys[215] => $this->getTypeDecisionSelectionEntreprise(),
            $keys[216] => $this->getTypeDecisionAttributionAccordCadre(),
            $keys[217] => $this->getTypeDecisionAdmissionSad(),
            $keys[218] => $this->getTypeDecisionAutre(),
            $keys[219] => $this->getIdArchiveur(),
            $keys[220] => $this->getPrenomNomAgentTelechargementPlis(),
            $keys[221] => $this->getIdAgentTelechargementPlis(),
            $keys[222] => $this->getPathTelechargementPlis(),
            $keys[223] => $this->getDateTelechargementPlis(),
            $keys[224] => $this->getServiceValidationIntermediaire(),
            $keys[225] => $this->getEnvOffreTechnique(),
            $keys[226] => $this->getRefOrgPartenaire(),
            $keys[227] => $this->getDateArchivage(),
            $keys[228] => $this->getDateDecisionAnnulation(),
            $keys[229] => $this->getCommentaireAnnulation(),
            $keys[230] => $this->getDateMiseEnLigneSouhaitee(),
            $keys[231] => $this->getEtatEnAttenteValidation(),
            $keys[232] => $this->getDossierAdditif(),
            $keys[233] => $this->getTypeMarche(),
            $keys[234] => $this->getTypePrestation(),
            $keys[235] => $this->getDateModification(),
            $keys[236] => $this->getDelaiPartiel(),
            $keys[237] => $this->getDatefinlocale(),
            $keys[238] => $this->getLieuresidence(),
            $keys[239] => $this->getAlerte(),
            $keys[240] => $this->getDoublon(),
            $keys[241] => $this->getDenominationAdapte(),
            $keys[242] => $this->getUrlConsultationAvisPub(),
            $keys[243] => $this->getDoublonDe(),
            $keys[244] => $this->getEntiteAdjudicatrice(),
            $keys[245] => $this->getCodeOperation(),
            $keys[246] => $this->getClauseSocialeConditionExecution(),
            $keys[247] => $this->getClauseSocialeInsertion(),
            $keys[248] => $this->getClauseSocialeAteliersProteges(),
            $keys[249] => $this->getClauseEnvSpecsTechniques(),
            $keys[250] => $this->getClauseEnvCondExecution(),
            $keys[251] => $this->getClauseEnvCriteresSelect(),
            $keys[252] => $this->getIdDonneeComplementaire(),
            $keys[253] => $this->getDonneeComplementaireObligatoire(),
            $keys[254] => $this->getModeOuvertureReponse(),
            $keys[255] => $this->getIdFichierAnnulation(),
            $keys[256] => $this->getIdoperation(),
            $keys[257] => $this->getMarchePublicSimplifie(),
            $keys[258] => $this->getInfosBlocsAtlas(),
            $keys[259] => $this->getDateFinUnix(),
            $keys[260] => $this->getDateAchevement(),
            $keys[261] => $this->getNombreDeLots(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->collCommonAVISs) {
                $result['CommonAVISs'] = $this->collCommonAVISs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonAnnonces) {
                $result['CommonAnnonces'] = $this->collCommonAnnonces->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef) {
                $result['CommonAnnonceBoampsRelatedByOrganismeConsultationRef'] = $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonAnnonceBoampsRelatedByConsultationRef) {
                $result['CommonAnnonceBoampsRelatedByConsultationRef'] = $this->collCommonAnnonceBoampsRelatedByConsultationRef->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonAvisPubs) {
                $result['CommonAvisPubs'] = $this->collCommonAvisPubs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonCategorieLots) {
                $result['CommonCategorieLots'] = $this->collCommonCategorieLots->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonComplements) {
                $result['CommonComplements'] = $this->collCommonComplements->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonConsultationHistoriqueEtats) {
                $result['CommonConsultationHistoriqueEtats'] = $this->collCommonConsultationHistoriqueEtats->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonDATEFINs) {
                $result['CommonDATEFINs'] = $this->collCommonDATEFINs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonDAConsultations) {
                $result['CommonDAConsultations'] = $this->collCommonDAConsultations->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonDCEs) {
                $result['CommonDCEs'] = $this->collCommonDCEs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonDocumentExternes) {
                $result['CommonDocumentExternes'] = $this->collCommonDocumentExternes->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonHeliosPiecePublicites) {
                $result['CommonHeliosPiecePublicites'] = $this->collCommonHeliosPiecePublicites->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonHeliosPvConsultations) {
                $result['CommonHeliosPvConsultations'] = $this->collCommonHeliosPvConsultations->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonHeliosRapportPrefets) {
                $result['CommonHeliosRapportPrefets'] = $this->collCommonHeliosRapportPrefets->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonHeliosTableauArs) {
                $result['CommonHeliosTableauArs'] = $this->collCommonHeliosTableauArs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonHeliosTeletransmissions) {
                $result['CommonHeliosTeletransmissions'] = $this->collCommonHeliosTeletransmissions->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonInterneConsultations) {
                $result['CommonInterneConsultations'] = $this->collCommonInterneConsultations->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonInterneConsultationSuiviSeuls) {
                $result['CommonInterneConsultationSuiviSeuls'] = $this->collCommonInterneConsultationSuiviSeuls->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonOffrePapiers) {
                $result['CommonOffrePapiers'] = $this->collCommonOffrePapiers->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonOffress) {
                $result['CommonOffress'] = $this->collCommonOffress->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonPanierEntreprises) {
                $result['CommonPanierEntreprises'] = $this->collCommonPanierEntreprises->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonPiecesDCEsRelatedByRefConsultation) {
                $result['CommonPiecesDCEsRelatedByRefConsultation'] = $this->collCommonPiecesDCEsRelatedByRefConsultation->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonPiecesDCEsRelatedByOrganismeConsultation) {
                $result['CommonPiecesDCEsRelatedByOrganismeConsultation'] = $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonRGs) {
                $result['CommonRGs'] = $this->collCommonRGs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonRetraitPapiers) {
                $result['CommonRetraitPapiers'] = $this->collCommonRetraitPapiers->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonSupportPublications) {
                $result['CommonSupportPublications'] = $this->collCommonSupportPublications->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonTelechargements) {
                $result['CommonTelechargements'] = $this->collCommonTelechargements->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef) {
                $result['CommonTelechargementAnonymesRelatedByOrganismeConsultationRef'] = $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonTelechargementAnonymesRelatedByConsultationRef) {
                $result['CommonTelechargementAnonymesRelatedByConsultationRef'] = $this->collCommonTelechargementAnonymesRelatedByConsultationRef->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonConsultationDocumentCfes) {
                $result['CommonConsultationDocumentCfes'] = $this->collCommonConsultationDocumentCfes->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonTCalendriers) {
                $result['CommonTCalendriers'] = $this->collCommonTCalendriers->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonTParamDossierFormulaires) {
                $result['CommonTParamDossierFormulaires'] = $this->collCommonTParamDossierFormulaires->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonTReponseElecFormulaires) {
                $result['CommonTReponseElecFormulaires'] = $this->collCommonTReponseElecFormulaires->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collCommonVisiteLieuxs) {
                $result['CommonVisiteLieuxs'] = $this->collCommonVisiteLieuxs->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = CommonConsultationPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setReference($value);
                break;
            case 1:
                $this->setOrganisme($value);
                break;
            case 2:
                $this->setReferenceUtilisateur($value);
                break;
            case 3:
                $this->setCategorie($value);
                break;
            case 4:
                $this->setTitre($value);
                break;
            case 5:
                $this->setResume($value);
                break;
            case 6:
                $this->setDatedebut($value);
                break;
            case 7:
                $this->setDatefin($value);
                break;
            case 8:
                $this->setDatevalidation($value);
                break;
            case 9:
                $this->setTypeProcedure($value);
                break;
            case 10:
                $this->setCodeProcedure($value);
                break;
            case 11:
                $this->setReponseElectronique($value);
                break;
            case 12:
                $this->setNumProcedure($value);
                break;
            case 13:
                $this->setIdTypeProcedure($value);
                break;
            case 14:
                $this->setIdTypeAvis($value);
                break;
            case 15:
                $this->setLieuExecution($value);
                break;
            case 16:
                $this->setTypeMiseEnLigne($value);
                break;
            case 17:
                $this->setDatemiseenligne($value);
                break;
            case 18:
                $this->setIsTiersAvis($value);
                break;
            case 19:
                $this->setUrl($value);
                break;
            case 20:
                $this->setDatefinSad($value);
                break;
            case 21:
                $this->setIsSysAcqDyn($value);
                break;
            case 22:
                $this->setReferenceConsultationInit($value);
                break;
            case 23:
                $this->setSignatureOffre($value);
                break;
            case 24:
                $this->setIdTypeValidation($value);
                break;
            case 25:
                $this->setEtatApprobation($value);
                break;
            case 26:
                $this->setEtatValidation($value);
                break;
            case 27:
                $this->setChampSuppInvisible($value);
                break;
            case 28:
                $this->setCodeCpv1($value);
                break;
            case 29:
                $this->setCodeCpv2($value);
                break;
            case 30:
                $this->setPublicationEurope($value);
                break;
            case 31:
                $this->setEtatPublication($value);
                break;
            case 32:
                $this->setPoursuivreAffichage($value);
                break;
            case 33:
                $this->setNbrTelechargementDce($value);
                break;
            case 34:
                $this->setServiceId($value);
                break;
            case 35:
                $this->setServiceAssocieId($value);
                break;
            case 36:
                $this->setDetailConsultation($value);
                break;
            case 37:
                $this->setDateFinAffichage($value);
                break;
            case 38:
                $this->setDepouillablePhaseConsultation($value);
                break;
            case 39:
                $this->setConsultationTransverse($value);
                break;
            case 40:
                $this->setConsultationAchatPublique($value);
                break;
            case 41:
                $this->setUrlConsultationAchatPublique($value);
                break;
            case 42:
                $this->setPartialDceDownload($value);
                break;
            case 43:
                $this->setTiragePlan($value);
                break;
            case 44:
                $this->setTireurPlan($value);
                break;
            case 45:
                $this->setDateMiseEnLigneCalcule($value);
                break;
            case 46:
                $this->setAccessibiliteEn($value);
                break;
            case 47:
                $this->setAccessibiliteEs($value);
                break;
            case 48:
                $this->setNbrReponse($value);
                break;
            case 49:
                $this->setIdTypeProcedureOrg($value);
                break;
            case 50:
                $this->setOrganismeConsultationInit($value);
                break;
            case 51:
                $this->setTirageDescriptif($value);
                break;
            case 52:
                $this->setDateValidationIntermediaire($value);
                break;
            case 53:
                $this->setAccessibiliteFr($value);
                break;
            case 54:
                $this->setIdTrAccessibilite($value);
                break;
            case 55:
                $this->setAccessibiliteCz($value);
                break;
            case 56:
                $this->setAccessibiliteDu($value);
                break;
            case 57:
                $this->setAccessibiliteSu($value);
                break;
            case 58:
                $this->setAccessibiliteAr($value);
                break;
            case 59:
                $this->setAlloti($value);
                break;
            case 60:
                $this->setNumeroPhase($value);
                break;
            case 61:
                $this->setConsultationExterne($value);
                break;
            case 62:
                $this->setUrlConsultationExterne($value);
                break;
            case 63:
                $this->setOrgDenomination($value);
                break;
            case 64:
                $this->setDomainesActivites($value);
                break;
            case 65:
                $this->setIdAffaire($value);
                break;
            case 66:
                $this->setAdresseRetraisDossiers($value);
                break;
            case 67:
                $this->setCautionProvisoire($value);
                break;
            case 68:
                $this->setAdresseDepotOffres($value);
                break;
            case 69:
                $this->setLieuOuverturePlis($value);
                break;
            case 70:
                $this->setPrixAquisitionPlans($value);
                break;
            case 71:
                $this->setQualification($value);
                break;
            case 72:
                $this->setAgrements($value);
                break;
            case 73:
                $this->setAddEchantillion($value);
                break;
            case 74:
                $this->setDateLimiteEchantillion($value);
                break;
            case 75:
                $this->setAddReunion($value);
                break;
            case 76:
                $this->setDateReunion($value);
                break;
            case 77:
                $this->setVariantes($value);
                break;
            case 78:
                $this->setAdresseRetraisDossiersAr($value);
                break;
            case 79:
                $this->setAdresseDepotOffresAr($value);
                break;
            case 80:
                $this->setLieuOuverturePlisAr($value);
                break;
            case 81:
                $this->setPiecesDossierAdmin($value);
                break;
            case 82:
                $this->setPiecesDossierAdminFr($value);
                break;
            case 83:
                $this->setPiecesDossierAdminEn($value);
                break;
            case 84:
                $this->setPiecesDossierAdminEs($value);
                break;
            case 85:
                $this->setPiecesDossierAdminSu($value);
                break;
            case 86:
                $this->setPiecesDossierAdminDu($value);
                break;
            case 87:
                $this->setPiecesDossierAdminCz($value);
                break;
            case 88:
                $this->setPiecesDossierAdminAr($value);
                break;
            case 89:
                $this->setPiecesDossierTech($value);
                break;
            case 90:
                $this->setPiecesDossierTechFr($value);
                break;
            case 91:
                $this->setPiecesDossierTechEn($value);
                break;
            case 92:
                $this->setPiecesDossierTechEs($value);
                break;
            case 93:
                $this->setPiecesDossierTechSu($value);
                break;
            case 94:
                $this->setPiecesDossierTechDu($value);
                break;
            case 95:
                $this->setPiecesDossierTechCz($value);
                break;
            case 96:
                $this->setPiecesDossierTechAr($value);
                break;
            case 97:
                $this->setPiecesDossierAdditif($value);
                break;
            case 98:
                $this->setPiecesDossierAdditifFr($value);
                break;
            case 99:
                $this->setPiecesDossierAdditifEn($value);
                break;
            case 100:
                $this->setPiecesDossierAdditifEs($value);
                break;
            case 101:
                $this->setPiecesDossierAdditifSu($value);
                break;
            case 102:
                $this->setPiecesDossierAdditifDu($value);
                break;
            case 103:
                $this->setPiecesDossierAdditifCz($value);
                break;
            case 104:
                $this->setPiecesDossierAdditifAr($value);
                break;
            case 105:
                $this->setIdRpa($value);
                break;
            case 106:
                $this->setDetailConsultationFr($value);
                break;
            case 107:
                $this->setDetailConsultationEn($value);
                break;
            case 108:
                $this->setDetailConsultationEs($value);
                break;
            case 109:
                $this->setDetailConsultationSu($value);
                break;
            case 110:
                $this->setDetailConsultationDu($value);
                break;
            case 111:
                $this->setDetailConsultationCz($value);
                break;
            case 112:
                $this->setDetailConsultationAr($value);
                break;
            case 113:
                $this->setEchantillon($value);
                break;
            case 114:
                $this->setReunion($value);
                break;
            case 115:
                $this->setVisitesLieux($value);
                break;
            case 116:
                $this->setVarianteCalcule($value);
                break;
            case 117:
                $this->setAdresseRetraisDossiersFr($value);
                break;
            case 118:
                $this->setAdresseRetraisDossiersEn($value);
                break;
            case 119:
                $this->setAdresseRetraisDossiersEs($value);
                break;
            case 120:
                $this->setAdresseRetraisDossiersSu($value);
                break;
            case 121:
                $this->setAdresseRetraisDossiersDu($value);
                break;
            case 122:
                $this->setAdresseRetraisDossiersCz($value);
                break;
            case 123:
                $this->setAdresseDepotOffresFr($value);
                break;
            case 124:
                $this->setAdresseDepotOffresEn($value);
                break;
            case 125:
                $this->setAdresseDepotOffresEs($value);
                break;
            case 126:
                $this->setAdresseDepotOffresSu($value);
                break;
            case 127:
                $this->setAdresseDepotOffresDu($value);
                break;
            case 128:
                $this->setAdresseDepotOffresCz($value);
                break;
            case 129:
                $this->setLieuOuverturePlisFr($value);
                break;
            case 130:
                $this->setLieuOuverturePlisEn($value);
                break;
            case 131:
                $this->setLieuOuverturePlisEs($value);
                break;
            case 132:
                $this->setLieuOuverturePlisSu($value);
                break;
            case 133:
                $this->setLieuOuverturePlisDu($value);
                break;
            case 134:
                $this->setLieuOuverturePlisCz($value);
                break;
            case 135:
                $this->setAddEchantillionFr($value);
                break;
            case 136:
                $this->setAddEchantillionEn($value);
                break;
            case 137:
                $this->setAddEchantillionEs($value);
                break;
            case 138:
                $this->setAddEchantillionSu($value);
                break;
            case 139:
                $this->setAddEchantillionDu($value);
                break;
            case 140:
                $this->setAddEchantillionCz($value);
                break;
            case 141:
                $this->setAddEchantillionAr($value);
                break;
            case 142:
                $this->setAddReunionFr($value);
                break;
            case 143:
                $this->setAddReunionEn($value);
                break;
            case 144:
                $this->setAddReunionEs($value);
                break;
            case 145:
                $this->setAddReunionSu($value);
                break;
            case 146:
                $this->setAddReunionDu($value);
                break;
            case 147:
                $this->setAddReunionCz($value);
                break;
            case 148:
                $this->setAddReunionAr($value);
                break;
            case 149:
                $this->setModePassation($value);
                break;
            case 150:
                $this->setConsultationAnnulee($value);
                break;
            case 151:
                $this->setCompteBoampAssocie($value);
                break;
            case 152:
                $this->setAccessibiliteIt($value);
                break;
            case 153:
                $this->setAdresseDepotOffresIt($value);
                break;
            case 154:
                $this->setLieuOuverturePlisIt($value);
                break;
            case 155:
                $this->setAdresseRetraisDossiersIt($value);
                break;
            case 156:
                $this->setPiecesDossierAdminIt($value);
                break;
            case 157:
                $this->setPiecesDossierTechIt($value);
                break;
            case 158:
                $this->setPiecesDossierAdditifIt($value);
                break;
            case 159:
                $this->setDetailConsultationIt($value);
                break;
            case 160:
                $this->setAddEchantillionIt($value);
                break;
            case 161:
                $this->setAddReunionIt($value);
                break;
            case 162:
                $this->setCodesNuts($value);
                break;
            case 163:
                $this->setIntitule($value);
                break;
            case 164:
                $this->setIdTrIntitule($value);
                break;
            case 165:
                $this->setObjet($value);
                break;
            case 166:
                $this->setIdTrObjet($value);
                break;
            case 167:
                $this->setDateDecision($value);
                break;
            case 168:
                $this->setTypeAcces($value);
                break;
            case 169:
                $this->setAutoriserReponseElectronique($value);
                break;
            case 170:
                $this->setRegleMiseEnLigne($value);
                break;
            case 171:
                $this->setIdRegleValidation($value);
                break;
            case 172:
                $this->setIntituleFr($value);
                break;
            case 173:
                $this->setIntituleEn($value);
                break;
            case 174:
                $this->setIntituleEs($value);
                break;
            case 175:
                $this->setIntituleSu($value);
                break;
            case 176:
                $this->setIntituleDu($value);
                break;
            case 177:
                $this->setIntituleCz($value);
                break;
            case 178:
                $this->setIntituleAr($value);
                break;
            case 179:
                $this->setIntituleIt($value);
                break;
            case 180:
                $this->setObjetFr($value);
                break;
            case 181:
                $this->setObjetEn($value);
                break;
            case 182:
                $this->setObjetEs($value);
                break;
            case 183:
                $this->setObjetSu($value);
                break;
            case 184:
                $this->setObjetDu($value);
                break;
            case 185:
                $this->setObjetCz($value);
                break;
            case 186:
                $this->setObjetAr($value);
                break;
            case 187:
                $this->setObjetIt($value);
                break;
            case 188:
                $this->setClauseSociale($value);
                break;
            case 189:
                $this->setClauseEnvironnementale($value);
                break;
            case 190:
                $this->setReponseObligatoire($value);
                break;
            case 191:
                $this->setAutoriserPublicite($value);
                break;
            case 192:
                $this->setTypeEnvoi($value);
                break;
            case 193:
                $this->setChiffrementOffre($value);
                break;
            case 194:
                $this->setEnvCandidature($value);
                break;
            case 195:
                $this->setEnvOffre($value);
                break;
            case 196:
                $this->setEnvAnonymat($value);
                break;
            case 197:
                $this->setIdEtatConsultation($value);
                break;
            case 198:
                $this->setReferenceConnecteur($value);
                break;
            case 199:
                $this->setConsStatut($value);
                break;
            case 200:
                $this->setIdApprobateur($value);
                break;
            case 201:
                $this->setIdValideur($value);
                break;
            case 202:
                $this->setServiceValidation($value);
                break;
            case 203:
                $this->setIdCreateur($value);
                break;
            case 204:
                $this->setNomCreateur($value);
                break;
            case 205:
                $this->setPrenomCreateur($value);
                break;
            case 206:
                $this->setSignatureActeEngagement($value);
                break;
            case 207:
                $this->setArchivemetadescription($value);
                break;
            case 208:
                $this->setArchivemetamotsclef($value);
                break;
            case 209:
                $this->setArchiveidblobzip($value);
                break;
            case 210:
                $this->setDecisionPartielle($value);
                break;
            case 211:
                $this->setTypeDecisionARenseigner($value);
                break;
            case 212:
                $this->setTypeDecisionAttributionMarche($value);
                break;
            case 213:
                $this->setTypeDecisionDeclarationSansSuite($value);
                break;
            case 214:
                $this->setTypeDecisionDeclarationInfructueux($value);
                break;
            case 215:
                $this->setTypeDecisionSelectionEntreprise($value);
                break;
            case 216:
                $this->setTypeDecisionAttributionAccordCadre($value);
                break;
            case 217:
                $this->setTypeDecisionAdmissionSad($value);
                break;
            case 218:
                $this->setTypeDecisionAutre($value);
                break;
            case 219:
                $this->setIdArchiveur($value);
                break;
            case 220:
                $this->setPrenomNomAgentTelechargementPlis($value);
                break;
            case 221:
                $this->setIdAgentTelechargementPlis($value);
                break;
            case 222:
                $this->setPathTelechargementPlis($value);
                break;
            case 223:
                $this->setDateTelechargementPlis($value);
                break;
            case 224:
                $this->setServiceValidationIntermediaire($value);
                break;
            case 225:
                $this->setEnvOffreTechnique($value);
                break;
            case 226:
                $this->setRefOrgPartenaire($value);
                break;
            case 227:
                $this->setDateArchivage($value);
                break;
            case 228:
                $this->setDateDecisionAnnulation($value);
                break;
            case 229:
                $this->setCommentaireAnnulation($value);
                break;
            case 230:
                $this->setDateMiseEnLigneSouhaitee($value);
                break;
            case 231:
                $this->setEtatEnAttenteValidation($value);
                break;
            case 232:
                $this->setDossierAdditif($value);
                break;
            case 233:
                $this->setTypeMarche($value);
                break;
            case 234:
                $this->setTypePrestation($value);
                break;
            case 235:
                $this->setDateModification($value);
                break;
            case 236:
                $this->setDelaiPartiel($value);
                break;
            case 237:
                $this->setDatefinlocale($value);
                break;
            case 238:
                $this->setLieuresidence($value);
                break;
            case 239:
                $this->setAlerte($value);
                break;
            case 240:
                $this->setDoublon($value);
                break;
            case 241:
                $this->setDenominationAdapte($value);
                break;
            case 242:
                $this->setUrlConsultationAvisPub($value);
                break;
            case 243:
                $this->setDoublonDe($value);
                break;
            case 244:
                $this->setEntiteAdjudicatrice($value);
                break;
            case 245:
                $this->setCodeOperation($value);
                break;
            case 246:
                $this->setClauseSocialeConditionExecution($value);
                break;
            case 247:
                $this->setClauseSocialeInsertion($value);
                break;
            case 248:
                $this->setClauseSocialeAteliersProteges($value);
                break;
            case 249:
                $this->setClauseEnvSpecsTechniques($value);
                break;
            case 250:
                $this->setClauseEnvCondExecution($value);
                break;
            case 251:
                $this->setClauseEnvCriteresSelect($value);
                break;
            case 252:
                $this->setIdDonneeComplementaire($value);
                break;
            case 253:
                $this->setDonneeComplementaireObligatoire($value);
                break;
            case 254:
                $this->setModeOuvertureReponse($value);
                break;
            case 255:
                $this->setIdFichierAnnulation($value);
                break;
            case 256:
                $this->setIdoperation($value);
                break;
            case 257:
                $this->setMarchePublicSimplifie($value);
                break;
            case 258:
                $this->setInfosBlocsAtlas($value);
                break;
            case 259:
                $this->setDateFinUnix($value);
                break;
            case 260:
                $this->setDateAchevement($value);
                break;
            case 261:
                $this->setNombreDeLots($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = CommonConsultationPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setReference($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setOrganisme($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setReferenceUtilisateur($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setCategorie($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setTitre($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setResume($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setDatedebut($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setDatefin($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setDatevalidation($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setTypeProcedure($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setCodeProcedure($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setReponseElectronique($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setNumProcedure($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setIdTypeProcedure($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setIdTypeAvis($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setLieuExecution($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setTypeMiseEnLigne($arr[$keys[16]]);
        if (array_key_exists($keys[17], $arr)) $this->setDatemiseenligne($arr[$keys[17]]);
        if (array_key_exists($keys[18], $arr)) $this->setIsTiersAvis($arr[$keys[18]]);
        if (array_key_exists($keys[19], $arr)) $this->setUrl($arr[$keys[19]]);
        if (array_key_exists($keys[20], $arr)) $this->setDatefinSad($arr[$keys[20]]);
        if (array_key_exists($keys[21], $arr)) $this->setIsSysAcqDyn($arr[$keys[21]]);
        if (array_key_exists($keys[22], $arr)) $this->setReferenceConsultationInit($arr[$keys[22]]);
        if (array_key_exists($keys[23], $arr)) $this->setSignatureOffre($arr[$keys[23]]);
        if (array_key_exists($keys[24], $arr)) $this->setIdTypeValidation($arr[$keys[24]]);
        if (array_key_exists($keys[25], $arr)) $this->setEtatApprobation($arr[$keys[25]]);
        if (array_key_exists($keys[26], $arr)) $this->setEtatValidation($arr[$keys[26]]);
        if (array_key_exists($keys[27], $arr)) $this->setChampSuppInvisible($arr[$keys[27]]);
        if (array_key_exists($keys[28], $arr)) $this->setCodeCpv1($arr[$keys[28]]);
        if (array_key_exists($keys[29], $arr)) $this->setCodeCpv2($arr[$keys[29]]);
        if (array_key_exists($keys[30], $arr)) $this->setPublicationEurope($arr[$keys[30]]);
        if (array_key_exists($keys[31], $arr)) $this->setEtatPublication($arr[$keys[31]]);
        if (array_key_exists($keys[32], $arr)) $this->setPoursuivreAffichage($arr[$keys[32]]);
        if (array_key_exists($keys[33], $arr)) $this->setNbrTelechargementDce($arr[$keys[33]]);
        if (array_key_exists($keys[34], $arr)) $this->setServiceId($arr[$keys[34]]);
        if (array_key_exists($keys[35], $arr)) $this->setServiceAssocieId($arr[$keys[35]]);
        if (array_key_exists($keys[36], $arr)) $this->setDetailConsultation($arr[$keys[36]]);
        if (array_key_exists($keys[37], $arr)) $this->setDateFinAffichage($arr[$keys[37]]);
        if (array_key_exists($keys[38], $arr)) $this->setDepouillablePhaseConsultation($arr[$keys[38]]);
        if (array_key_exists($keys[39], $arr)) $this->setConsultationTransverse($arr[$keys[39]]);
        if (array_key_exists($keys[40], $arr)) $this->setConsultationAchatPublique($arr[$keys[40]]);
        if (array_key_exists($keys[41], $arr)) $this->setUrlConsultationAchatPublique($arr[$keys[41]]);
        if (array_key_exists($keys[42], $arr)) $this->setPartialDceDownload($arr[$keys[42]]);
        if (array_key_exists($keys[43], $arr)) $this->setTiragePlan($arr[$keys[43]]);
        if (array_key_exists($keys[44], $arr)) $this->setTireurPlan($arr[$keys[44]]);
        if (array_key_exists($keys[45], $arr)) $this->setDateMiseEnLigneCalcule($arr[$keys[45]]);
        if (array_key_exists($keys[46], $arr)) $this->setAccessibiliteEn($arr[$keys[46]]);
        if (array_key_exists($keys[47], $arr)) $this->setAccessibiliteEs($arr[$keys[47]]);
        if (array_key_exists($keys[48], $arr)) $this->setNbrReponse($arr[$keys[48]]);
        if (array_key_exists($keys[49], $arr)) $this->setIdTypeProcedureOrg($arr[$keys[49]]);
        if (array_key_exists($keys[50], $arr)) $this->setOrganismeConsultationInit($arr[$keys[50]]);
        if (array_key_exists($keys[51], $arr)) $this->setTirageDescriptif($arr[$keys[51]]);
        if (array_key_exists($keys[52], $arr)) $this->setDateValidationIntermediaire($arr[$keys[52]]);
        if (array_key_exists($keys[53], $arr)) $this->setAccessibiliteFr($arr[$keys[53]]);
        if (array_key_exists($keys[54], $arr)) $this->setIdTrAccessibilite($arr[$keys[54]]);
        if (array_key_exists($keys[55], $arr)) $this->setAccessibiliteCz($arr[$keys[55]]);
        if (array_key_exists($keys[56], $arr)) $this->setAccessibiliteDu($arr[$keys[56]]);
        if (array_key_exists($keys[57], $arr)) $this->setAccessibiliteSu($arr[$keys[57]]);
        if (array_key_exists($keys[58], $arr)) $this->setAccessibiliteAr($arr[$keys[58]]);
        if (array_key_exists($keys[59], $arr)) $this->setAlloti($arr[$keys[59]]);
        if (array_key_exists($keys[60], $arr)) $this->setNumeroPhase($arr[$keys[60]]);
        if (array_key_exists($keys[61], $arr)) $this->setConsultationExterne($arr[$keys[61]]);
        if (array_key_exists($keys[62], $arr)) $this->setUrlConsultationExterne($arr[$keys[62]]);
        if (array_key_exists($keys[63], $arr)) $this->setOrgDenomination($arr[$keys[63]]);
        if (array_key_exists($keys[64], $arr)) $this->setDomainesActivites($arr[$keys[64]]);
        if (array_key_exists($keys[65], $arr)) $this->setIdAffaire($arr[$keys[65]]);
        if (array_key_exists($keys[66], $arr)) $this->setAdresseRetraisDossiers($arr[$keys[66]]);
        if (array_key_exists($keys[67], $arr)) $this->setCautionProvisoire($arr[$keys[67]]);
        if (array_key_exists($keys[68], $arr)) $this->setAdresseDepotOffres($arr[$keys[68]]);
        if (array_key_exists($keys[69], $arr)) $this->setLieuOuverturePlis($arr[$keys[69]]);
        if (array_key_exists($keys[70], $arr)) $this->setPrixAquisitionPlans($arr[$keys[70]]);
        if (array_key_exists($keys[71], $arr)) $this->setQualification($arr[$keys[71]]);
        if (array_key_exists($keys[72], $arr)) $this->setAgrements($arr[$keys[72]]);
        if (array_key_exists($keys[73], $arr)) $this->setAddEchantillion($arr[$keys[73]]);
        if (array_key_exists($keys[74], $arr)) $this->setDateLimiteEchantillion($arr[$keys[74]]);
        if (array_key_exists($keys[75], $arr)) $this->setAddReunion($arr[$keys[75]]);
        if (array_key_exists($keys[76], $arr)) $this->setDateReunion($arr[$keys[76]]);
        if (array_key_exists($keys[77], $arr)) $this->setVariantes($arr[$keys[77]]);
        if (array_key_exists($keys[78], $arr)) $this->setAdresseRetraisDossiersAr($arr[$keys[78]]);
        if (array_key_exists($keys[79], $arr)) $this->setAdresseDepotOffresAr($arr[$keys[79]]);
        if (array_key_exists($keys[80], $arr)) $this->setLieuOuverturePlisAr($arr[$keys[80]]);
        if (array_key_exists($keys[81], $arr)) $this->setPiecesDossierAdmin($arr[$keys[81]]);
        if (array_key_exists($keys[82], $arr)) $this->setPiecesDossierAdminFr($arr[$keys[82]]);
        if (array_key_exists($keys[83], $arr)) $this->setPiecesDossierAdminEn($arr[$keys[83]]);
        if (array_key_exists($keys[84], $arr)) $this->setPiecesDossierAdminEs($arr[$keys[84]]);
        if (array_key_exists($keys[85], $arr)) $this->setPiecesDossierAdminSu($arr[$keys[85]]);
        if (array_key_exists($keys[86], $arr)) $this->setPiecesDossierAdminDu($arr[$keys[86]]);
        if (array_key_exists($keys[87], $arr)) $this->setPiecesDossierAdminCz($arr[$keys[87]]);
        if (array_key_exists($keys[88], $arr)) $this->setPiecesDossierAdminAr($arr[$keys[88]]);
        if (array_key_exists($keys[89], $arr)) $this->setPiecesDossierTech($arr[$keys[89]]);
        if (array_key_exists($keys[90], $arr)) $this->setPiecesDossierTechFr($arr[$keys[90]]);
        if (array_key_exists($keys[91], $arr)) $this->setPiecesDossierTechEn($arr[$keys[91]]);
        if (array_key_exists($keys[92], $arr)) $this->setPiecesDossierTechEs($arr[$keys[92]]);
        if (array_key_exists($keys[93], $arr)) $this->setPiecesDossierTechSu($arr[$keys[93]]);
        if (array_key_exists($keys[94], $arr)) $this->setPiecesDossierTechDu($arr[$keys[94]]);
        if (array_key_exists($keys[95], $arr)) $this->setPiecesDossierTechCz($arr[$keys[95]]);
        if (array_key_exists($keys[96], $arr)) $this->setPiecesDossierTechAr($arr[$keys[96]]);
        if (array_key_exists($keys[97], $arr)) $this->setPiecesDossierAdditif($arr[$keys[97]]);
        if (array_key_exists($keys[98], $arr)) $this->setPiecesDossierAdditifFr($arr[$keys[98]]);
        if (array_key_exists($keys[99], $arr)) $this->setPiecesDossierAdditifEn($arr[$keys[99]]);
        if (array_key_exists($keys[100], $arr)) $this->setPiecesDossierAdditifEs($arr[$keys[100]]);
        if (array_key_exists($keys[101], $arr)) $this->setPiecesDossierAdditifSu($arr[$keys[101]]);
        if (array_key_exists($keys[102], $arr)) $this->setPiecesDossierAdditifDu($arr[$keys[102]]);
        if (array_key_exists($keys[103], $arr)) $this->setPiecesDossierAdditifCz($arr[$keys[103]]);
        if (array_key_exists($keys[104], $arr)) $this->setPiecesDossierAdditifAr($arr[$keys[104]]);
        if (array_key_exists($keys[105], $arr)) $this->setIdRpa($arr[$keys[105]]);
        if (array_key_exists($keys[106], $arr)) $this->setDetailConsultationFr($arr[$keys[106]]);
        if (array_key_exists($keys[107], $arr)) $this->setDetailConsultationEn($arr[$keys[107]]);
        if (array_key_exists($keys[108], $arr)) $this->setDetailConsultationEs($arr[$keys[108]]);
        if (array_key_exists($keys[109], $arr)) $this->setDetailConsultationSu($arr[$keys[109]]);
        if (array_key_exists($keys[110], $arr)) $this->setDetailConsultationDu($arr[$keys[110]]);
        if (array_key_exists($keys[111], $arr)) $this->setDetailConsultationCz($arr[$keys[111]]);
        if (array_key_exists($keys[112], $arr)) $this->setDetailConsultationAr($arr[$keys[112]]);
        if (array_key_exists($keys[113], $arr)) $this->setEchantillon($arr[$keys[113]]);
        if (array_key_exists($keys[114], $arr)) $this->setReunion($arr[$keys[114]]);
        if (array_key_exists($keys[115], $arr)) $this->setVisitesLieux($arr[$keys[115]]);
        if (array_key_exists($keys[116], $arr)) $this->setVarianteCalcule($arr[$keys[116]]);
        if (array_key_exists($keys[117], $arr)) $this->setAdresseRetraisDossiersFr($arr[$keys[117]]);
        if (array_key_exists($keys[118], $arr)) $this->setAdresseRetraisDossiersEn($arr[$keys[118]]);
        if (array_key_exists($keys[119], $arr)) $this->setAdresseRetraisDossiersEs($arr[$keys[119]]);
        if (array_key_exists($keys[120], $arr)) $this->setAdresseRetraisDossiersSu($arr[$keys[120]]);
        if (array_key_exists($keys[121], $arr)) $this->setAdresseRetraisDossiersDu($arr[$keys[121]]);
        if (array_key_exists($keys[122], $arr)) $this->setAdresseRetraisDossiersCz($arr[$keys[122]]);
        if (array_key_exists($keys[123], $arr)) $this->setAdresseDepotOffresFr($arr[$keys[123]]);
        if (array_key_exists($keys[124], $arr)) $this->setAdresseDepotOffresEn($arr[$keys[124]]);
        if (array_key_exists($keys[125], $arr)) $this->setAdresseDepotOffresEs($arr[$keys[125]]);
        if (array_key_exists($keys[126], $arr)) $this->setAdresseDepotOffresSu($arr[$keys[126]]);
        if (array_key_exists($keys[127], $arr)) $this->setAdresseDepotOffresDu($arr[$keys[127]]);
        if (array_key_exists($keys[128], $arr)) $this->setAdresseDepotOffresCz($arr[$keys[128]]);
        if (array_key_exists($keys[129], $arr)) $this->setLieuOuverturePlisFr($arr[$keys[129]]);
        if (array_key_exists($keys[130], $arr)) $this->setLieuOuverturePlisEn($arr[$keys[130]]);
        if (array_key_exists($keys[131], $arr)) $this->setLieuOuverturePlisEs($arr[$keys[131]]);
        if (array_key_exists($keys[132], $arr)) $this->setLieuOuverturePlisSu($arr[$keys[132]]);
        if (array_key_exists($keys[133], $arr)) $this->setLieuOuverturePlisDu($arr[$keys[133]]);
        if (array_key_exists($keys[134], $arr)) $this->setLieuOuverturePlisCz($arr[$keys[134]]);
        if (array_key_exists($keys[135], $arr)) $this->setAddEchantillionFr($arr[$keys[135]]);
        if (array_key_exists($keys[136], $arr)) $this->setAddEchantillionEn($arr[$keys[136]]);
        if (array_key_exists($keys[137], $arr)) $this->setAddEchantillionEs($arr[$keys[137]]);
        if (array_key_exists($keys[138], $arr)) $this->setAddEchantillionSu($arr[$keys[138]]);
        if (array_key_exists($keys[139], $arr)) $this->setAddEchantillionDu($arr[$keys[139]]);
        if (array_key_exists($keys[140], $arr)) $this->setAddEchantillionCz($arr[$keys[140]]);
        if (array_key_exists($keys[141], $arr)) $this->setAddEchantillionAr($arr[$keys[141]]);
        if (array_key_exists($keys[142], $arr)) $this->setAddReunionFr($arr[$keys[142]]);
        if (array_key_exists($keys[143], $arr)) $this->setAddReunionEn($arr[$keys[143]]);
        if (array_key_exists($keys[144], $arr)) $this->setAddReunionEs($arr[$keys[144]]);
        if (array_key_exists($keys[145], $arr)) $this->setAddReunionSu($arr[$keys[145]]);
        if (array_key_exists($keys[146], $arr)) $this->setAddReunionDu($arr[$keys[146]]);
        if (array_key_exists($keys[147], $arr)) $this->setAddReunionCz($arr[$keys[147]]);
        if (array_key_exists($keys[148], $arr)) $this->setAddReunionAr($arr[$keys[148]]);
        if (array_key_exists($keys[149], $arr)) $this->setModePassation($arr[$keys[149]]);
        if (array_key_exists($keys[150], $arr)) $this->setConsultationAnnulee($arr[$keys[150]]);
        if (array_key_exists($keys[151], $arr)) $this->setCompteBoampAssocie($arr[$keys[151]]);
        if (array_key_exists($keys[152], $arr)) $this->setAccessibiliteIt($arr[$keys[152]]);
        if (array_key_exists($keys[153], $arr)) $this->setAdresseDepotOffresIt($arr[$keys[153]]);
        if (array_key_exists($keys[154], $arr)) $this->setLieuOuverturePlisIt($arr[$keys[154]]);
        if (array_key_exists($keys[155], $arr)) $this->setAdresseRetraisDossiersIt($arr[$keys[155]]);
        if (array_key_exists($keys[156], $arr)) $this->setPiecesDossierAdminIt($arr[$keys[156]]);
        if (array_key_exists($keys[157], $arr)) $this->setPiecesDossierTechIt($arr[$keys[157]]);
        if (array_key_exists($keys[158], $arr)) $this->setPiecesDossierAdditifIt($arr[$keys[158]]);
        if (array_key_exists($keys[159], $arr)) $this->setDetailConsultationIt($arr[$keys[159]]);
        if (array_key_exists($keys[160], $arr)) $this->setAddEchantillionIt($arr[$keys[160]]);
        if (array_key_exists($keys[161], $arr)) $this->setAddReunionIt($arr[$keys[161]]);
        if (array_key_exists($keys[162], $arr)) $this->setCodesNuts($arr[$keys[162]]);
        if (array_key_exists($keys[163], $arr)) $this->setIntitule($arr[$keys[163]]);
        if (array_key_exists($keys[164], $arr)) $this->setIdTrIntitule($arr[$keys[164]]);
        if (array_key_exists($keys[165], $arr)) $this->setObjet($arr[$keys[165]]);
        if (array_key_exists($keys[166], $arr)) $this->setIdTrObjet($arr[$keys[166]]);
        if (array_key_exists($keys[167], $arr)) $this->setDateDecision($arr[$keys[167]]);
        if (array_key_exists($keys[168], $arr)) $this->setTypeAcces($arr[$keys[168]]);
        if (array_key_exists($keys[169], $arr)) $this->setAutoriserReponseElectronique($arr[$keys[169]]);
        if (array_key_exists($keys[170], $arr)) $this->setRegleMiseEnLigne($arr[$keys[170]]);
        if (array_key_exists($keys[171], $arr)) $this->setIdRegleValidation($arr[$keys[171]]);
        if (array_key_exists($keys[172], $arr)) $this->setIntituleFr($arr[$keys[172]]);
        if (array_key_exists($keys[173], $arr)) $this->setIntituleEn($arr[$keys[173]]);
        if (array_key_exists($keys[174], $arr)) $this->setIntituleEs($arr[$keys[174]]);
        if (array_key_exists($keys[175], $arr)) $this->setIntituleSu($arr[$keys[175]]);
        if (array_key_exists($keys[176], $arr)) $this->setIntituleDu($arr[$keys[176]]);
        if (array_key_exists($keys[177], $arr)) $this->setIntituleCz($arr[$keys[177]]);
        if (array_key_exists($keys[178], $arr)) $this->setIntituleAr($arr[$keys[178]]);
        if (array_key_exists($keys[179], $arr)) $this->setIntituleIt($arr[$keys[179]]);
        if (array_key_exists($keys[180], $arr)) $this->setObjetFr($arr[$keys[180]]);
        if (array_key_exists($keys[181], $arr)) $this->setObjetEn($arr[$keys[181]]);
        if (array_key_exists($keys[182], $arr)) $this->setObjetEs($arr[$keys[182]]);
        if (array_key_exists($keys[183], $arr)) $this->setObjetSu($arr[$keys[183]]);
        if (array_key_exists($keys[184], $arr)) $this->setObjetDu($arr[$keys[184]]);
        if (array_key_exists($keys[185], $arr)) $this->setObjetCz($arr[$keys[185]]);
        if (array_key_exists($keys[186], $arr)) $this->setObjetAr($arr[$keys[186]]);
        if (array_key_exists($keys[187], $arr)) $this->setObjetIt($arr[$keys[187]]);
        if (array_key_exists($keys[188], $arr)) $this->setClauseSociale($arr[$keys[188]]);
        if (array_key_exists($keys[189], $arr)) $this->setClauseEnvironnementale($arr[$keys[189]]);
        if (array_key_exists($keys[190], $arr)) $this->setReponseObligatoire($arr[$keys[190]]);
        if (array_key_exists($keys[191], $arr)) $this->setAutoriserPublicite($arr[$keys[191]]);
        if (array_key_exists($keys[192], $arr)) $this->setTypeEnvoi($arr[$keys[192]]);
        if (array_key_exists($keys[193], $arr)) $this->setChiffrementOffre($arr[$keys[193]]);
        if (array_key_exists($keys[194], $arr)) $this->setEnvCandidature($arr[$keys[194]]);
        if (array_key_exists($keys[195], $arr)) $this->setEnvOffre($arr[$keys[195]]);
        if (array_key_exists($keys[196], $arr)) $this->setEnvAnonymat($arr[$keys[196]]);
        if (array_key_exists($keys[197], $arr)) $this->setIdEtatConsultation($arr[$keys[197]]);
        if (array_key_exists($keys[198], $arr)) $this->setReferenceConnecteur($arr[$keys[198]]);
        if (array_key_exists($keys[199], $arr)) $this->setConsStatut($arr[$keys[199]]);
        if (array_key_exists($keys[200], $arr)) $this->setIdApprobateur($arr[$keys[200]]);
        if (array_key_exists($keys[201], $arr)) $this->setIdValideur($arr[$keys[201]]);
        if (array_key_exists($keys[202], $arr)) $this->setServiceValidation($arr[$keys[202]]);
        if (array_key_exists($keys[203], $arr)) $this->setIdCreateur($arr[$keys[203]]);
        if (array_key_exists($keys[204], $arr)) $this->setNomCreateur($arr[$keys[204]]);
        if (array_key_exists($keys[205], $arr)) $this->setPrenomCreateur($arr[$keys[205]]);
        if (array_key_exists($keys[206], $arr)) $this->setSignatureActeEngagement($arr[$keys[206]]);
        if (array_key_exists($keys[207], $arr)) $this->setArchivemetadescription($arr[$keys[207]]);
        if (array_key_exists($keys[208], $arr)) $this->setArchivemetamotsclef($arr[$keys[208]]);
        if (array_key_exists($keys[209], $arr)) $this->setArchiveidblobzip($arr[$keys[209]]);
        if (array_key_exists($keys[210], $arr)) $this->setDecisionPartielle($arr[$keys[210]]);
        if (array_key_exists($keys[211], $arr)) $this->setTypeDecisionARenseigner($arr[$keys[211]]);
        if (array_key_exists($keys[212], $arr)) $this->setTypeDecisionAttributionMarche($arr[$keys[212]]);
        if (array_key_exists($keys[213], $arr)) $this->setTypeDecisionDeclarationSansSuite($arr[$keys[213]]);
        if (array_key_exists($keys[214], $arr)) $this->setTypeDecisionDeclarationInfructueux($arr[$keys[214]]);
        if (array_key_exists($keys[215], $arr)) $this->setTypeDecisionSelectionEntreprise($arr[$keys[215]]);
        if (array_key_exists($keys[216], $arr)) $this->setTypeDecisionAttributionAccordCadre($arr[$keys[216]]);
        if (array_key_exists($keys[217], $arr)) $this->setTypeDecisionAdmissionSad($arr[$keys[217]]);
        if (array_key_exists($keys[218], $arr)) $this->setTypeDecisionAutre($arr[$keys[218]]);
        if (array_key_exists($keys[219], $arr)) $this->setIdArchiveur($arr[$keys[219]]);
        if (array_key_exists($keys[220], $arr)) $this->setPrenomNomAgentTelechargementPlis($arr[$keys[220]]);
        if (array_key_exists($keys[221], $arr)) $this->setIdAgentTelechargementPlis($arr[$keys[221]]);
        if (array_key_exists($keys[222], $arr)) $this->setPathTelechargementPlis($arr[$keys[222]]);
        if (array_key_exists($keys[223], $arr)) $this->setDateTelechargementPlis($arr[$keys[223]]);
        if (array_key_exists($keys[224], $arr)) $this->setServiceValidationIntermediaire($arr[$keys[224]]);
        if (array_key_exists($keys[225], $arr)) $this->setEnvOffreTechnique($arr[$keys[225]]);
        if (array_key_exists($keys[226], $arr)) $this->setRefOrgPartenaire($arr[$keys[226]]);
        if (array_key_exists($keys[227], $arr)) $this->setDateArchivage($arr[$keys[227]]);
        if (array_key_exists($keys[228], $arr)) $this->setDateDecisionAnnulation($arr[$keys[228]]);
        if (array_key_exists($keys[229], $arr)) $this->setCommentaireAnnulation($arr[$keys[229]]);
        if (array_key_exists($keys[230], $arr)) $this->setDateMiseEnLigneSouhaitee($arr[$keys[230]]);
        if (array_key_exists($keys[231], $arr)) $this->setEtatEnAttenteValidation($arr[$keys[231]]);
        if (array_key_exists($keys[232], $arr)) $this->setDossierAdditif($arr[$keys[232]]);
        if (array_key_exists($keys[233], $arr)) $this->setTypeMarche($arr[$keys[233]]);
        if (array_key_exists($keys[234], $arr)) $this->setTypePrestation($arr[$keys[234]]);
        if (array_key_exists($keys[235], $arr)) $this->setDateModification($arr[$keys[235]]);
        if (array_key_exists($keys[236], $arr)) $this->setDelaiPartiel($arr[$keys[236]]);
        if (array_key_exists($keys[237], $arr)) $this->setDatefinlocale($arr[$keys[237]]);
        if (array_key_exists($keys[238], $arr)) $this->setLieuresidence($arr[$keys[238]]);
        if (array_key_exists($keys[239], $arr)) $this->setAlerte($arr[$keys[239]]);
        if (array_key_exists($keys[240], $arr)) $this->setDoublon($arr[$keys[240]]);
        if (array_key_exists($keys[241], $arr)) $this->setDenominationAdapte($arr[$keys[241]]);
        if (array_key_exists($keys[242], $arr)) $this->setUrlConsultationAvisPub($arr[$keys[242]]);
        if (array_key_exists($keys[243], $arr)) $this->setDoublonDe($arr[$keys[243]]);
        if (array_key_exists($keys[244], $arr)) $this->setEntiteAdjudicatrice($arr[$keys[244]]);
        if (array_key_exists($keys[245], $arr)) $this->setCodeOperation($arr[$keys[245]]);
        if (array_key_exists($keys[246], $arr)) $this->setClauseSocialeConditionExecution($arr[$keys[246]]);
        if (array_key_exists($keys[247], $arr)) $this->setClauseSocialeInsertion($arr[$keys[247]]);
        if (array_key_exists($keys[248], $arr)) $this->setClauseSocialeAteliersProteges($arr[$keys[248]]);
        if (array_key_exists($keys[249], $arr)) $this->setClauseEnvSpecsTechniques($arr[$keys[249]]);
        if (array_key_exists($keys[250], $arr)) $this->setClauseEnvCondExecution($arr[$keys[250]]);
        if (array_key_exists($keys[251], $arr)) $this->setClauseEnvCriteresSelect($arr[$keys[251]]);
        if (array_key_exists($keys[252], $arr)) $this->setIdDonneeComplementaire($arr[$keys[252]]);
        if (array_key_exists($keys[253], $arr)) $this->setDonneeComplementaireObligatoire($arr[$keys[253]]);
        if (array_key_exists($keys[254], $arr)) $this->setModeOuvertureReponse($arr[$keys[254]]);
        if (array_key_exists($keys[255], $arr)) $this->setIdFichierAnnulation($arr[$keys[255]]);
        if (array_key_exists($keys[256], $arr)) $this->setIdoperation($arr[$keys[256]]);
        if (array_key_exists($keys[257], $arr)) $this->setMarchePublicSimplifie($arr[$keys[257]]);
        if (array_key_exists($keys[258], $arr)) $this->setInfosBlocsAtlas($arr[$keys[258]]);
        if (array_key_exists($keys[259], $arr)) $this->setDateFinUnix($arr[$keys[259]]);
        if (array_key_exists($keys[260], $arr)) $this->setDateAchevement($arr[$keys[260]]);
        if (array_key_exists($keys[261], $arr)) $this->setNombreDeLots($arr[$keys[261]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(CommonConsultationPeer::DATABASE_NAME);

        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE)) $criteria->add(CommonConsultationPeer::REFERENCE, $this->reference);
        if ($this->isColumnModified(CommonConsultationPeer::ORGANISME)) $criteria->add(CommonConsultationPeer::ORGANISME, $this->organisme);
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE_UTILISATEUR)) $criteria->add(CommonConsultationPeer::REFERENCE_UTILISATEUR, $this->reference_utilisateur);
        if ($this->isColumnModified(CommonConsultationPeer::CATEGORIE)) $criteria->add(CommonConsultationPeer::CATEGORIE, $this->categorie);
        if ($this->isColumnModified(CommonConsultationPeer::TITRE)) $criteria->add(CommonConsultationPeer::TITRE, $this->titre);
        if ($this->isColumnModified(CommonConsultationPeer::RESUME)) $criteria->add(CommonConsultationPeer::RESUME, $this->resume);
        if ($this->isColumnModified(CommonConsultationPeer::DATEDEBUT)) $criteria->add(CommonConsultationPeer::DATEDEBUT, $this->datedebut);
        if ($this->isColumnModified(CommonConsultationPeer::DATEFIN)) $criteria->add(CommonConsultationPeer::DATEFIN, $this->datefin);
        if ($this->isColumnModified(CommonConsultationPeer::DATEVALIDATION)) $criteria->add(CommonConsultationPeer::DATEVALIDATION, $this->datevalidation);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_PROCEDURE)) $criteria->add(CommonConsultationPeer::TYPE_PROCEDURE, $this->type_procedure);
        if ($this->isColumnModified(CommonConsultationPeer::CODE_PROCEDURE)) $criteria->add(CommonConsultationPeer::CODE_PROCEDURE, $this->code_procedure);
        if ($this->isColumnModified(CommonConsultationPeer::REPONSE_ELECTRONIQUE)) $criteria->add(CommonConsultationPeer::REPONSE_ELECTRONIQUE, $this->reponse_electronique);
        if ($this->isColumnModified(CommonConsultationPeer::NUM_PROCEDURE)) $criteria->add(CommonConsultationPeer::NUM_PROCEDURE, $this->num_procedure);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_PROCEDURE)) $criteria->add(CommonConsultationPeer::ID_TYPE_PROCEDURE, $this->id_type_procedure);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_AVIS)) $criteria->add(CommonConsultationPeer::ID_TYPE_AVIS, $this->id_type_avis);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_EXECUTION)) $criteria->add(CommonConsultationPeer::LIEU_EXECUTION, $this->lieu_execution);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_MISE_EN_LIGNE)) $criteria->add(CommonConsultationPeer::TYPE_MISE_EN_LIGNE, $this->type_mise_en_ligne);
        if ($this->isColumnModified(CommonConsultationPeer::DATEMISEENLIGNE)) $criteria->add(CommonConsultationPeer::DATEMISEENLIGNE, $this->datemiseenligne);
        if ($this->isColumnModified(CommonConsultationPeer::IS_TIERS_AVIS)) $criteria->add(CommonConsultationPeer::IS_TIERS_AVIS, $this->is_tiers_avis);
        if ($this->isColumnModified(CommonConsultationPeer::URL)) $criteria->add(CommonConsultationPeer::URL, $this->url);
        if ($this->isColumnModified(CommonConsultationPeer::DATEFIN_SAD)) $criteria->add(CommonConsultationPeer::DATEFIN_SAD, $this->datefin_sad);
        if ($this->isColumnModified(CommonConsultationPeer::IS_SYS_ACQ_DYN)) $criteria->add(CommonConsultationPeer::IS_SYS_ACQ_DYN, $this->is_sys_acq_dyn);
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE_CONSULTATION_INIT)) $criteria->add(CommonConsultationPeer::REFERENCE_CONSULTATION_INIT, $this->reference_consultation_init);
        if ($this->isColumnModified(CommonConsultationPeer::SIGNATURE_OFFRE)) $criteria->add(CommonConsultationPeer::SIGNATURE_OFFRE, $this->signature_offre);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_VALIDATION)) $criteria->add(CommonConsultationPeer::ID_TYPE_VALIDATION, $this->id_type_validation);
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_APPROBATION)) $criteria->add(CommonConsultationPeer::ETAT_APPROBATION, $this->etat_approbation);
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_VALIDATION)) $criteria->add(CommonConsultationPeer::ETAT_VALIDATION, $this->etat_validation);
        if ($this->isColumnModified(CommonConsultationPeer::CHAMP_SUPP_INVISIBLE)) $criteria->add(CommonConsultationPeer::CHAMP_SUPP_INVISIBLE, $this->champ_supp_invisible);
        if ($this->isColumnModified(CommonConsultationPeer::CODE_CPV_1)) $criteria->add(CommonConsultationPeer::CODE_CPV_1, $this->code_cpv_1);
        if ($this->isColumnModified(CommonConsultationPeer::CODE_CPV_2)) $criteria->add(CommonConsultationPeer::CODE_CPV_2, $this->code_cpv_2);
        if ($this->isColumnModified(CommonConsultationPeer::PUBLICATION_EUROPE)) $criteria->add(CommonConsultationPeer::PUBLICATION_EUROPE, $this->publication_europe);
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_PUBLICATION)) $criteria->add(CommonConsultationPeer::ETAT_PUBLICATION, $this->etat_publication);
        if ($this->isColumnModified(CommonConsultationPeer::POURSUIVRE_AFFICHAGE)) $criteria->add(CommonConsultationPeer::POURSUIVRE_AFFICHAGE, $this->poursuivre_affichage);
        if ($this->isColumnModified(CommonConsultationPeer::NBR_TELECHARGEMENT_DCE)) $criteria->add(CommonConsultationPeer::NBR_TELECHARGEMENT_DCE, $this->nbr_telechargement_dce);
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_ID)) $criteria->add(CommonConsultationPeer::SERVICE_ID, $this->service_id);
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_ASSOCIE_ID)) $criteria->add(CommonConsultationPeer::SERVICE_ASSOCIE_ID, $this->service_associe_id);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION, $this->detail_consultation);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_FIN_AFFICHAGE)) $criteria->add(CommonConsultationPeer::DATE_FIN_AFFICHAGE, $this->date_fin_affichage);
        if ($this->isColumnModified(CommonConsultationPeer::DEPOUILLABLE_PHASE_CONSULTATION)) $criteria->add(CommonConsultationPeer::DEPOUILLABLE_PHASE_CONSULTATION, $this->depouillable_phase_consultation);
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_TRANSVERSE)) $criteria->add(CommonConsultationPeer::CONSULTATION_TRANSVERSE, $this->consultation_transverse);
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_ACHAT_PUBLIQUE)) $criteria->add(CommonConsultationPeer::CONSULTATION_ACHAT_PUBLIQUE, $this->consultation_achat_publique);
        if ($this->isColumnModified(CommonConsultationPeer::URL_CONSULTATION_ACHAT_PUBLIQUE)) $criteria->add(CommonConsultationPeer::URL_CONSULTATION_ACHAT_PUBLIQUE, $this->url_consultation_achat_publique);
        if ($this->isColumnModified(CommonConsultationPeer::PARTIAL_DCE_DOWNLOAD)) $criteria->add(CommonConsultationPeer::PARTIAL_DCE_DOWNLOAD, $this->partial_dce_download);
        if ($this->isColumnModified(CommonConsultationPeer::TIRAGE_PLAN)) $criteria->add(CommonConsultationPeer::TIRAGE_PLAN, $this->tirage_plan);
        if ($this->isColumnModified(CommonConsultationPeer::TIREUR_PLAN)) $criteria->add(CommonConsultationPeer::TIREUR_PLAN, $this->tireur_plan);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_MISE_EN_LIGNE_CALCULE)) $criteria->add(CommonConsultationPeer::DATE_MISE_EN_LIGNE_CALCULE, $this->date_mise_en_ligne_calcule);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_EN)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_EN, $this->accessibilite_en);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_ES)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_ES, $this->accessibilite_es);
        if ($this->isColumnModified(CommonConsultationPeer::NBR_REPONSE)) $criteria->add(CommonConsultationPeer::NBR_REPONSE, $this->nbr_reponse);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TYPE_PROCEDURE_ORG)) $criteria->add(CommonConsultationPeer::ID_TYPE_PROCEDURE_ORG, $this->id_type_procedure_org);
        if ($this->isColumnModified(CommonConsultationPeer::ORGANISME_CONSULTATION_INIT)) $criteria->add(CommonConsultationPeer::ORGANISME_CONSULTATION_INIT, $this->organisme_consultation_init);
        if ($this->isColumnModified(CommonConsultationPeer::TIRAGE_DESCRIPTIF)) $criteria->add(CommonConsultationPeer::TIRAGE_DESCRIPTIF, $this->tirage_descriptif);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_VALIDATION_INTERMEDIAIRE)) $criteria->add(CommonConsultationPeer::DATE_VALIDATION_INTERMEDIAIRE, $this->date_validation_intermediaire);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_FR)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_FR, $this->accessibilite_fr);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TR_ACCESSIBILITE)) $criteria->add(CommonConsultationPeer::ID_TR_ACCESSIBILITE, $this->id_tr_accessibilite);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_CZ)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_CZ, $this->accessibilite_cz);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_DU)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_DU, $this->accessibilite_du);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_SU)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_SU, $this->accessibilite_su);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_AR)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_AR, $this->accessibilite_ar);
        if ($this->isColumnModified(CommonConsultationPeer::ALLOTI)) $criteria->add(CommonConsultationPeer::ALLOTI, $this->alloti);
        if ($this->isColumnModified(CommonConsultationPeer::NUMERO_PHASE)) $criteria->add(CommonConsultationPeer::NUMERO_PHASE, $this->numero_phase);
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_EXTERNE)) $criteria->add(CommonConsultationPeer::CONSULTATION_EXTERNE, $this->consultation_externe);
        if ($this->isColumnModified(CommonConsultationPeer::URL_CONSULTATION_EXTERNE)) $criteria->add(CommonConsultationPeer::URL_CONSULTATION_EXTERNE, $this->url_consultation_externe);
        if ($this->isColumnModified(CommonConsultationPeer::ORG_DENOMINATION)) $criteria->add(CommonConsultationPeer::ORG_DENOMINATION, $this->org_denomination);
        if ($this->isColumnModified(CommonConsultationPeer::DOMAINES_ACTIVITES)) $criteria->add(CommonConsultationPeer::DOMAINES_ACTIVITES, $this->domaines_activites);
        if ($this->isColumnModified(CommonConsultationPeer::ID_AFFAIRE)) $criteria->add(CommonConsultationPeer::ID_AFFAIRE, $this->id_affaire);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS, $this->adresse_retrais_dossiers);
        if ($this->isColumnModified(CommonConsultationPeer::CAUTION_PROVISOIRE)) $criteria->add(CommonConsultationPeer::CAUTION_PROVISOIRE, $this->caution_provisoire);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES, $this->adresse_depot_offres);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS, $this->lieu_ouverture_plis);
        if ($this->isColumnModified(CommonConsultationPeer::PRIX_AQUISITION_PLANS)) $criteria->add(CommonConsultationPeer::PRIX_AQUISITION_PLANS, $this->prix_aquisition_plans);
        if ($this->isColumnModified(CommonConsultationPeer::QUALIFICATION)) $criteria->add(CommonConsultationPeer::QUALIFICATION, $this->qualification);
        if ($this->isColumnModified(CommonConsultationPeer::AGREMENTS)) $criteria->add(CommonConsultationPeer::AGREMENTS, $this->agrements);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION, $this->add_echantillion);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_LIMITE_ECHANTILLION)) $criteria->add(CommonConsultationPeer::DATE_LIMITE_ECHANTILLION, $this->date_limite_echantillion);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION)) $criteria->add(CommonConsultationPeer::ADD_REUNION, $this->add_reunion);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_REUNION)) $criteria->add(CommonConsultationPeer::DATE_REUNION, $this->date_reunion);
        if ($this->isColumnModified(CommonConsultationPeer::VARIANTES)) $criteria->add(CommonConsultationPeer::VARIANTES, $this->variantes);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_AR)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_AR, $this->adresse_retrais_dossiers_ar);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_AR)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_AR, $this->adresse_depot_offres_ar);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_AR)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_AR, $this->lieu_ouverture_plis_ar);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN, $this->pieces_dossier_admin);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_FR)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_FR, $this->pieces_dossier_admin_fr);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_EN)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_EN, $this->pieces_dossier_admin_en);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_ES)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_ES, $this->pieces_dossier_admin_es);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_SU)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_SU, $this->pieces_dossier_admin_su);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_DU)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_DU, $this->pieces_dossier_admin_du);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_CZ)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_CZ, $this->pieces_dossier_admin_cz);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_AR)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_AR, $this->pieces_dossier_admin_ar);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH, $this->pieces_dossier_tech);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_FR)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_FR, $this->pieces_dossier_tech_fr);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_EN)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_EN, $this->pieces_dossier_tech_en);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_ES)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_ES, $this->pieces_dossier_tech_es);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_SU)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_SU, $this->pieces_dossier_tech_su);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_DU)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_DU, $this->pieces_dossier_tech_du);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_CZ)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_CZ, $this->pieces_dossier_tech_cz);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_AR)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_AR, $this->pieces_dossier_tech_ar);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF, $this->pieces_dossier_additif);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_FR)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_FR, $this->pieces_dossier_additif_fr);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_EN)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_EN, $this->pieces_dossier_additif_en);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_ES)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_ES, $this->pieces_dossier_additif_es);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_SU)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_SU, $this->pieces_dossier_additif_su);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_DU)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_DU, $this->pieces_dossier_additif_du);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_CZ)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_CZ, $this->pieces_dossier_additif_cz);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_AR)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_AR, $this->pieces_dossier_additif_ar);
        if ($this->isColumnModified(CommonConsultationPeer::ID_RPA)) $criteria->add(CommonConsultationPeer::ID_RPA, $this->id_rpa);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_FR)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_FR, $this->detail_consultation_fr);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_EN)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_EN, $this->detail_consultation_en);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_ES)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_ES, $this->detail_consultation_es);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_SU)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_SU, $this->detail_consultation_su);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_DU)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_DU, $this->detail_consultation_du);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_CZ)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_CZ, $this->detail_consultation_cz);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_AR)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_AR, $this->detail_consultation_ar);
        if ($this->isColumnModified(CommonConsultationPeer::ECHANTILLON)) $criteria->add(CommonConsultationPeer::ECHANTILLON, $this->echantillon);
        if ($this->isColumnModified(CommonConsultationPeer::REUNION)) $criteria->add(CommonConsultationPeer::REUNION, $this->reunion);
        if ($this->isColumnModified(CommonConsultationPeer::VISITES_LIEUX)) $criteria->add(CommonConsultationPeer::VISITES_LIEUX, $this->visites_lieux);
        if ($this->isColumnModified(CommonConsultationPeer::VARIANTE_CALCULE)) $criteria->add(CommonConsultationPeer::VARIANTE_CALCULE, $this->variante_calcule);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_FR)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_FR, $this->adresse_retrais_dossiers_fr);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_EN)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_EN, $this->adresse_retrais_dossiers_en);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_ES)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_ES, $this->adresse_retrais_dossiers_es);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_SU)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_SU, $this->adresse_retrais_dossiers_su);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_DU)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_DU, $this->adresse_retrais_dossiers_du);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_CZ)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_CZ, $this->adresse_retrais_dossiers_cz);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_FR)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_FR, $this->adresse_depot_offres_fr);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_EN)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_EN, $this->adresse_depot_offres_en);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_ES)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_ES, $this->adresse_depot_offres_es);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_SU)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_SU, $this->adresse_depot_offres_su);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_DU)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_DU, $this->adresse_depot_offres_du);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_CZ)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_CZ, $this->adresse_depot_offres_cz);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_FR)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_FR, $this->lieu_ouverture_plis_fr);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_EN)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_EN, $this->lieu_ouverture_plis_en);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_ES)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_ES, $this->lieu_ouverture_plis_es);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_SU)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_SU, $this->lieu_ouverture_plis_su);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_DU)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_DU, $this->lieu_ouverture_plis_du);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_CZ)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_CZ, $this->lieu_ouverture_plis_cz);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_FR)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_FR, $this->add_echantillion_fr);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_EN)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_EN, $this->add_echantillion_en);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_ES)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_ES, $this->add_echantillion_es);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_SU)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_SU, $this->add_echantillion_su);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_DU)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_DU, $this->add_echantillion_du);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_CZ)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_CZ, $this->add_echantillion_cz);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_AR)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_AR, $this->add_echantillion_ar);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_FR)) $criteria->add(CommonConsultationPeer::ADD_REUNION_FR, $this->add_reunion_fr);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_EN)) $criteria->add(CommonConsultationPeer::ADD_REUNION_EN, $this->add_reunion_en);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_ES)) $criteria->add(CommonConsultationPeer::ADD_REUNION_ES, $this->add_reunion_es);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_SU)) $criteria->add(CommonConsultationPeer::ADD_REUNION_SU, $this->add_reunion_su);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_DU)) $criteria->add(CommonConsultationPeer::ADD_REUNION_DU, $this->add_reunion_du);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_CZ)) $criteria->add(CommonConsultationPeer::ADD_REUNION_CZ, $this->add_reunion_cz);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_AR)) $criteria->add(CommonConsultationPeer::ADD_REUNION_AR, $this->add_reunion_ar);
        if ($this->isColumnModified(CommonConsultationPeer::MODE_PASSATION)) $criteria->add(CommonConsultationPeer::MODE_PASSATION, $this->mode_passation);
        if ($this->isColumnModified(CommonConsultationPeer::CONSULTATION_ANNULEE)) $criteria->add(CommonConsultationPeer::CONSULTATION_ANNULEE, $this->consultation_annulee);
        if ($this->isColumnModified(CommonConsultationPeer::COMPTE_BOAMP_ASSOCIE)) $criteria->add(CommonConsultationPeer::COMPTE_BOAMP_ASSOCIE, $this->compte_boamp_associe);
        if ($this->isColumnModified(CommonConsultationPeer::ACCESSIBILITE_IT)) $criteria->add(CommonConsultationPeer::ACCESSIBILITE_IT, $this->accessibilite_it);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_IT)) $criteria->add(CommonConsultationPeer::ADRESSE_DEPOT_OFFRES_IT, $this->adresse_depot_offres_it);
        if ($this->isColumnModified(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_IT)) $criteria->add(CommonConsultationPeer::LIEU_OUVERTURE_PLIS_IT, $this->lieu_ouverture_plis_it);
        if ($this->isColumnModified(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_IT)) $criteria->add(CommonConsultationPeer::ADRESSE_RETRAIS_DOSSIERS_IT, $this->adresse_retrais_dossiers_it);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_IT)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADMIN_IT, $this->pieces_dossier_admin_it);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_TECH_IT)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_TECH_IT, $this->pieces_dossier_tech_it);
        if ($this->isColumnModified(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_IT)) $criteria->add(CommonConsultationPeer::PIECES_DOSSIER_ADDITIF_IT, $this->pieces_dossier_additif_it);
        if ($this->isColumnModified(CommonConsultationPeer::DETAIL_CONSULTATION_IT)) $criteria->add(CommonConsultationPeer::DETAIL_CONSULTATION_IT, $this->detail_consultation_it);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_ECHANTILLION_IT)) $criteria->add(CommonConsultationPeer::ADD_ECHANTILLION_IT, $this->add_echantillion_it);
        if ($this->isColumnModified(CommonConsultationPeer::ADD_REUNION_IT)) $criteria->add(CommonConsultationPeer::ADD_REUNION_IT, $this->add_reunion_it);
        if ($this->isColumnModified(CommonConsultationPeer::CODES_NUTS)) $criteria->add(CommonConsultationPeer::CODES_NUTS, $this->codes_nuts);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE)) $criteria->add(CommonConsultationPeer::INTITULE, $this->intitule);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TR_INTITULE)) $criteria->add(CommonConsultationPeer::ID_TR_INTITULE, $this->id_tr_intitule);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET)) $criteria->add(CommonConsultationPeer::OBJET, $this->objet);
        if ($this->isColumnModified(CommonConsultationPeer::ID_TR_OBJET)) $criteria->add(CommonConsultationPeer::ID_TR_OBJET, $this->id_tr_objet);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_DECISION)) $criteria->add(CommonConsultationPeer::DATE_DECISION, $this->date_decision);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_ACCES)) $criteria->add(CommonConsultationPeer::TYPE_ACCES, $this->type_acces);
        if ($this->isColumnModified(CommonConsultationPeer::AUTORISER_REPONSE_ELECTRONIQUE)) $criteria->add(CommonConsultationPeer::AUTORISER_REPONSE_ELECTRONIQUE, $this->autoriser_reponse_electronique);
        if ($this->isColumnModified(CommonConsultationPeer::REGLE_MISE_EN_LIGNE)) $criteria->add(CommonConsultationPeer::REGLE_MISE_EN_LIGNE, $this->regle_mise_en_ligne);
        if ($this->isColumnModified(CommonConsultationPeer::ID_REGLE_VALIDATION)) $criteria->add(CommonConsultationPeer::ID_REGLE_VALIDATION, $this->id_regle_validation);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_FR)) $criteria->add(CommonConsultationPeer::INTITULE_FR, $this->intitule_fr);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_EN)) $criteria->add(CommonConsultationPeer::INTITULE_EN, $this->intitule_en);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_ES)) $criteria->add(CommonConsultationPeer::INTITULE_ES, $this->intitule_es);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_SU)) $criteria->add(CommonConsultationPeer::INTITULE_SU, $this->intitule_su);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_DU)) $criteria->add(CommonConsultationPeer::INTITULE_DU, $this->intitule_du);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_CZ)) $criteria->add(CommonConsultationPeer::INTITULE_CZ, $this->intitule_cz);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_AR)) $criteria->add(CommonConsultationPeer::INTITULE_AR, $this->intitule_ar);
        if ($this->isColumnModified(CommonConsultationPeer::INTITULE_IT)) $criteria->add(CommonConsultationPeer::INTITULE_IT, $this->intitule_it);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_FR)) $criteria->add(CommonConsultationPeer::OBJET_FR, $this->objet_fr);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_EN)) $criteria->add(CommonConsultationPeer::OBJET_EN, $this->objet_en);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_ES)) $criteria->add(CommonConsultationPeer::OBJET_ES, $this->objet_es);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_SU)) $criteria->add(CommonConsultationPeer::OBJET_SU, $this->objet_su);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_DU)) $criteria->add(CommonConsultationPeer::OBJET_DU, $this->objet_du);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_CZ)) $criteria->add(CommonConsultationPeer::OBJET_CZ, $this->objet_cz);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_AR)) $criteria->add(CommonConsultationPeer::OBJET_AR, $this->objet_ar);
        if ($this->isColumnModified(CommonConsultationPeer::OBJET_IT)) $criteria->add(CommonConsultationPeer::OBJET_IT, $this->objet_it);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE)) $criteria->add(CommonConsultationPeer::CLAUSE_SOCIALE, $this->clause_sociale);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENVIRONNEMENTALE)) $criteria->add(CommonConsultationPeer::CLAUSE_ENVIRONNEMENTALE, $this->clause_environnementale);
        if ($this->isColumnModified(CommonConsultationPeer::REPONSE_OBLIGATOIRE)) $criteria->add(CommonConsultationPeer::REPONSE_OBLIGATOIRE, $this->reponse_obligatoire);
        if ($this->isColumnModified(CommonConsultationPeer::AUTORISER_PUBLICITE)) $criteria->add(CommonConsultationPeer::AUTORISER_PUBLICITE, $this->autoriser_publicite);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_ENVOI)) $criteria->add(CommonConsultationPeer::TYPE_ENVOI, $this->type_envoi);
        if ($this->isColumnModified(CommonConsultationPeer::CHIFFREMENT_OFFRE)) $criteria->add(CommonConsultationPeer::CHIFFREMENT_OFFRE, $this->chiffrement_offre);
        if ($this->isColumnModified(CommonConsultationPeer::ENV_CANDIDATURE)) $criteria->add(CommonConsultationPeer::ENV_CANDIDATURE, $this->env_candidature);
        if ($this->isColumnModified(CommonConsultationPeer::ENV_OFFRE)) $criteria->add(CommonConsultationPeer::ENV_OFFRE, $this->env_offre);
        if ($this->isColumnModified(CommonConsultationPeer::ENV_ANONYMAT)) $criteria->add(CommonConsultationPeer::ENV_ANONYMAT, $this->env_anonymat);
        if ($this->isColumnModified(CommonConsultationPeer::ID_ETAT_CONSULTATION)) $criteria->add(CommonConsultationPeer::ID_ETAT_CONSULTATION, $this->id_etat_consultation);
        if ($this->isColumnModified(CommonConsultationPeer::REFERENCE_CONNECTEUR)) $criteria->add(CommonConsultationPeer::REFERENCE_CONNECTEUR, $this->reference_connecteur);
        if ($this->isColumnModified(CommonConsultationPeer::CONS_STATUT)) $criteria->add(CommonConsultationPeer::CONS_STATUT, $this->cons_statut);
        if ($this->isColumnModified(CommonConsultationPeer::ID_APPROBATEUR)) $criteria->add(CommonConsultationPeer::ID_APPROBATEUR, $this->id_approbateur);
        if ($this->isColumnModified(CommonConsultationPeer::ID_VALIDEUR)) $criteria->add(CommonConsultationPeer::ID_VALIDEUR, $this->id_valideur);
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_VALIDATION)) $criteria->add(CommonConsultationPeer::SERVICE_VALIDATION, $this->service_validation);
        if ($this->isColumnModified(CommonConsultationPeer::ID_CREATEUR)) $criteria->add(CommonConsultationPeer::ID_CREATEUR, $this->id_createur);
        if ($this->isColumnModified(CommonConsultationPeer::NOM_CREATEUR)) $criteria->add(CommonConsultationPeer::NOM_CREATEUR, $this->nom_createur);
        if ($this->isColumnModified(CommonConsultationPeer::PRENOM_CREATEUR)) $criteria->add(CommonConsultationPeer::PRENOM_CREATEUR, $this->prenom_createur);
        if ($this->isColumnModified(CommonConsultationPeer::SIGNATURE_ACTE_ENGAGEMENT)) $criteria->add(CommonConsultationPeer::SIGNATURE_ACTE_ENGAGEMENT, $this->signature_acte_engagement);
        if ($this->isColumnModified(CommonConsultationPeer::ARCHIVEMETADESCRIPTION)) $criteria->add(CommonConsultationPeer::ARCHIVEMETADESCRIPTION, $this->archivemetadescription);
        if ($this->isColumnModified(CommonConsultationPeer::ARCHIVEMETAMOTSCLEF)) $criteria->add(CommonConsultationPeer::ARCHIVEMETAMOTSCLEF, $this->archivemetamotsclef);
        if ($this->isColumnModified(CommonConsultationPeer::ARCHIVEIDBLOBZIP)) $criteria->add(CommonConsultationPeer::ARCHIVEIDBLOBZIP, $this->archiveidblobzip);
        if ($this->isColumnModified(CommonConsultationPeer::DECISION_PARTIELLE)) $criteria->add(CommonConsultationPeer::DECISION_PARTIELLE, $this->decision_partielle);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_A_RENSEIGNER)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_A_RENSEIGNER, $this->type_decision_a_renseigner);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_MARCHE)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_MARCHE, $this->type_decision_attribution_marche);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_DECLARATION_SANS_SUITE)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_DECLARATION_SANS_SUITE, $this->type_decision_declaration_sans_suite);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_DECLARATION_INFRUCTUEUX)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_DECLARATION_INFRUCTUEUX, $this->type_decision_declaration_infructueux);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_SELECTION_ENTREPRISE)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_SELECTION_ENTREPRISE, $this->type_decision_selection_entreprise);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_ACCORD_CADRE)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_ATTRIBUTION_ACCORD_CADRE, $this->type_decision_attribution_accord_cadre);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_ADMISSION_SAD)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_ADMISSION_SAD, $this->type_decision_admission_sad);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_DECISION_AUTRE)) $criteria->add(CommonConsultationPeer::TYPE_DECISION_AUTRE, $this->type_decision_autre);
        if ($this->isColumnModified(CommonConsultationPeer::ID_ARCHIVEUR)) $criteria->add(CommonConsultationPeer::ID_ARCHIVEUR, $this->id_archiveur);
        if ($this->isColumnModified(CommonConsultationPeer::PRENOM_NOM_AGENT_TELECHARGEMENT_PLIS)) $criteria->add(CommonConsultationPeer::PRENOM_NOM_AGENT_TELECHARGEMENT_PLIS, $this->prenom_nom_agent_telechargement_plis);
        if ($this->isColumnModified(CommonConsultationPeer::ID_AGENT_TELECHARGEMENT_PLIS)) $criteria->add(CommonConsultationPeer::ID_AGENT_TELECHARGEMENT_PLIS, $this->id_agent_telechargement_plis);
        if ($this->isColumnModified(CommonConsultationPeer::PATH_TELECHARGEMENT_PLIS)) $criteria->add(CommonConsultationPeer::PATH_TELECHARGEMENT_PLIS, $this->path_telechargement_plis);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_TELECHARGEMENT_PLIS)) $criteria->add(CommonConsultationPeer::DATE_TELECHARGEMENT_PLIS, $this->date_telechargement_plis);
        if ($this->isColumnModified(CommonConsultationPeer::SERVICE_VALIDATION_INTERMEDIAIRE)) $criteria->add(CommonConsultationPeer::SERVICE_VALIDATION_INTERMEDIAIRE, $this->service_validation_intermediaire);
        if ($this->isColumnModified(CommonConsultationPeer::ENV_OFFRE_TECHNIQUE)) $criteria->add(CommonConsultationPeer::ENV_OFFRE_TECHNIQUE, $this->env_offre_technique);
        if ($this->isColumnModified(CommonConsultationPeer::REF_ORG_PARTENAIRE)) $criteria->add(CommonConsultationPeer::REF_ORG_PARTENAIRE, $this->ref_org_partenaire);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_ARCHIVAGE)) $criteria->add(CommonConsultationPeer::DATE_ARCHIVAGE, $this->date_archivage);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_DECISION_ANNULATION)) $criteria->add(CommonConsultationPeer::DATE_DECISION_ANNULATION, $this->date_decision_annulation);
        if ($this->isColumnModified(CommonConsultationPeer::COMMENTAIRE_ANNULATION)) $criteria->add(CommonConsultationPeer::COMMENTAIRE_ANNULATION, $this->commentaire_annulation);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_MISE_EN_LIGNE_SOUHAITEE)) $criteria->add(CommonConsultationPeer::DATE_MISE_EN_LIGNE_SOUHAITEE, $this->date_mise_en_ligne_souhaitee);
        if ($this->isColumnModified(CommonConsultationPeer::ETAT_EN_ATTENTE_VALIDATION)) $criteria->add(CommonConsultationPeer::ETAT_EN_ATTENTE_VALIDATION, $this->etat_en_attente_validation);
        if ($this->isColumnModified(CommonConsultationPeer::DOSSIER_ADDITIF)) $criteria->add(CommonConsultationPeer::DOSSIER_ADDITIF, $this->dossier_additif);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_MARCHE)) $criteria->add(CommonConsultationPeer::TYPE_MARCHE, $this->type_marche);
        if ($this->isColumnModified(CommonConsultationPeer::TYPE_PRESTATION)) $criteria->add(CommonConsultationPeer::TYPE_PRESTATION, $this->type_prestation);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_MODIFICATION)) $criteria->add(CommonConsultationPeer::DATE_MODIFICATION, $this->date_modification);
        if ($this->isColumnModified(CommonConsultationPeer::DELAI_PARTIEL)) $criteria->add(CommonConsultationPeer::DELAI_PARTIEL, $this->delai_partiel);
        if ($this->isColumnModified(CommonConsultationPeer::DATEFINLOCALE)) $criteria->add(CommonConsultationPeer::DATEFINLOCALE, $this->datefinlocale);
        if ($this->isColumnModified(CommonConsultationPeer::LIEURESIDENCE)) $criteria->add(CommonConsultationPeer::LIEURESIDENCE, $this->lieuresidence);
        if ($this->isColumnModified(CommonConsultationPeer::ALERTE)) $criteria->add(CommonConsultationPeer::ALERTE, $this->alerte);
        if ($this->isColumnModified(CommonConsultationPeer::DOUBLON)) $criteria->add(CommonConsultationPeer::DOUBLON, $this->doublon);
        if ($this->isColumnModified(CommonConsultationPeer::DENOMINATION_ADAPTE)) $criteria->add(CommonConsultationPeer::DENOMINATION_ADAPTE, $this->denomination_adapte);
        if ($this->isColumnModified(CommonConsultationPeer::URL_CONSULTATION_AVIS_PUB)) $criteria->add(CommonConsultationPeer::URL_CONSULTATION_AVIS_PUB, $this->url_consultation_avis_pub);
        if ($this->isColumnModified(CommonConsultationPeer::DOUBLON_DE)) $criteria->add(CommonConsultationPeer::DOUBLON_DE, $this->doublon_de);
        if ($this->isColumnModified(CommonConsultationPeer::ENTITE_ADJUDICATRICE)) $criteria->add(CommonConsultationPeer::ENTITE_ADJUDICATRICE, $this->entite_adjudicatrice);
        if ($this->isColumnModified(CommonConsultationPeer::CODE_OPERATION)) $criteria->add(CommonConsultationPeer::CODE_OPERATION, $this->code_operation);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE_CONDITION_EXECUTION)) $criteria->add(CommonConsultationPeer::CLAUSE_SOCIALE_CONDITION_EXECUTION, $this->clause_sociale_condition_execution);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE_INSERTION)) $criteria->add(CommonConsultationPeer::CLAUSE_SOCIALE_INSERTION, $this->clause_sociale_insertion);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_SOCIALE_ATELIERS_PROTEGES)) $criteria->add(CommonConsultationPeer::CLAUSE_SOCIALE_ATELIERS_PROTEGES, $this->clause_sociale_ateliers_proteges);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENV_SPECS_TECHNIQUES)) $criteria->add(CommonConsultationPeer::CLAUSE_ENV_SPECS_TECHNIQUES, $this->clause_env_specs_techniques);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENV_COND_EXECUTION)) $criteria->add(CommonConsultationPeer::CLAUSE_ENV_COND_EXECUTION, $this->clause_env_cond_execution);
        if ($this->isColumnModified(CommonConsultationPeer::CLAUSE_ENV_CRITERES_SELECT)) $criteria->add(CommonConsultationPeer::CLAUSE_ENV_CRITERES_SELECT, $this->clause_env_criteres_select);
        if ($this->isColumnModified(CommonConsultationPeer::ID_DONNEE_COMPLEMENTAIRE)) $criteria->add(CommonConsultationPeer::ID_DONNEE_COMPLEMENTAIRE, $this->id_donnee_complementaire);
        if ($this->isColumnModified(CommonConsultationPeer::DONNEE_COMPLEMENTAIRE_OBLIGATOIRE)) $criteria->add(CommonConsultationPeer::DONNEE_COMPLEMENTAIRE_OBLIGATOIRE, $this->donnee_complementaire_obligatoire);
        if ($this->isColumnModified(CommonConsultationPeer::MODE_OUVERTURE_REPONSE)) $criteria->add(CommonConsultationPeer::MODE_OUVERTURE_REPONSE, $this->mode_ouverture_reponse);
        if ($this->isColumnModified(CommonConsultationPeer::ID_FICHIER_ANNULATION)) $criteria->add(CommonConsultationPeer::ID_FICHIER_ANNULATION, $this->id_fichier_annulation);
        if ($this->isColumnModified(CommonConsultationPeer::IDOPERATION)) $criteria->add(CommonConsultationPeer::IDOPERATION, $this->idoperation);
        if ($this->isColumnModified(CommonConsultationPeer::MARCHE_PUBLIC_SIMPLIFIE)) $criteria->add(CommonConsultationPeer::MARCHE_PUBLIC_SIMPLIFIE, $this->marche_public_simplifie);
        if ($this->isColumnModified(CommonConsultationPeer::INFOS_BLOCS_ATLAS)) $criteria->add(CommonConsultationPeer::INFOS_BLOCS_ATLAS, $this->infos_blocs_atlas);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_FIN_UNIX)) $criteria->add(CommonConsultationPeer::DATE_FIN_UNIX, $this->date_fin_unix);
        if ($this->isColumnModified(CommonConsultationPeer::DATE_ACHEVEMENT)) $criteria->add(CommonConsultationPeer::DATE_ACHEVEMENT, $this->date_achevement);
        if ($this->isColumnModified(CommonConsultationPeer::NOMBRE_DE_LOTS)) $criteria->add(CommonConsultationPeer::NOMBRE_DE_LOTS, $this->nombre_de_lots);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(CommonConsultationPeer::DATABASE_NAME);
        $criteria->add(CommonConsultationPeer::REFERENCE, $this->reference);
        $criteria->add(CommonConsultationPeer::ORGANISME, $this->organisme);

        return $criteria;
    }

    /**
     * Returns the composite primary key for this object.
     * The array elements will be in same order as specified in XML.
     * @return array
     */
    public function getPrimaryKey()
    {
        $pks = array();
        $pks[0] = $this->getReference();
        $pks[1] = $this->getOrganisme();

        return $pks;
    }

    /**
     * Set the [composite] primary key.
     *
     * @param array $keys The elements of the composite key (order must match the order in XML file).
     * @return void
     */
    public function setPrimaryKey($keys)
    {
        $this->setReference($keys[0]);
        $this->setOrganisme($keys[1]);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return (null === $this->getReference()) && (null === $this->getOrganisme());
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of CommonConsultation (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setOrganisme($this->getOrganisme());
        $copyObj->setReferenceUtilisateur($this->getReferenceUtilisateur());
        $copyObj->setCategorie($this->getCategorie());
        $copyObj->setTitre($this->getTitre());
        $copyObj->setResume($this->getResume());
        $copyObj->setDatedebut($this->getDatedebut());
        $copyObj->setDatefin($this->getDatefin());
        $copyObj->setDatevalidation($this->getDatevalidation());
        $copyObj->setTypeProcedure($this->getTypeProcedure());
        $copyObj->setCodeProcedure($this->getCodeProcedure());
        $copyObj->setReponseElectronique($this->getReponseElectronique());
        $copyObj->setNumProcedure($this->getNumProcedure());
        $copyObj->setIdTypeProcedure($this->getIdTypeProcedure());
        $copyObj->setIdTypeAvis($this->getIdTypeAvis());
        $copyObj->setLieuExecution($this->getLieuExecution());
        $copyObj->setTypeMiseEnLigne($this->getTypeMiseEnLigne());
        $copyObj->setDatemiseenligne($this->getDatemiseenligne());
        $copyObj->setIsTiersAvis($this->getIsTiersAvis());
        $copyObj->setUrl($this->getUrl());
        $copyObj->setDatefinSad($this->getDatefinSad());
        $copyObj->setIsSysAcqDyn($this->getIsSysAcqDyn());
        $copyObj->setReferenceConsultationInit($this->getReferenceConsultationInit());
        $copyObj->setSignatureOffre($this->getSignatureOffre());
        $copyObj->setIdTypeValidation($this->getIdTypeValidation());
        $copyObj->setEtatApprobation($this->getEtatApprobation());
        $copyObj->setEtatValidation($this->getEtatValidation());
        $copyObj->setChampSuppInvisible($this->getChampSuppInvisible());
        $copyObj->setCodeCpv1($this->getCodeCpv1());
        $copyObj->setCodeCpv2($this->getCodeCpv2());
        $copyObj->setPublicationEurope($this->getPublicationEurope());
        $copyObj->setEtatPublication($this->getEtatPublication());
        $copyObj->setPoursuivreAffichage($this->getPoursuivreAffichage());
        $copyObj->setNbrTelechargementDce($this->getNbrTelechargementDce());
        $copyObj->setServiceId($this->getServiceId());
        $copyObj->setServiceAssocieId($this->getServiceAssocieId());
        $copyObj->setDetailConsultation($this->getDetailConsultation());
        $copyObj->setDateFinAffichage($this->getDateFinAffichage());
        $copyObj->setDepouillablePhaseConsultation($this->getDepouillablePhaseConsultation());
        $copyObj->setConsultationTransverse($this->getConsultationTransverse());
        $copyObj->setConsultationAchatPublique($this->getConsultationAchatPublique());
        $copyObj->setUrlConsultationAchatPublique($this->getUrlConsultationAchatPublique());
        $copyObj->setPartialDceDownload($this->getPartialDceDownload());
        $copyObj->setTiragePlan($this->getTiragePlan());
        $copyObj->setTireurPlan($this->getTireurPlan());
        $copyObj->setDateMiseEnLigneCalcule($this->getDateMiseEnLigneCalcule());
        $copyObj->setAccessibiliteEn($this->getAccessibiliteEn());
        $copyObj->setAccessibiliteEs($this->getAccessibiliteEs());
        $copyObj->setNbrReponse($this->getNbrReponse());
        $copyObj->setIdTypeProcedureOrg($this->getIdTypeProcedureOrg());
        $copyObj->setOrganismeConsultationInit($this->getOrganismeConsultationInit());
        $copyObj->setTirageDescriptif($this->getTirageDescriptif());
        $copyObj->setDateValidationIntermediaire($this->getDateValidationIntermediaire());
        $copyObj->setAccessibiliteFr($this->getAccessibiliteFr());
        $copyObj->setIdTrAccessibilite($this->getIdTrAccessibilite());
        $copyObj->setAccessibiliteCz($this->getAccessibiliteCz());
        $copyObj->setAccessibiliteDu($this->getAccessibiliteDu());
        $copyObj->setAccessibiliteSu($this->getAccessibiliteSu());
        $copyObj->setAccessibiliteAr($this->getAccessibiliteAr());
        $copyObj->setAlloti($this->getAlloti());
        $copyObj->setNumeroPhase($this->getNumeroPhase());
        $copyObj->setConsultationExterne($this->getConsultationExterne());
        $copyObj->setUrlConsultationExterne($this->getUrlConsultationExterne());
        $copyObj->setOrgDenomination($this->getOrgDenomination());
        $copyObj->setDomainesActivites($this->getDomainesActivites());
        $copyObj->setIdAffaire($this->getIdAffaire());
        $copyObj->setAdresseRetraisDossiers($this->getAdresseRetraisDossiers());
        $copyObj->setCautionProvisoire($this->getCautionProvisoire());
        $copyObj->setAdresseDepotOffres($this->getAdresseDepotOffres());
        $copyObj->setLieuOuverturePlis($this->getLieuOuverturePlis());
        $copyObj->setPrixAquisitionPlans($this->getPrixAquisitionPlans());
        $copyObj->setQualification($this->getQualification());
        $copyObj->setAgrements($this->getAgrements());
        $copyObj->setAddEchantillion($this->getAddEchantillion());
        $copyObj->setDateLimiteEchantillion($this->getDateLimiteEchantillion());
        $copyObj->setAddReunion($this->getAddReunion());
        $copyObj->setDateReunion($this->getDateReunion());
        $copyObj->setVariantes($this->getVariantes());
        $copyObj->setAdresseRetraisDossiersAr($this->getAdresseRetraisDossiersAr());
        $copyObj->setAdresseDepotOffresAr($this->getAdresseDepotOffresAr());
        $copyObj->setLieuOuverturePlisAr($this->getLieuOuverturePlisAr());
        $copyObj->setPiecesDossierAdmin($this->getPiecesDossierAdmin());
        $copyObj->setPiecesDossierAdminFr($this->getPiecesDossierAdminFr());
        $copyObj->setPiecesDossierAdminEn($this->getPiecesDossierAdminEn());
        $copyObj->setPiecesDossierAdminEs($this->getPiecesDossierAdminEs());
        $copyObj->setPiecesDossierAdminSu($this->getPiecesDossierAdminSu());
        $copyObj->setPiecesDossierAdminDu($this->getPiecesDossierAdminDu());
        $copyObj->setPiecesDossierAdminCz($this->getPiecesDossierAdminCz());
        $copyObj->setPiecesDossierAdminAr($this->getPiecesDossierAdminAr());
        $copyObj->setPiecesDossierTech($this->getPiecesDossierTech());
        $copyObj->setPiecesDossierTechFr($this->getPiecesDossierTechFr());
        $copyObj->setPiecesDossierTechEn($this->getPiecesDossierTechEn());
        $copyObj->setPiecesDossierTechEs($this->getPiecesDossierTechEs());
        $copyObj->setPiecesDossierTechSu($this->getPiecesDossierTechSu());
        $copyObj->setPiecesDossierTechDu($this->getPiecesDossierTechDu());
        $copyObj->setPiecesDossierTechCz($this->getPiecesDossierTechCz());
        $copyObj->setPiecesDossierTechAr($this->getPiecesDossierTechAr());
        $copyObj->setPiecesDossierAdditif($this->getPiecesDossierAdditif());
        $copyObj->setPiecesDossierAdditifFr($this->getPiecesDossierAdditifFr());
        $copyObj->setPiecesDossierAdditifEn($this->getPiecesDossierAdditifEn());
        $copyObj->setPiecesDossierAdditifEs($this->getPiecesDossierAdditifEs());
        $copyObj->setPiecesDossierAdditifSu($this->getPiecesDossierAdditifSu());
        $copyObj->setPiecesDossierAdditifDu($this->getPiecesDossierAdditifDu());
        $copyObj->setPiecesDossierAdditifCz($this->getPiecesDossierAdditifCz());
        $copyObj->setPiecesDossierAdditifAr($this->getPiecesDossierAdditifAr());
        $copyObj->setIdRpa($this->getIdRpa());
        $copyObj->setDetailConsultationFr($this->getDetailConsultationFr());
        $copyObj->setDetailConsultationEn($this->getDetailConsultationEn());
        $copyObj->setDetailConsultationEs($this->getDetailConsultationEs());
        $copyObj->setDetailConsultationSu($this->getDetailConsultationSu());
        $copyObj->setDetailConsultationDu($this->getDetailConsultationDu());
        $copyObj->setDetailConsultationCz($this->getDetailConsultationCz());
        $copyObj->setDetailConsultationAr($this->getDetailConsultationAr());
        $copyObj->setEchantillon($this->getEchantillon());
        $copyObj->setReunion($this->getReunion());
        $copyObj->setVisitesLieux($this->getVisitesLieux());
        $copyObj->setVarianteCalcule($this->getVarianteCalcule());
        $copyObj->setAdresseRetraisDossiersFr($this->getAdresseRetraisDossiersFr());
        $copyObj->setAdresseRetraisDossiersEn($this->getAdresseRetraisDossiersEn());
        $copyObj->setAdresseRetraisDossiersEs($this->getAdresseRetraisDossiersEs());
        $copyObj->setAdresseRetraisDossiersSu($this->getAdresseRetraisDossiersSu());
        $copyObj->setAdresseRetraisDossiersDu($this->getAdresseRetraisDossiersDu());
        $copyObj->setAdresseRetraisDossiersCz($this->getAdresseRetraisDossiersCz());
        $copyObj->setAdresseDepotOffresFr($this->getAdresseDepotOffresFr());
        $copyObj->setAdresseDepotOffresEn($this->getAdresseDepotOffresEn());
        $copyObj->setAdresseDepotOffresEs($this->getAdresseDepotOffresEs());
        $copyObj->setAdresseDepotOffresSu($this->getAdresseDepotOffresSu());
        $copyObj->setAdresseDepotOffresDu($this->getAdresseDepotOffresDu());
        $copyObj->setAdresseDepotOffresCz($this->getAdresseDepotOffresCz());
        $copyObj->setLieuOuverturePlisFr($this->getLieuOuverturePlisFr());
        $copyObj->setLieuOuverturePlisEn($this->getLieuOuverturePlisEn());
        $copyObj->setLieuOuverturePlisEs($this->getLieuOuverturePlisEs());
        $copyObj->setLieuOuverturePlisSu($this->getLieuOuverturePlisSu());
        $copyObj->setLieuOuverturePlisDu($this->getLieuOuverturePlisDu());
        $copyObj->setLieuOuverturePlisCz($this->getLieuOuverturePlisCz());
        $copyObj->setAddEchantillionFr($this->getAddEchantillionFr());
        $copyObj->setAddEchantillionEn($this->getAddEchantillionEn());
        $copyObj->setAddEchantillionEs($this->getAddEchantillionEs());
        $copyObj->setAddEchantillionSu($this->getAddEchantillionSu());
        $copyObj->setAddEchantillionDu($this->getAddEchantillionDu());
        $copyObj->setAddEchantillionCz($this->getAddEchantillionCz());
        $copyObj->setAddEchantillionAr($this->getAddEchantillionAr());
        $copyObj->setAddReunionFr($this->getAddReunionFr());
        $copyObj->setAddReunionEn($this->getAddReunionEn());
        $copyObj->setAddReunionEs($this->getAddReunionEs());
        $copyObj->setAddReunionSu($this->getAddReunionSu());
        $copyObj->setAddReunionDu($this->getAddReunionDu());
        $copyObj->setAddReunionCz($this->getAddReunionCz());
        $copyObj->setAddReunionAr($this->getAddReunionAr());
        $copyObj->setModePassation($this->getModePassation());
        $copyObj->setConsultationAnnulee($this->getConsultationAnnulee());
        $copyObj->setCompteBoampAssocie($this->getCompteBoampAssocie());
        $copyObj->setAccessibiliteIt($this->getAccessibiliteIt());
        $copyObj->setAdresseDepotOffresIt($this->getAdresseDepotOffresIt());
        $copyObj->setLieuOuverturePlisIt($this->getLieuOuverturePlisIt());
        $copyObj->setAdresseRetraisDossiersIt($this->getAdresseRetraisDossiersIt());
        $copyObj->setPiecesDossierAdminIt($this->getPiecesDossierAdminIt());
        $copyObj->setPiecesDossierTechIt($this->getPiecesDossierTechIt());
        $copyObj->setPiecesDossierAdditifIt($this->getPiecesDossierAdditifIt());
        $copyObj->setDetailConsultationIt($this->getDetailConsultationIt());
        $copyObj->setAddEchantillionIt($this->getAddEchantillionIt());
        $copyObj->setAddReunionIt($this->getAddReunionIt());
        $copyObj->setCodesNuts($this->getCodesNuts());
        $copyObj->setIntitule($this->getIntitule());
        $copyObj->setIdTrIntitule($this->getIdTrIntitule());
        $copyObj->setObjet($this->getObjet());
        $copyObj->setIdTrObjet($this->getIdTrObjet());
        $copyObj->setDateDecision($this->getDateDecision());
        $copyObj->setTypeAcces($this->getTypeAcces());
        $copyObj->setAutoriserReponseElectronique($this->getAutoriserReponseElectronique());
        $copyObj->setRegleMiseEnLigne($this->getRegleMiseEnLigne());
        $copyObj->setIdRegleValidation($this->getIdRegleValidation());
        $copyObj->setIntituleFr($this->getIntituleFr());
        $copyObj->setIntituleEn($this->getIntituleEn());
        $copyObj->setIntituleEs($this->getIntituleEs());
        $copyObj->setIntituleSu($this->getIntituleSu());
        $copyObj->setIntituleDu($this->getIntituleDu());
        $copyObj->setIntituleCz($this->getIntituleCz());
        $copyObj->setIntituleAr($this->getIntituleAr());
        $copyObj->setIntituleIt($this->getIntituleIt());
        $copyObj->setObjetFr($this->getObjetFr());
        $copyObj->setObjetEn($this->getObjetEn());
        $copyObj->setObjetEs($this->getObjetEs());
        $copyObj->setObjetSu($this->getObjetSu());
        $copyObj->setObjetDu($this->getObjetDu());
        $copyObj->setObjetCz($this->getObjetCz());
        $copyObj->setObjetAr($this->getObjetAr());
        $copyObj->setObjetIt($this->getObjetIt());
        $copyObj->setClauseSociale($this->getClauseSociale());
        $copyObj->setClauseEnvironnementale($this->getClauseEnvironnementale());
        $copyObj->setReponseObligatoire($this->getReponseObligatoire());
        $copyObj->setAutoriserPublicite($this->getAutoriserPublicite());
        $copyObj->setTypeEnvoi($this->getTypeEnvoi());
        $copyObj->setChiffrementOffre($this->getChiffrementOffre());
        $copyObj->setEnvCandidature($this->getEnvCandidature());
        $copyObj->setEnvOffre($this->getEnvOffre());
        $copyObj->setEnvAnonymat($this->getEnvAnonymat());
        $copyObj->setIdEtatConsultation($this->getIdEtatConsultation());
        $copyObj->setReferenceConnecteur($this->getReferenceConnecteur());
        $copyObj->setConsStatut($this->getConsStatut());
        $copyObj->setIdApprobateur($this->getIdApprobateur());
        $copyObj->setIdValideur($this->getIdValideur());
        $copyObj->setServiceValidation($this->getServiceValidation());
        $copyObj->setIdCreateur($this->getIdCreateur());
        $copyObj->setNomCreateur($this->getNomCreateur());
        $copyObj->setPrenomCreateur($this->getPrenomCreateur());
        $copyObj->setSignatureActeEngagement($this->getSignatureActeEngagement());
        $copyObj->setArchivemetadescription($this->getArchivemetadescription());
        $copyObj->setArchivemetamotsclef($this->getArchivemetamotsclef());
        $copyObj->setArchiveidblobzip($this->getArchiveidblobzip());
        $copyObj->setDecisionPartielle($this->getDecisionPartielle());
        $copyObj->setTypeDecisionARenseigner($this->getTypeDecisionARenseigner());
        $copyObj->setTypeDecisionAttributionMarche($this->getTypeDecisionAttributionMarche());
        $copyObj->setTypeDecisionDeclarationSansSuite($this->getTypeDecisionDeclarationSansSuite());
        $copyObj->setTypeDecisionDeclarationInfructueux($this->getTypeDecisionDeclarationInfructueux());
        $copyObj->setTypeDecisionSelectionEntreprise($this->getTypeDecisionSelectionEntreprise());
        $copyObj->setTypeDecisionAttributionAccordCadre($this->getTypeDecisionAttributionAccordCadre());
        $copyObj->setTypeDecisionAdmissionSad($this->getTypeDecisionAdmissionSad());
        $copyObj->setTypeDecisionAutre($this->getTypeDecisionAutre());
        $copyObj->setIdArchiveur($this->getIdArchiveur());
        $copyObj->setPrenomNomAgentTelechargementPlis($this->getPrenomNomAgentTelechargementPlis());
        $copyObj->setIdAgentTelechargementPlis($this->getIdAgentTelechargementPlis());
        $copyObj->setPathTelechargementPlis($this->getPathTelechargementPlis());
        $copyObj->setDateTelechargementPlis($this->getDateTelechargementPlis());
        $copyObj->setServiceValidationIntermediaire($this->getServiceValidationIntermediaire());
        $copyObj->setEnvOffreTechnique($this->getEnvOffreTechnique());
        $copyObj->setRefOrgPartenaire($this->getRefOrgPartenaire());
        $copyObj->setDateArchivage($this->getDateArchivage());
        $copyObj->setDateDecisionAnnulation($this->getDateDecisionAnnulation());
        $copyObj->setCommentaireAnnulation($this->getCommentaireAnnulation());
        $copyObj->setDateMiseEnLigneSouhaitee($this->getDateMiseEnLigneSouhaitee());
        $copyObj->setEtatEnAttenteValidation($this->getEtatEnAttenteValidation());
        $copyObj->setDossierAdditif($this->getDossierAdditif());
        $copyObj->setTypeMarche($this->getTypeMarche());
        $copyObj->setTypePrestation($this->getTypePrestation());
        $copyObj->setDateModification($this->getDateModification());
        $copyObj->setDelaiPartiel($this->getDelaiPartiel());
        $copyObj->setDatefinlocale($this->getDatefinlocale());
        $copyObj->setLieuresidence($this->getLieuresidence());
        $copyObj->setAlerte($this->getAlerte());
        $copyObj->setDoublon($this->getDoublon());
        $copyObj->setDenominationAdapte($this->getDenominationAdapte());
        $copyObj->setUrlConsultationAvisPub($this->getUrlConsultationAvisPub());
        $copyObj->setDoublonDe($this->getDoublonDe());
        $copyObj->setEntiteAdjudicatrice($this->getEntiteAdjudicatrice());
        $copyObj->setCodeOperation($this->getCodeOperation());
        $copyObj->setClauseSocialeConditionExecution($this->getClauseSocialeConditionExecution());
        $copyObj->setClauseSocialeInsertion($this->getClauseSocialeInsertion());
        $copyObj->setClauseSocialeAteliersProteges($this->getClauseSocialeAteliersProteges());
        $copyObj->setClauseEnvSpecsTechniques($this->getClauseEnvSpecsTechniques());
        $copyObj->setClauseEnvCondExecution($this->getClauseEnvCondExecution());
        $copyObj->setClauseEnvCriteresSelect($this->getClauseEnvCriteresSelect());
        $copyObj->setIdDonneeComplementaire($this->getIdDonneeComplementaire());
        $copyObj->setDonneeComplementaireObligatoire($this->getDonneeComplementaireObligatoire());
        $copyObj->setModeOuvertureReponse($this->getModeOuvertureReponse());
        $copyObj->setIdFichierAnnulation($this->getIdFichierAnnulation());
        $copyObj->setIdoperation($this->getIdoperation());
        $copyObj->setMarchePublicSimplifie($this->getMarchePublicSimplifie());
        $copyObj->setInfosBlocsAtlas($this->getInfosBlocsAtlas());
        $copyObj->setDateFinUnix($this->getDateFinUnix());
        $copyObj->setDateAchevement($this->getDateAchevement());
        $copyObj->setNombreDeLots($this->getNombreDeLots());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getCommonAVISs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonAVIS($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonAnnonces() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonAnnonce($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonAnnonceBoampsRelatedByOrganismeConsultationRef() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonAnnonceBoampRelatedByOrganismeConsultationRef($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonAnnonceBoampsRelatedByConsultationRef() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonAnnonceBoampRelatedByConsultationRef($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonAvisPubs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonAvisPub($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonCategorieLots() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonCategorieLot($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonComplements() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonComplement($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonConsultationHistoriqueEtats() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonConsultationHistoriqueEtat($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonDATEFINs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonDATEFIN($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonDAConsultations() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonDAConsultation($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonDCEs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonDCE($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonDocumentExternes() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonDocumentExterne($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonHeliosPiecePublicites() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonHeliosPiecePublicite($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonHeliosPvConsultations() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonHeliosPvConsultation($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonHeliosRapportPrefets() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonHeliosRapportPrefet($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonHeliosTableauArs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonHeliosTableauAr($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonHeliosTeletransmissions() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonHeliosTeletransmission($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonInterneConsultations() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonInterneConsultation($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonInterneConsultationSuiviSeuls() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonInterneConsultationSuiviSeul($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonOffrePapiers() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonOffrePapier($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonOffress() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonOffres($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonPanierEntreprises() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonPanierEntreprise($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonPiecesDCEsRelatedByRefConsultation() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonPiecesDCERelatedByRefConsultation($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonPiecesDCEsRelatedByOrganismeConsultation() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonPiecesDCERelatedByOrganismeConsultation($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonRGs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonRG($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonRetraitPapiers() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonRetraitPapier($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonSupportPublications() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonSupportPublication($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonTelechargements() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonTelechargement($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonTelechargementAnonymesRelatedByOrganismeConsultationRef() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonTelechargementAnonymeRelatedByOrganismeConsultationRef($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonTelechargementAnonymesRelatedByConsultationRef() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonTelechargementAnonymeRelatedByConsultationRef($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonConsultationDocumentCfes() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonConsultationDocumentCfe($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonTCalendriers() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonTCalendrier($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonTParamDossierFormulaires() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonTParamDossierFormulaire($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonTReponseElecFormulaires() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonTReponseElecFormulaire($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getCommonVisiteLieuxs() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addCommonVisiteLieux($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setReference(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return CommonConsultation Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return CommonConsultationPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new CommonConsultationPeer();
        }

        return self::$peer;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('CommonAVIS' == $relationName) {
            $this->initCommonAVISs();
        }
        if ('CommonAnnonce' == $relationName) {
            $this->initCommonAnnonces();
        }
        if ('CommonAnnonceBoampRelatedByOrganismeConsultationRef' == $relationName) {
            $this->initCommonAnnonceBoampsRelatedByOrganismeConsultationRef();
        }
        if ('CommonAnnonceBoampRelatedByConsultationRef' == $relationName) {
            $this->initCommonAnnonceBoampsRelatedByConsultationRef();
        }
        if ('CommonAvisPub' == $relationName) {
            $this->initCommonAvisPubs();
        }
        if ('CommonCategorieLot' == $relationName) {
            $this->initCommonCategorieLots();
        }
        if ('CommonComplement' == $relationName) {
            $this->initCommonComplements();
        }
        if ('CommonConsultationHistoriqueEtat' == $relationName) {
            $this->initCommonConsultationHistoriqueEtats();
        }
        if ('CommonDATEFIN' == $relationName) {
            $this->initCommonDATEFINs();
        }
        if ('CommonDAConsultation' == $relationName) {
            $this->initCommonDAConsultations();
        }
        if ('CommonDCE' == $relationName) {
            $this->initCommonDCEs();
        }
        if ('CommonDocumentExterne' == $relationName) {
            $this->initCommonDocumentExternes();
        }
        if ('CommonHeliosPiecePublicite' == $relationName) {
            $this->initCommonHeliosPiecePublicites();
        }
        if ('CommonHeliosPvConsultation' == $relationName) {
            $this->initCommonHeliosPvConsultations();
        }
        if ('CommonHeliosRapportPrefet' == $relationName) {
            $this->initCommonHeliosRapportPrefets();
        }
        if ('CommonHeliosTableauAr' == $relationName) {
            $this->initCommonHeliosTableauArs();
        }
        if ('CommonHeliosTeletransmission' == $relationName) {
            $this->initCommonHeliosTeletransmissions();
        }
        if ('CommonInterneConsultation' == $relationName) {
            $this->initCommonInterneConsultations();
        }
        if ('CommonInterneConsultationSuiviSeul' == $relationName) {
            $this->initCommonInterneConsultationSuiviSeuls();
        }
        if ('CommonOffrePapier' == $relationName) {
            $this->initCommonOffrePapiers();
        }
        if ('CommonOffres' == $relationName) {
            $this->initCommonOffress();
        }
        if ('CommonPanierEntreprise' == $relationName) {
            $this->initCommonPanierEntreprises();
        }
        if ('CommonPiecesDCERelatedByRefConsultation' == $relationName) {
            $this->initCommonPiecesDCEsRelatedByRefConsultation();
        }
        if ('CommonPiecesDCERelatedByOrganismeConsultation' == $relationName) {
            $this->initCommonPiecesDCEsRelatedByOrganismeConsultation();
        }
        if ('CommonRG' == $relationName) {
            $this->initCommonRGs();
        }
        if ('CommonRetraitPapier' == $relationName) {
            $this->initCommonRetraitPapiers();
        }
        if ('CommonSupportPublication' == $relationName) {
            $this->initCommonSupportPublications();
        }
        if ('CommonTelechargement' == $relationName) {
            $this->initCommonTelechargements();
        }
        if ('CommonTelechargementAnonymeRelatedByOrganismeConsultationRef' == $relationName) {
            $this->initCommonTelechargementAnonymesRelatedByOrganismeConsultationRef();
        }
        if ('CommonTelechargementAnonymeRelatedByConsultationRef' == $relationName) {
            $this->initCommonTelechargementAnonymesRelatedByConsultationRef();
        }
        if ('CommonConsultationDocumentCfe' == $relationName) {
            $this->initCommonConsultationDocumentCfes();
        }
        if ('CommonTCalendrier' == $relationName) {
            $this->initCommonTCalendriers();
        }
        if ('CommonTParamDossierFormulaire' == $relationName) {
            $this->initCommonTParamDossierFormulaires();
        }
        if ('CommonTReponseElecFormulaire' == $relationName) {
            $this->initCommonTReponseElecFormulaires();
        }
        if ('CommonVisiteLieux' == $relationName) {
            $this->initCommonVisiteLieuxs();
        }
    }

    /**
     * Clears out the collCommonAVISs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonAVISs()
     */
    public function clearCommonAVISs()
    {
        $this->collCommonAVISs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonAVISsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonAVISs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonAVISs($v = true)
    {
        $this->collCommonAVISsPartial = $v;
    }

    /**
     * Initializes the collCommonAVISs collection.
     *
     * By default this just sets the collCommonAVISs collection to an empty array (like clearcollCommonAVISs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonAVISs($overrideExisting = true)
    {
        if (null !== $this->collCommonAVISs && !$overrideExisting) {
            return;
        }
        $this->collCommonAVISs = new PropelObjectCollection();
        $this->collCommonAVISs->setModel('CommonAVIS');
    }

    /**
     * Gets an array of CommonAVIS objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonAVIS[] List of CommonAVIS objects
     * @throws PropelException
     */
    public function getCommonAVISs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonAVISsPartial && !$this->isNew();
        if (null === $this->collCommonAVISs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonAVISs) {
                // return empty collection
                $this->initCommonAVISs();
            } else {
                $collCommonAVISs = CommonAVISQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonAVISsPartial && count($collCommonAVISs)) {
                      $this->initCommonAVISs(false);

                      foreach ($collCommonAVISs as $obj) {
                        if (false == $this->collCommonAVISs->contains($obj)) {
                          $this->collCommonAVISs->append($obj);
                        }
                      }

                      $this->collCommonAVISsPartial = true;
                    }

                    $collCommonAVISs->getInternalIterator()->rewind();

                    return $collCommonAVISs;
                }

                if ($partial && $this->collCommonAVISs) {
                    foreach ($this->collCommonAVISs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonAVISs[] = $obj;
                        }
                    }
                }

                $this->collCommonAVISs = $collCommonAVISs;
                $this->collCommonAVISsPartial = false;
            }
        }

        return $this->collCommonAVISs;
    }

    /**
     * Sets a collection of CommonAVIS objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonAVISs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonAVISs(PropelCollection $commonAVISs, PropelPDO $con = null)
    {
        $commonAVISsToDelete = $this->getCommonAVISs(new Criteria(), $con)->diff($commonAVISs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonAVISsScheduledForDeletion = clone $commonAVISsToDelete;

        foreach ($commonAVISsToDelete as $commonAVISRemoved) {
            $commonAVISRemoved->setCommonConsultation(null);
        }

        $this->collCommonAVISs = null;
        foreach ($commonAVISs as $commonAVIS) {
            $this->addCommonAVIS($commonAVIS);
        }

        $this->collCommonAVISs = $commonAVISs;
        $this->collCommonAVISsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonAVIS objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonAVIS objects.
     * @throws PropelException
     */
    public function countCommonAVISs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonAVISsPartial && !$this->isNew();
        if (null === $this->collCommonAVISs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonAVISs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonAVISs());
            }
            $query = CommonAVISQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonAVISs);
    }

    /**
     * Method called to associate a CommonAVIS object to this object
     * through the CommonAVIS foreign key attribute.
     *
     * @param   CommonAVIS $l CommonAVIS
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonAVIS(CommonAVIS $l)
    {
        if ($this->collCommonAVISs === null) {
            $this->initCommonAVISs();
            $this->collCommonAVISsPartial = true;
        }
        if (!in_array($l, $this->collCommonAVISs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonAVIS($l);
        }

        return $this;
    }

    /**
     * @param	CommonAVIS $commonAVIS The commonAVIS object to add.
     */
    protected function doAddCommonAVIS($commonAVIS)
    {
        $this->collCommonAVISs[]= $commonAVIS;
        $commonAVIS->setCommonConsultation($this);
    }

    /**
     * @param	CommonAVIS $commonAVIS The commonAVIS object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonAVIS($commonAVIS)
    {
        if ($this->getCommonAVISs()->contains($commonAVIS)) {
            $this->collCommonAVISs->remove($this->collCommonAVISs->search($commonAVIS));
            if (null === $this->commonAVISsScheduledForDeletion) {
                $this->commonAVISsScheduledForDeletion = clone $this->collCommonAVISs;
                $this->commonAVISsScheduledForDeletion->clear();
            }
            $this->commonAVISsScheduledForDeletion[]= clone $commonAVIS;
            $commonAVIS->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonAnnonces collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonAnnonces()
     */
    public function clearCommonAnnonces()
    {
        $this->collCommonAnnonces = null; // important to set this to null since that means it is uninitialized
        $this->collCommonAnnoncesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonAnnonces collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonAnnonces($v = true)
    {
        $this->collCommonAnnoncesPartial = $v;
    }

    /**
     * Initializes the collCommonAnnonces collection.
     *
     * By default this just sets the collCommonAnnonces collection to an empty array (like clearcollCommonAnnonces());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonAnnonces($overrideExisting = true)
    {
        if (null !== $this->collCommonAnnonces && !$overrideExisting) {
            return;
        }
        $this->collCommonAnnonces = new PropelObjectCollection();
        $this->collCommonAnnonces->setModel('CommonAnnonce');
    }

    /**
     * Gets an array of CommonAnnonce objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonAnnonce[] List of CommonAnnonce objects
     * @throws PropelException
     */
    public function getCommonAnnonces($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonAnnoncesPartial && !$this->isNew();
        if (null === $this->collCommonAnnonces || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonAnnonces) {
                // return empty collection
                $this->initCommonAnnonces();
            } else {
                $collCommonAnnonces = CommonAnnonceQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonAnnoncesPartial && count($collCommonAnnonces)) {
                      $this->initCommonAnnonces(false);

                      foreach ($collCommonAnnonces as $obj) {
                        if (false == $this->collCommonAnnonces->contains($obj)) {
                          $this->collCommonAnnonces->append($obj);
                        }
                      }

                      $this->collCommonAnnoncesPartial = true;
                    }

                    $collCommonAnnonces->getInternalIterator()->rewind();

                    return $collCommonAnnonces;
                }

                if ($partial && $this->collCommonAnnonces) {
                    foreach ($this->collCommonAnnonces as $obj) {
                        if ($obj->isNew()) {
                            $collCommonAnnonces[] = $obj;
                        }
                    }
                }

                $this->collCommonAnnonces = $collCommonAnnonces;
                $this->collCommonAnnoncesPartial = false;
            }
        }

        return $this->collCommonAnnonces;
    }

    /**
     * Sets a collection of CommonAnnonce objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonAnnonces A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonAnnonces(PropelCollection $commonAnnonces, PropelPDO $con = null)
    {
        $commonAnnoncesToDelete = $this->getCommonAnnonces(new Criteria(), $con)->diff($commonAnnonces);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonAnnoncesScheduledForDeletion = clone $commonAnnoncesToDelete;

        foreach ($commonAnnoncesToDelete as $commonAnnonceRemoved) {
            $commonAnnonceRemoved->setCommonConsultation(null);
        }

        $this->collCommonAnnonces = null;
        foreach ($commonAnnonces as $commonAnnonce) {
            $this->addCommonAnnonce($commonAnnonce);
        }

        $this->collCommonAnnonces = $commonAnnonces;
        $this->collCommonAnnoncesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonAnnonce objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonAnnonce objects.
     * @throws PropelException
     */
    public function countCommonAnnonces(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonAnnoncesPartial && !$this->isNew();
        if (null === $this->collCommonAnnonces || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonAnnonces) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonAnnonces());
            }
            $query = CommonAnnonceQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonAnnonces);
    }

    /**
     * Method called to associate a CommonAnnonce object to this object
     * through the CommonAnnonce foreign key attribute.
     *
     * @param   CommonAnnonce $l CommonAnnonce
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonAnnonce(CommonAnnonce $l)
    {
        if ($this->collCommonAnnonces === null) {
            $this->initCommonAnnonces();
            $this->collCommonAnnoncesPartial = true;
        }
        if (!in_array($l, $this->collCommonAnnonces->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonAnnonce($l);
        }

        return $this;
    }

    /**
     * @param	CommonAnnonce $commonAnnonce The commonAnnonce object to add.
     */
    protected function doAddCommonAnnonce($commonAnnonce)
    {
        $this->collCommonAnnonces[]= $commonAnnonce;
        $commonAnnonce->setCommonConsultation($this);
    }

    /**
     * @param	CommonAnnonce $commonAnnonce The commonAnnonce object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonAnnonce($commonAnnonce)
    {
        if ($this->getCommonAnnonces()->contains($commonAnnonce)) {
            $this->collCommonAnnonces->remove($this->collCommonAnnonces->search($commonAnnonce));
            if (null === $this->commonAnnoncesScheduledForDeletion) {
                $this->commonAnnoncesScheduledForDeletion = clone $this->collCommonAnnonces;
                $this->commonAnnoncesScheduledForDeletion->clear();
            }
            $this->commonAnnoncesScheduledForDeletion[]= clone $commonAnnonce;
            $commonAnnonce->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonAnnonceBoampsRelatedByOrganismeConsultationRef collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonAnnonceBoampsRelatedByOrganismeConsultationRef()
     */
    public function clearCommonAnnonceBoampsRelatedByOrganismeConsultationRef()
    {
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = null; // important to set this to null since that means it is uninitialized
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonAnnonceBoampsRelatedByOrganismeConsultationRef collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonAnnonceBoampsRelatedByOrganismeConsultationRef($v = true)
    {
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial = $v;
    }

    /**
     * Initializes the collCommonAnnonceBoampsRelatedByOrganismeConsultationRef collection.
     *
     * By default this just sets the collCommonAnnonceBoampsRelatedByOrganismeConsultationRef collection to an empty array (like clearcollCommonAnnonceBoampsRelatedByOrganismeConsultationRef());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonAnnonceBoampsRelatedByOrganismeConsultationRef($overrideExisting = true)
    {
        if (null !== $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef && !$overrideExisting) {
            return;
        }
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = new PropelObjectCollection();
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->setModel('CommonAnnonceBoamp');
    }

    /**
     * Gets an array of CommonAnnonceBoamp objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonAnnonceBoamp[] List of CommonAnnonceBoamp objects
     * @throws PropelException
     */
    public function getCommonAnnonceBoampsRelatedByOrganismeConsultationRef($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef) {
                // return empty collection
                $this->initCommonAnnonceBoampsRelatedByOrganismeConsultationRef();
            } else {
                $collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = CommonAnnonceBoampQuery::create(null, $criteria)
                    ->filterByCommonConsultationRelatedByOrganismeConsultationRef($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial && count($collCommonAnnonceBoampsRelatedByOrganismeConsultationRef)) {
                      $this->initCommonAnnonceBoampsRelatedByOrganismeConsultationRef(false);

                      foreach ($collCommonAnnonceBoampsRelatedByOrganismeConsultationRef as $obj) {
                        if (false == $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->contains($obj)) {
                          $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->append($obj);
                        }
                      }

                      $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial = true;
                    }

                    $collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->getInternalIterator()->rewind();

                    return $collCommonAnnonceBoampsRelatedByOrganismeConsultationRef;
                }

                if ($partial && $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef) {
                    foreach ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef as $obj) {
                        if ($obj->isNew()) {
                            $collCommonAnnonceBoampsRelatedByOrganismeConsultationRef[] = $obj;
                        }
                    }
                }

                $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = $collCommonAnnonceBoampsRelatedByOrganismeConsultationRef;
                $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial = false;
            }
        }

        return $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef;
    }

    /**
     * Sets a collection of CommonAnnonceBoampRelatedByOrganismeConsultationRef objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonAnnonceBoampsRelatedByOrganismeConsultationRef A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonAnnonceBoampsRelatedByOrganismeConsultationRef(PropelCollection $commonAnnonceBoampsRelatedByOrganismeConsultationRef, PropelPDO $con = null)
    {
        $commonAnnonceBoampsRelatedByOrganismeConsultationRefToDelete = $this->getCommonAnnonceBoampsRelatedByOrganismeConsultationRef(new Criteria(), $con)->diff($commonAnnonceBoampsRelatedByOrganismeConsultationRef);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion = clone $commonAnnonceBoampsRelatedByOrganismeConsultationRefToDelete;

        foreach ($commonAnnonceBoampsRelatedByOrganismeConsultationRefToDelete as $commonAnnonceBoampRelatedByOrganismeConsultationRefRemoved) {
            $commonAnnonceBoampRelatedByOrganismeConsultationRefRemoved->setCommonConsultationRelatedByOrganismeConsultationRef(null);
        }

        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = null;
        foreach ($commonAnnonceBoampsRelatedByOrganismeConsultationRef as $commonAnnonceBoampRelatedByOrganismeConsultationRef) {
            $this->addCommonAnnonceBoampRelatedByOrganismeConsultationRef($commonAnnonceBoampRelatedByOrganismeConsultationRef);
        }

        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = $commonAnnonceBoampsRelatedByOrganismeConsultationRef;
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonAnnonceBoamp objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonAnnonceBoamp objects.
     * @throws PropelException
     */
    public function countCommonAnnonceBoampsRelatedByOrganismeConsultationRef(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonAnnonceBoampsRelatedByOrganismeConsultationRef());
            }
            $query = CommonAnnonceBoampQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultationRelatedByOrganismeConsultationRef($this)
                ->count($con);
        }

        return count($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef);
    }

    /**
     * Method called to associate a CommonAnnonceBoamp object to this object
     * through the CommonAnnonceBoamp foreign key attribute.
     *
     * @param   CommonAnnonceBoamp $l CommonAnnonceBoamp
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonAnnonceBoampRelatedByOrganismeConsultationRef(CommonAnnonceBoamp $l)
    {
        if ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef === null) {
            $this->initCommonAnnonceBoampsRelatedByOrganismeConsultationRef();
            $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRefPartial = true;
        }
        if (!in_array($l, $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonAnnonceBoampRelatedByOrganismeConsultationRef($l);
        }

        return $this;
    }

    /**
     * @param	CommonAnnonceBoampRelatedByOrganismeConsultationRef $commonAnnonceBoampRelatedByOrganismeConsultationRef The commonAnnonceBoampRelatedByOrganismeConsultationRef object to add.
     */
    protected function doAddCommonAnnonceBoampRelatedByOrganismeConsultationRef($commonAnnonceBoampRelatedByOrganismeConsultationRef)
    {
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef[]= $commonAnnonceBoampRelatedByOrganismeConsultationRef;
        $commonAnnonceBoampRelatedByOrganismeConsultationRef->setCommonConsultationRelatedByOrganismeConsultationRef($this);
    }

    /**
     * @param	CommonAnnonceBoampRelatedByOrganismeConsultationRef $commonAnnonceBoampRelatedByOrganismeConsultationRef The commonAnnonceBoampRelatedByOrganismeConsultationRef object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonAnnonceBoampRelatedByOrganismeConsultationRef($commonAnnonceBoampRelatedByOrganismeConsultationRef)
    {
        if ($this->getCommonAnnonceBoampsRelatedByOrganismeConsultationRef()->contains($commonAnnonceBoampRelatedByOrganismeConsultationRef)) {
            $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->remove($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->search($commonAnnonceBoampRelatedByOrganismeConsultationRef));
            if (null === $this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion) {
                $this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion = clone $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef;
                $this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion->clear();
            }
            $this->commonAnnonceBoampsRelatedByOrganismeConsultationRefScheduledForDeletion[]= clone $commonAnnonceBoampRelatedByOrganismeConsultationRef;
            $commonAnnonceBoampRelatedByOrganismeConsultationRef->setCommonConsultationRelatedByOrganismeConsultationRef(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonAnnonceBoampsRelatedByConsultationRef collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonAnnonceBoampsRelatedByConsultationRef()
     */
    public function clearCommonAnnonceBoampsRelatedByConsultationRef()
    {
        $this->collCommonAnnonceBoampsRelatedByConsultationRef = null; // important to set this to null since that means it is uninitialized
        $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonAnnonceBoampsRelatedByConsultationRef collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonAnnonceBoampsRelatedByConsultationRef($v = true)
    {
        $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial = $v;
    }

    /**
     * Initializes the collCommonAnnonceBoampsRelatedByConsultationRef collection.
     *
     * By default this just sets the collCommonAnnonceBoampsRelatedByConsultationRef collection to an empty array (like clearcollCommonAnnonceBoampsRelatedByConsultationRef());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonAnnonceBoampsRelatedByConsultationRef($overrideExisting = true)
    {
        if (null !== $this->collCommonAnnonceBoampsRelatedByConsultationRef && !$overrideExisting) {
            return;
        }
        $this->collCommonAnnonceBoampsRelatedByConsultationRef = new PropelObjectCollection();
        $this->collCommonAnnonceBoampsRelatedByConsultationRef->setModel('CommonAnnonceBoamp');
    }

    /**
     * Gets an array of CommonAnnonceBoamp objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonAnnonceBoamp[] List of CommonAnnonceBoamp objects
     * @throws PropelException
     */
    public function getCommonAnnonceBoampsRelatedByConsultationRef($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonAnnonceBoampsRelatedByConsultationRef || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonAnnonceBoampsRelatedByConsultationRef) {
                // return empty collection
                $this->initCommonAnnonceBoampsRelatedByConsultationRef();
            } else {
                $collCommonAnnonceBoampsRelatedByConsultationRef = CommonAnnonceBoampQuery::create(null, $criteria)
                    ->filterByCommonConsultationRelatedByConsultationRef($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial && count($collCommonAnnonceBoampsRelatedByConsultationRef)) {
                      $this->initCommonAnnonceBoampsRelatedByConsultationRef(false);

                      foreach ($collCommonAnnonceBoampsRelatedByConsultationRef as $obj) {
                        if (false == $this->collCommonAnnonceBoampsRelatedByConsultationRef->contains($obj)) {
                          $this->collCommonAnnonceBoampsRelatedByConsultationRef->append($obj);
                        }
                      }

                      $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial = true;
                    }

                    $collCommonAnnonceBoampsRelatedByConsultationRef->getInternalIterator()->rewind();

                    return $collCommonAnnonceBoampsRelatedByConsultationRef;
                }

                if ($partial && $this->collCommonAnnonceBoampsRelatedByConsultationRef) {
                    foreach ($this->collCommonAnnonceBoampsRelatedByConsultationRef as $obj) {
                        if ($obj->isNew()) {
                            $collCommonAnnonceBoampsRelatedByConsultationRef[] = $obj;
                        }
                    }
                }

                $this->collCommonAnnonceBoampsRelatedByConsultationRef = $collCommonAnnonceBoampsRelatedByConsultationRef;
                $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial = false;
            }
        }

        return $this->collCommonAnnonceBoampsRelatedByConsultationRef;
    }

    /**
     * Sets a collection of CommonAnnonceBoampRelatedByConsultationRef objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonAnnonceBoampsRelatedByConsultationRef A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonAnnonceBoampsRelatedByConsultationRef(PropelCollection $commonAnnonceBoampsRelatedByConsultationRef, PropelPDO $con = null)
    {
        $commonAnnonceBoampsRelatedByConsultationRefToDelete = $this->getCommonAnnonceBoampsRelatedByConsultationRef(new Criteria(), $con)->diff($commonAnnonceBoampsRelatedByConsultationRef);


        $this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion = $commonAnnonceBoampsRelatedByConsultationRefToDelete;

        foreach ($commonAnnonceBoampsRelatedByConsultationRefToDelete as $commonAnnonceBoampRelatedByConsultationRefRemoved) {
            $commonAnnonceBoampRelatedByConsultationRefRemoved->setCommonConsultationRelatedByConsultationRef(null);
        }

        $this->collCommonAnnonceBoampsRelatedByConsultationRef = null;
        foreach ($commonAnnonceBoampsRelatedByConsultationRef as $commonAnnonceBoampRelatedByConsultationRef) {
            $this->addCommonAnnonceBoampRelatedByConsultationRef($commonAnnonceBoampRelatedByConsultationRef);
        }

        $this->collCommonAnnonceBoampsRelatedByConsultationRef = $commonAnnonceBoampsRelatedByConsultationRef;
        $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonAnnonceBoamp objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonAnnonceBoamp objects.
     * @throws PropelException
     */
    public function countCommonAnnonceBoampsRelatedByConsultationRef(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonAnnonceBoampsRelatedByConsultationRef || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonAnnonceBoampsRelatedByConsultationRef) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonAnnonceBoampsRelatedByConsultationRef());
            }
            $query = CommonAnnonceBoampQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultationRelatedByConsultationRef($this)
                ->count($con);
        }

        return count($this->collCommonAnnonceBoampsRelatedByConsultationRef);
    }

    /**
     * Method called to associate a CommonAnnonceBoamp object to this object
     * through the CommonAnnonceBoamp foreign key attribute.
     *
     * @param   CommonAnnonceBoamp $l CommonAnnonceBoamp
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonAnnonceBoampRelatedByConsultationRef(CommonAnnonceBoamp $l)
    {
        if ($this->collCommonAnnonceBoampsRelatedByConsultationRef === null) {
            $this->initCommonAnnonceBoampsRelatedByConsultationRef();
            $this->collCommonAnnonceBoampsRelatedByConsultationRefPartial = true;
        }
        if (!in_array($l, $this->collCommonAnnonceBoampsRelatedByConsultationRef->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonAnnonceBoampRelatedByConsultationRef($l);
        }

        return $this;
    }

    /**
     * @param	CommonAnnonceBoampRelatedByConsultationRef $commonAnnonceBoampRelatedByConsultationRef The commonAnnonceBoampRelatedByConsultationRef object to add.
     */
    protected function doAddCommonAnnonceBoampRelatedByConsultationRef($commonAnnonceBoampRelatedByConsultationRef)
    {
        $this->collCommonAnnonceBoampsRelatedByConsultationRef[]= $commonAnnonceBoampRelatedByConsultationRef;
        $commonAnnonceBoampRelatedByConsultationRef->setCommonConsultationRelatedByConsultationRef($this);
    }

    /**
     * @param	CommonAnnonceBoampRelatedByConsultationRef $commonAnnonceBoampRelatedByConsultationRef The commonAnnonceBoampRelatedByConsultationRef object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonAnnonceBoampRelatedByConsultationRef($commonAnnonceBoampRelatedByConsultationRef)
    {
        if ($this->getCommonAnnonceBoampsRelatedByConsultationRef()->contains($commonAnnonceBoampRelatedByConsultationRef)) {
            $this->collCommonAnnonceBoampsRelatedByConsultationRef->remove($this->collCommonAnnonceBoampsRelatedByConsultationRef->search($commonAnnonceBoampRelatedByConsultationRef));
            if (null === $this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion) {
                $this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion = clone $this->collCommonAnnonceBoampsRelatedByConsultationRef;
                $this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion->clear();
            }
            $this->commonAnnonceBoampsRelatedByConsultationRefScheduledForDeletion[]= clone $commonAnnonceBoampRelatedByConsultationRef;
            $commonAnnonceBoampRelatedByConsultationRef->setCommonConsultationRelatedByConsultationRef(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonAvisPubs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonAvisPubs()
     */
    public function clearCommonAvisPubs()
    {
        $this->collCommonAvisPubs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonAvisPubsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonAvisPubs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonAvisPubs($v = true)
    {
        $this->collCommonAvisPubsPartial = $v;
    }

    /**
     * Initializes the collCommonAvisPubs collection.
     *
     * By default this just sets the collCommonAvisPubs collection to an empty array (like clearcollCommonAvisPubs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonAvisPubs($overrideExisting = true)
    {
        if (null !== $this->collCommonAvisPubs && !$overrideExisting) {
            return;
        }
        $this->collCommonAvisPubs = new PropelObjectCollection();
        $this->collCommonAvisPubs->setModel('CommonAvisPub');
    }

    /**
     * Gets an array of CommonAvisPub objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonAvisPub[] List of CommonAvisPub objects
     * @throws PropelException
     */
    public function getCommonAvisPubs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonAvisPubsPartial && !$this->isNew();
        if (null === $this->collCommonAvisPubs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonAvisPubs) {
                // return empty collection
                $this->initCommonAvisPubs();
            } else {
                $collCommonAvisPubs = CommonAvisPubQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonAvisPubsPartial && count($collCommonAvisPubs)) {
                      $this->initCommonAvisPubs(false);

                      foreach ($collCommonAvisPubs as $obj) {
                        if (false == $this->collCommonAvisPubs->contains($obj)) {
                          $this->collCommonAvisPubs->append($obj);
                        }
                      }

                      $this->collCommonAvisPubsPartial = true;
                    }

                    $collCommonAvisPubs->getInternalIterator()->rewind();

                    return $collCommonAvisPubs;
                }

                if ($partial && $this->collCommonAvisPubs) {
                    foreach ($this->collCommonAvisPubs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonAvisPubs[] = $obj;
                        }
                    }
                }

                $this->collCommonAvisPubs = $collCommonAvisPubs;
                $this->collCommonAvisPubsPartial = false;
            }
        }

        return $this->collCommonAvisPubs;
    }

    /**
     * Sets a collection of CommonAvisPub objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonAvisPubs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonAvisPubs(PropelCollection $commonAvisPubs, PropelPDO $con = null)
    {
        $commonAvisPubsToDelete = $this->getCommonAvisPubs(new Criteria(), $con)->diff($commonAvisPubs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonAvisPubsScheduledForDeletion = clone $commonAvisPubsToDelete;

        foreach ($commonAvisPubsToDelete as $commonAvisPubRemoved) {
            $commonAvisPubRemoved->setCommonConsultation(null);
        }

        $this->collCommonAvisPubs = null;
        foreach ($commonAvisPubs as $commonAvisPub) {
            $this->addCommonAvisPub($commonAvisPub);
        }

        $this->collCommonAvisPubs = $commonAvisPubs;
        $this->collCommonAvisPubsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonAvisPub objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonAvisPub objects.
     * @throws PropelException
     */
    public function countCommonAvisPubs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonAvisPubsPartial && !$this->isNew();
        if (null === $this->collCommonAvisPubs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonAvisPubs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonAvisPubs());
            }
            $query = CommonAvisPubQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonAvisPubs);
    }

    /**
     * Method called to associate a CommonAvisPub object to this object
     * through the CommonAvisPub foreign key attribute.
     *
     * @param   CommonAvisPub $l CommonAvisPub
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonAvisPub(CommonAvisPub $l)
    {
        if ($this->collCommonAvisPubs === null) {
            $this->initCommonAvisPubs();
            $this->collCommonAvisPubsPartial = true;
        }
        if (!in_array($l, $this->collCommonAvisPubs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonAvisPub($l);
        }

        return $this;
    }

    /**
     * @param	CommonAvisPub $commonAvisPub The commonAvisPub object to add.
     */
    protected function doAddCommonAvisPub($commonAvisPub)
    {
        $this->collCommonAvisPubs[]= $commonAvisPub;
        $commonAvisPub->setCommonConsultation($this);
    }

    /**
     * @param	CommonAvisPub $commonAvisPub The commonAvisPub object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonAvisPub($commonAvisPub)
    {
        if ($this->getCommonAvisPubs()->contains($commonAvisPub)) {
            $this->collCommonAvisPubs->remove($this->collCommonAvisPubs->search($commonAvisPub));
            if (null === $this->commonAvisPubsScheduledForDeletion) {
                $this->commonAvisPubsScheduledForDeletion = clone $this->collCommonAvisPubs;
                $this->commonAvisPubsScheduledForDeletion->clear();
            }
            $this->commonAvisPubsScheduledForDeletion[]= clone $commonAvisPub;
            $commonAvisPub->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonCategorieLots collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonCategorieLots()
     */
    public function clearCommonCategorieLots()
    {
        $this->collCommonCategorieLots = null; // important to set this to null since that means it is uninitialized
        $this->collCommonCategorieLotsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonCategorieLots collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonCategorieLots($v = true)
    {
        $this->collCommonCategorieLotsPartial = $v;
    }

    /**
     * Initializes the collCommonCategorieLots collection.
     *
     * By default this just sets the collCommonCategorieLots collection to an empty array (like clearcollCommonCategorieLots());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonCategorieLots($overrideExisting = true)
    {
        if (null !== $this->collCommonCategorieLots && !$overrideExisting) {
            return;
        }
        $this->collCommonCategorieLots = new PropelObjectCollection();
        $this->collCommonCategorieLots->setModel('CommonCategorieLot');
    }

    /**
     * Gets an array of CommonCategorieLot objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonCategorieLot[] List of CommonCategorieLot objects
     * @throws PropelException
     */
    public function getCommonCategorieLots($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonCategorieLotsPartial && !$this->isNew();
        if (null === $this->collCommonCategorieLots || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonCategorieLots) {
                // return empty collection
                $this->initCommonCategorieLots();
            } else {
                $collCommonCategorieLots = CommonCategorieLotQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonCategorieLotsPartial && count($collCommonCategorieLots)) {
                      $this->initCommonCategorieLots(false);

                      foreach ($collCommonCategorieLots as $obj) {
                        if (false == $this->collCommonCategorieLots->contains($obj)) {
                          $this->collCommonCategorieLots->append($obj);
                        }
                      }

                      $this->collCommonCategorieLotsPartial = true;
                    }

                    $collCommonCategorieLots->getInternalIterator()->rewind();

                    return $collCommonCategorieLots;
                }

                if ($partial && $this->collCommonCategorieLots) {
                    foreach ($this->collCommonCategorieLots as $obj) {
                        if ($obj->isNew()) {
                            $collCommonCategorieLots[] = $obj;
                        }
                    }
                }

                $this->collCommonCategorieLots = $collCommonCategorieLots;
                $this->collCommonCategorieLotsPartial = false;
            }
        }

        return $this->collCommonCategorieLots;
    }

    /**
     * Sets a collection of CommonCategorieLot objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonCategorieLots A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonCategorieLots(PropelCollection $commonCategorieLots, PropelPDO $con = null)
    {
        $commonCategorieLotsToDelete = $this->getCommonCategorieLots(new Criteria(), $con)->diff($commonCategorieLots);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonCategorieLotsScheduledForDeletion = clone $commonCategorieLotsToDelete;

        foreach ($commonCategorieLotsToDelete as $commonCategorieLotRemoved) {
            $commonCategorieLotRemoved->setCommonConsultation(null);
        }

        $this->collCommonCategorieLots = null;
        foreach ($commonCategorieLots as $commonCategorieLot) {
            $this->addCommonCategorieLot($commonCategorieLot);
        }

        $this->collCommonCategorieLots = $commonCategorieLots;
        $this->collCommonCategorieLotsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonCategorieLot objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonCategorieLot objects.
     * @throws PropelException
     */
    public function countCommonCategorieLots(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonCategorieLotsPartial && !$this->isNew();
        if (null === $this->collCommonCategorieLots || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonCategorieLots) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonCategorieLots());
            }
            $query = CommonCategorieLotQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonCategorieLots);
    }

    /**
     * Method called to associate a CommonCategorieLot object to this object
     * through the CommonCategorieLot foreign key attribute.
     *
     * @param   CommonCategorieLot $l CommonCategorieLot
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonCategorieLot(CommonCategorieLot $l)
    {
        if ($this->collCommonCategorieLots === null) {
            $this->initCommonCategorieLots();
            $this->collCommonCategorieLotsPartial = true;
        }
        if (!in_array($l, $this->collCommonCategorieLots->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonCategorieLot($l);
        }

        return $this;
    }

    /**
     * @param	CommonCategorieLot $commonCategorieLot The commonCategorieLot object to add.
     */
    protected function doAddCommonCategorieLot($commonCategorieLot)
    {
        $this->collCommonCategorieLots[]= $commonCategorieLot;
        $commonCategorieLot->setCommonConsultation($this);
    }

    /**
     * @param	CommonCategorieLot $commonCategorieLot The commonCategorieLot object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonCategorieLot($commonCategorieLot)
    {
        if ($this->getCommonCategorieLots()->contains($commonCategorieLot)) {
            $this->collCommonCategorieLots->remove($this->collCommonCategorieLots->search($commonCategorieLot));
            if (null === $this->commonCategorieLotsScheduledForDeletion) {
                $this->commonCategorieLotsScheduledForDeletion = clone $this->collCommonCategorieLots;
                $this->commonCategorieLotsScheduledForDeletion->clear();
            }
            $this->commonCategorieLotsScheduledForDeletion[]= clone $commonCategorieLot;
            $commonCategorieLot->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonComplements collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonComplements()
     */
    public function clearCommonComplements()
    {
        $this->collCommonComplements = null; // important to set this to null since that means it is uninitialized
        $this->collCommonComplementsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonComplements collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonComplements($v = true)
    {
        $this->collCommonComplementsPartial = $v;
    }

    /**
     * Initializes the collCommonComplements collection.
     *
     * By default this just sets the collCommonComplements collection to an empty array (like clearcollCommonComplements());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonComplements($overrideExisting = true)
    {
        if (null !== $this->collCommonComplements && !$overrideExisting) {
            return;
        }
        $this->collCommonComplements = new PropelObjectCollection();
        $this->collCommonComplements->setModel('CommonComplement');
    }

    /**
     * Gets an array of CommonComplement objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonComplement[] List of CommonComplement objects
     * @throws PropelException
     */
    public function getCommonComplements($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonComplementsPartial && !$this->isNew();
        if (null === $this->collCommonComplements || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonComplements) {
                // return empty collection
                $this->initCommonComplements();
            } else {
                $collCommonComplements = CommonComplementQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonComplementsPartial && count($collCommonComplements)) {
                      $this->initCommonComplements(false);

                      foreach ($collCommonComplements as $obj) {
                        if (false == $this->collCommonComplements->contains($obj)) {
                          $this->collCommonComplements->append($obj);
                        }
                      }

                      $this->collCommonComplementsPartial = true;
                    }

                    $collCommonComplements->getInternalIterator()->rewind();

                    return $collCommonComplements;
                }

                if ($partial && $this->collCommonComplements) {
                    foreach ($this->collCommonComplements as $obj) {
                        if ($obj->isNew()) {
                            $collCommonComplements[] = $obj;
                        }
                    }
                }

                $this->collCommonComplements = $collCommonComplements;
                $this->collCommonComplementsPartial = false;
            }
        }

        return $this->collCommonComplements;
    }

    /**
     * Sets a collection of CommonComplement objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonComplements A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonComplements(PropelCollection $commonComplements, PropelPDO $con = null)
    {
        $commonComplementsToDelete = $this->getCommonComplements(new Criteria(), $con)->diff($commonComplements);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonComplementsScheduledForDeletion = clone $commonComplementsToDelete;

        foreach ($commonComplementsToDelete as $commonComplementRemoved) {
            $commonComplementRemoved->setCommonConsultation(null);
        }

        $this->collCommonComplements = null;
        foreach ($commonComplements as $commonComplement) {
            $this->addCommonComplement($commonComplement);
        }

        $this->collCommonComplements = $commonComplements;
        $this->collCommonComplementsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonComplement objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonComplement objects.
     * @throws PropelException
     */
    public function countCommonComplements(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonComplementsPartial && !$this->isNew();
        if (null === $this->collCommonComplements || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonComplements) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonComplements());
            }
            $query = CommonComplementQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonComplements);
    }

    /**
     * Method called to associate a CommonComplement object to this object
     * through the CommonComplement foreign key attribute.
     *
     * @param   CommonComplement $l CommonComplement
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonComplement(CommonComplement $l)
    {
        if ($this->collCommonComplements === null) {
            $this->initCommonComplements();
            $this->collCommonComplementsPartial = true;
        }
        if (!in_array($l, $this->collCommonComplements->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonComplement($l);
        }

        return $this;
    }

    /**
     * @param	CommonComplement $commonComplement The commonComplement object to add.
     */
    protected function doAddCommonComplement($commonComplement)
    {
        $this->collCommonComplements[]= $commonComplement;
        $commonComplement->setCommonConsultation($this);
    }

    /**
     * @param	CommonComplement $commonComplement The commonComplement object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonComplement($commonComplement)
    {
        if ($this->getCommonComplements()->contains($commonComplement)) {
            $this->collCommonComplements->remove($this->collCommonComplements->search($commonComplement));
            if (null === $this->commonComplementsScheduledForDeletion) {
                $this->commonComplementsScheduledForDeletion = clone $this->collCommonComplements;
                $this->commonComplementsScheduledForDeletion->clear();
            }
            $this->commonComplementsScheduledForDeletion[]= clone $commonComplement;
            $commonComplement->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonConsultationHistoriqueEtats collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonConsultationHistoriqueEtats()
     */
    public function clearCommonConsultationHistoriqueEtats()
    {
        $this->collCommonConsultationHistoriqueEtats = null; // important to set this to null since that means it is uninitialized
        $this->collCommonConsultationHistoriqueEtatsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonConsultationHistoriqueEtats collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonConsultationHistoriqueEtats($v = true)
    {
        $this->collCommonConsultationHistoriqueEtatsPartial = $v;
    }

    /**
     * Initializes the collCommonConsultationHistoriqueEtats collection.
     *
     * By default this just sets the collCommonConsultationHistoriqueEtats collection to an empty array (like clearcollCommonConsultationHistoriqueEtats());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonConsultationHistoriqueEtats($overrideExisting = true)
    {
        if (null !== $this->collCommonConsultationHistoriqueEtats && !$overrideExisting) {
            return;
        }
        $this->collCommonConsultationHistoriqueEtats = new PropelObjectCollection();
        $this->collCommonConsultationHistoriqueEtats->setModel('CommonConsultationHistoriqueEtat');
    }

    /**
     * Gets an array of CommonConsultationHistoriqueEtat objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonConsultationHistoriqueEtat[] List of CommonConsultationHistoriqueEtat objects
     * @throws PropelException
     */
    public function getCommonConsultationHistoriqueEtats($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonConsultationHistoriqueEtatsPartial && !$this->isNew();
        if (null === $this->collCommonConsultationHistoriqueEtats || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonConsultationHistoriqueEtats) {
                // return empty collection
                $this->initCommonConsultationHistoriqueEtats();
            } else {
                $collCommonConsultationHistoriqueEtats = CommonConsultationHistoriqueEtatQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonConsultationHistoriqueEtatsPartial && count($collCommonConsultationHistoriqueEtats)) {
                      $this->initCommonConsultationHistoriqueEtats(false);

                      foreach ($collCommonConsultationHistoriqueEtats as $obj) {
                        if (false == $this->collCommonConsultationHistoriqueEtats->contains($obj)) {
                          $this->collCommonConsultationHistoriqueEtats->append($obj);
                        }
                      }

                      $this->collCommonConsultationHistoriqueEtatsPartial = true;
                    }

                    $collCommonConsultationHistoriqueEtats->getInternalIterator()->rewind();

                    return $collCommonConsultationHistoriqueEtats;
                }

                if ($partial && $this->collCommonConsultationHistoriqueEtats) {
                    foreach ($this->collCommonConsultationHistoriqueEtats as $obj) {
                        if ($obj->isNew()) {
                            $collCommonConsultationHistoriqueEtats[] = $obj;
                        }
                    }
                }

                $this->collCommonConsultationHistoriqueEtats = $collCommonConsultationHistoriqueEtats;
                $this->collCommonConsultationHistoriqueEtatsPartial = false;
            }
        }

        return $this->collCommonConsultationHistoriqueEtats;
    }

    /**
     * Sets a collection of CommonConsultationHistoriqueEtat objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonConsultationHistoriqueEtats A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonConsultationHistoriqueEtats(PropelCollection $commonConsultationHistoriqueEtats, PropelPDO $con = null)
    {
        $commonConsultationHistoriqueEtatsToDelete = $this->getCommonConsultationHistoriqueEtats(new Criteria(), $con)->diff($commonConsultationHistoriqueEtats);


        $this->commonConsultationHistoriqueEtatsScheduledForDeletion = $commonConsultationHistoriqueEtatsToDelete;

        foreach ($commonConsultationHistoriqueEtatsToDelete as $commonConsultationHistoriqueEtatRemoved) {
            $commonConsultationHistoriqueEtatRemoved->setCommonConsultation(null);
        }

        $this->collCommonConsultationHistoriqueEtats = null;
        foreach ($commonConsultationHistoriqueEtats as $commonConsultationHistoriqueEtat) {
            $this->addCommonConsultationHistoriqueEtat($commonConsultationHistoriqueEtat);
        }

        $this->collCommonConsultationHistoriqueEtats = $commonConsultationHistoriqueEtats;
        $this->collCommonConsultationHistoriqueEtatsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonConsultationHistoriqueEtat objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonConsultationHistoriqueEtat objects.
     * @throws PropelException
     */
    public function countCommonConsultationHistoriqueEtats(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonConsultationHistoriqueEtatsPartial && !$this->isNew();
        if (null === $this->collCommonConsultationHistoriqueEtats || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonConsultationHistoriqueEtats) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonConsultationHistoriqueEtats());
            }
            $query = CommonConsultationHistoriqueEtatQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonConsultationHistoriqueEtats);
    }

    /**
     * Method called to associate a CommonConsultationHistoriqueEtat object to this object
     * through the CommonConsultationHistoriqueEtat foreign key attribute.
     *
     * @param   CommonConsultationHistoriqueEtat $l CommonConsultationHistoriqueEtat
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonConsultationHistoriqueEtat(CommonConsultationHistoriqueEtat $l)
    {
        if ($this->collCommonConsultationHistoriqueEtats === null) {
            $this->initCommonConsultationHistoriqueEtats();
            $this->collCommonConsultationHistoriqueEtatsPartial = true;
        }
        if (!in_array($l, $this->collCommonConsultationHistoriqueEtats->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonConsultationHistoriqueEtat($l);
        }

        return $this;
    }

    /**
     * @param	CommonConsultationHistoriqueEtat $commonConsultationHistoriqueEtat The commonConsultationHistoriqueEtat object to add.
     */
    protected function doAddCommonConsultationHistoriqueEtat($commonConsultationHistoriqueEtat)
    {
        $this->collCommonConsultationHistoriqueEtats[]= $commonConsultationHistoriqueEtat;
        $commonConsultationHistoriqueEtat->setCommonConsultation($this);
    }

    /**
     * @param	CommonConsultationHistoriqueEtat $commonConsultationHistoriqueEtat The commonConsultationHistoriqueEtat object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonConsultationHistoriqueEtat($commonConsultationHistoriqueEtat)
    {
        if ($this->getCommonConsultationHistoriqueEtats()->contains($commonConsultationHistoriqueEtat)) {
            $this->collCommonConsultationHistoriqueEtats->remove($this->collCommonConsultationHistoriqueEtats->search($commonConsultationHistoriqueEtat));
            if (null === $this->commonConsultationHistoriqueEtatsScheduledForDeletion) {
                $this->commonConsultationHistoriqueEtatsScheduledForDeletion = clone $this->collCommonConsultationHistoriqueEtats;
                $this->commonConsultationHistoriqueEtatsScheduledForDeletion->clear();
            }
            $this->commonConsultationHistoriqueEtatsScheduledForDeletion[]= clone $commonConsultationHistoriqueEtat;
            $commonConsultationHistoriqueEtat->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonDATEFINs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonDATEFINs()
     */
    public function clearCommonDATEFINs()
    {
        $this->collCommonDATEFINs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonDATEFINsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonDATEFINs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonDATEFINs($v = true)
    {
        $this->collCommonDATEFINsPartial = $v;
    }

    /**
     * Initializes the collCommonDATEFINs collection.
     *
     * By default this just sets the collCommonDATEFINs collection to an empty array (like clearcollCommonDATEFINs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonDATEFINs($overrideExisting = true)
    {
        if (null !== $this->collCommonDATEFINs && !$overrideExisting) {
            return;
        }
        $this->collCommonDATEFINs = new PropelObjectCollection();
        $this->collCommonDATEFINs->setModel('CommonDATEFIN');
    }

    /**
     * Gets an array of CommonDATEFIN objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonDATEFIN[] List of CommonDATEFIN objects
     * @throws PropelException
     */
    public function getCommonDATEFINs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonDATEFINsPartial && !$this->isNew();
        if (null === $this->collCommonDATEFINs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonDATEFINs) {
                // return empty collection
                $this->initCommonDATEFINs();
            } else {
                $collCommonDATEFINs = CommonDATEFINQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonDATEFINsPartial && count($collCommonDATEFINs)) {
                      $this->initCommonDATEFINs(false);

                      foreach ($collCommonDATEFINs as $obj) {
                        if (false == $this->collCommonDATEFINs->contains($obj)) {
                          $this->collCommonDATEFINs->append($obj);
                        }
                      }

                      $this->collCommonDATEFINsPartial = true;
                    }

                    $collCommonDATEFINs->getInternalIterator()->rewind();

                    return $collCommonDATEFINs;
                }

                if ($partial && $this->collCommonDATEFINs) {
                    foreach ($this->collCommonDATEFINs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonDATEFINs[] = $obj;
                        }
                    }
                }

                $this->collCommonDATEFINs = $collCommonDATEFINs;
                $this->collCommonDATEFINsPartial = false;
            }
        }

        return $this->collCommonDATEFINs;
    }

    /**
     * Sets a collection of CommonDATEFIN objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonDATEFINs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonDATEFINs(PropelCollection $commonDATEFINs, PropelPDO $con = null)
    {
        $commonDATEFINsToDelete = $this->getCommonDATEFINs(new Criteria(), $con)->diff($commonDATEFINs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonDATEFINsScheduledForDeletion = clone $commonDATEFINsToDelete;

        foreach ($commonDATEFINsToDelete as $commonDATEFINRemoved) {
            $commonDATEFINRemoved->setCommonConsultation(null);
        }

        $this->collCommonDATEFINs = null;
        foreach ($commonDATEFINs as $commonDATEFIN) {
            $this->addCommonDATEFIN($commonDATEFIN);
        }

        $this->collCommonDATEFINs = $commonDATEFINs;
        $this->collCommonDATEFINsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonDATEFIN objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonDATEFIN objects.
     * @throws PropelException
     */
    public function countCommonDATEFINs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonDATEFINsPartial && !$this->isNew();
        if (null === $this->collCommonDATEFINs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonDATEFINs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonDATEFINs());
            }
            $query = CommonDATEFINQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonDATEFINs);
    }

    /**
     * Method called to associate a CommonDATEFIN object to this object
     * through the CommonDATEFIN foreign key attribute.
     *
     * @param   CommonDATEFIN $l CommonDATEFIN
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonDATEFIN(CommonDATEFIN $l)
    {
        if ($this->collCommonDATEFINs === null) {
            $this->initCommonDATEFINs();
            $this->collCommonDATEFINsPartial = true;
        }
        if (!in_array($l, $this->collCommonDATEFINs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonDATEFIN($l);
        }

        return $this;
    }

    /**
     * @param	CommonDATEFIN $commonDATEFIN The commonDATEFIN object to add.
     */
    protected function doAddCommonDATEFIN($commonDATEFIN)
    {
        $this->collCommonDATEFINs[]= $commonDATEFIN;
        $commonDATEFIN->setCommonConsultation($this);
    }

    /**
     * @param	CommonDATEFIN $commonDATEFIN The commonDATEFIN object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonDATEFIN($commonDATEFIN)
    {
        if ($this->getCommonDATEFINs()->contains($commonDATEFIN)) {
            $this->collCommonDATEFINs->remove($this->collCommonDATEFINs->search($commonDATEFIN));
            if (null === $this->commonDATEFINsScheduledForDeletion) {
                $this->commonDATEFINsScheduledForDeletion = clone $this->collCommonDATEFINs;
                $this->commonDATEFINsScheduledForDeletion->clear();
            }
            $this->commonDATEFINsScheduledForDeletion[]= clone $commonDATEFIN;
            $commonDATEFIN->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonDAConsultations collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonDAConsultations()
     */
    public function clearCommonDAConsultations()
    {
        $this->collCommonDAConsultations = null; // important to set this to null since that means it is uninitialized
        $this->collCommonDAConsultationsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonDAConsultations collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonDAConsultations($v = true)
    {
        $this->collCommonDAConsultationsPartial = $v;
    }

    /**
     * Initializes the collCommonDAConsultations collection.
     *
     * By default this just sets the collCommonDAConsultations collection to an empty array (like clearcollCommonDAConsultations());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonDAConsultations($overrideExisting = true)
    {
        if (null !== $this->collCommonDAConsultations && !$overrideExisting) {
            return;
        }
        $this->collCommonDAConsultations = new PropelObjectCollection();
        $this->collCommonDAConsultations->setModel('CommonDAConsultation');
    }

    /**
     * Gets an array of CommonDAConsultation objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonDAConsultation[] List of CommonDAConsultation objects
     * @throws PropelException
     */
    public function getCommonDAConsultations($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonDAConsultationsPartial && !$this->isNew();
        if (null === $this->collCommonDAConsultations || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonDAConsultations) {
                // return empty collection
                $this->initCommonDAConsultations();
            } else {
                $collCommonDAConsultations = CommonDAConsultationQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonDAConsultationsPartial && count($collCommonDAConsultations)) {
                      $this->initCommonDAConsultations(false);

                      foreach ($collCommonDAConsultations as $obj) {
                        if (false == $this->collCommonDAConsultations->contains($obj)) {
                          $this->collCommonDAConsultations->append($obj);
                        }
                      }

                      $this->collCommonDAConsultationsPartial = true;
                    }

                    $collCommonDAConsultations->getInternalIterator()->rewind();

                    return $collCommonDAConsultations;
                }

                if ($partial && $this->collCommonDAConsultations) {
                    foreach ($this->collCommonDAConsultations as $obj) {
                        if ($obj->isNew()) {
                            $collCommonDAConsultations[] = $obj;
                        }
                    }
                }

                $this->collCommonDAConsultations = $collCommonDAConsultations;
                $this->collCommonDAConsultationsPartial = false;
            }
        }

        return $this->collCommonDAConsultations;
    }

    /**
     * Sets a collection of CommonDAConsultation objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonDAConsultations A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonDAConsultations(PropelCollection $commonDAConsultations, PropelPDO $con = null)
    {
        $commonDAConsultationsToDelete = $this->getCommonDAConsultations(new Criteria(), $con)->diff($commonDAConsultations);


        $this->commonDAConsultationsScheduledForDeletion = $commonDAConsultationsToDelete;

        foreach ($commonDAConsultationsToDelete as $commonDAConsultationRemoved) {
            $commonDAConsultationRemoved->setCommonConsultation(null);
        }

        $this->collCommonDAConsultations = null;
        foreach ($commonDAConsultations as $commonDAConsultation) {
            $this->addCommonDAConsultation($commonDAConsultation);
        }

        $this->collCommonDAConsultations = $commonDAConsultations;
        $this->collCommonDAConsultationsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonDAConsultation objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonDAConsultation objects.
     * @throws PropelException
     */
    public function countCommonDAConsultations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonDAConsultationsPartial && !$this->isNew();
        if (null === $this->collCommonDAConsultations || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonDAConsultations) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonDAConsultations());
            }
            $query = CommonDAConsultationQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonDAConsultations);
    }

    /**
     * Method called to associate a CommonDAConsultation object to this object
     * through the CommonDAConsultation foreign key attribute.
     *
     * @param   CommonDAConsultation $l CommonDAConsultation
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonDAConsultation(CommonDAConsultation $l)
    {
        if ($this->collCommonDAConsultations === null) {
            $this->initCommonDAConsultations();
            $this->collCommonDAConsultationsPartial = true;
        }
        if (!in_array($l, $this->collCommonDAConsultations->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonDAConsultation($l);
        }

        return $this;
    }

    /**
     * @param	CommonDAConsultation $commonDAConsultation The commonDAConsultation object to add.
     */
    protected function doAddCommonDAConsultation($commonDAConsultation)
    {
        $this->collCommonDAConsultations[]= $commonDAConsultation;
        $commonDAConsultation->setCommonConsultation($this);
    }

    /**
     * @param	CommonDAConsultation $commonDAConsultation The commonDAConsultation object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonDAConsultation($commonDAConsultation)
    {
        if ($this->getCommonDAConsultations()->contains($commonDAConsultation)) {
            $this->collCommonDAConsultations->remove($this->collCommonDAConsultations->search($commonDAConsultation));
            if (null === $this->commonDAConsultationsScheduledForDeletion) {
                $this->commonDAConsultationsScheduledForDeletion = clone $this->collCommonDAConsultations;
                $this->commonDAConsultationsScheduledForDeletion->clear();
            }
            $this->commonDAConsultationsScheduledForDeletion[]= $commonDAConsultation;
            $commonDAConsultation->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonDCEs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonDCEs()
     */
    public function clearCommonDCEs()
    {
        $this->collCommonDCEs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonDCEsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonDCEs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonDCEs($v = true)
    {
        $this->collCommonDCEsPartial = $v;
    }

    /**
     * Initializes the collCommonDCEs collection.
     *
     * By default this just sets the collCommonDCEs collection to an empty array (like clearcollCommonDCEs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonDCEs($overrideExisting = true)
    {
        if (null !== $this->collCommonDCEs && !$overrideExisting) {
            return;
        }
        $this->collCommonDCEs = new PropelObjectCollection();
        $this->collCommonDCEs->setModel('CommonDCE');
    }

    /**
     * Gets an array of CommonDCE objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonDCE[] List of CommonDCE objects
     * @throws PropelException
     */
    public function getCommonDCEs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonDCEsPartial && !$this->isNew();
        if (null === $this->collCommonDCEs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonDCEs) {
                // return empty collection
                $this->initCommonDCEs();
            } else {
                $collCommonDCEs = CommonDCEQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonDCEsPartial && count($collCommonDCEs)) {
                      $this->initCommonDCEs(false);

                      foreach ($collCommonDCEs as $obj) {
                        if (false == $this->collCommonDCEs->contains($obj)) {
                          $this->collCommonDCEs->append($obj);
                        }
                      }

                      $this->collCommonDCEsPartial = true;
                    }

                    $collCommonDCEs->getInternalIterator()->rewind();

                    return $collCommonDCEs;
                }

                if ($partial && $this->collCommonDCEs) {
                    foreach ($this->collCommonDCEs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonDCEs[] = $obj;
                        }
                    }
                }

                $this->collCommonDCEs = $collCommonDCEs;
                $this->collCommonDCEsPartial = false;
            }
        }

        return $this->collCommonDCEs;
    }

    /**
     * Sets a collection of CommonDCE objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonDCEs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonDCEs(PropelCollection $commonDCEs, PropelPDO $con = null)
    {
        $commonDCEsToDelete = $this->getCommonDCEs(new Criteria(), $con)->diff($commonDCEs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonDCEsScheduledForDeletion = clone $commonDCEsToDelete;

        foreach ($commonDCEsToDelete as $commonDCERemoved) {
            $commonDCERemoved->setCommonConsultation(null);
        }

        $this->collCommonDCEs = null;
        foreach ($commonDCEs as $commonDCE) {
            $this->addCommonDCE($commonDCE);
        }

        $this->collCommonDCEs = $commonDCEs;
        $this->collCommonDCEsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonDCE objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonDCE objects.
     * @throws PropelException
     */
    public function countCommonDCEs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonDCEsPartial && !$this->isNew();
        if (null === $this->collCommonDCEs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonDCEs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonDCEs());
            }
            $query = CommonDCEQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonDCEs);
    }

    /**
     * Method called to associate a CommonDCE object to this object
     * through the CommonDCE foreign key attribute.
     *
     * @param   CommonDCE $l CommonDCE
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonDCE(CommonDCE $l)
    {
        if ($this->collCommonDCEs === null) {
            $this->initCommonDCEs();
            $this->collCommonDCEsPartial = true;
        }
        if (!in_array($l, $this->collCommonDCEs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonDCE($l);
        }

        return $this;
    }

    /**
     * @param	CommonDCE $commonDCE The commonDCE object to add.
     */
    protected function doAddCommonDCE($commonDCE)
    {
        $this->collCommonDCEs[]= $commonDCE;
        $commonDCE->setCommonConsultation($this);
    }

    /**
     * @param	CommonDCE $commonDCE The commonDCE object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonDCE($commonDCE)
    {
        if ($this->getCommonDCEs()->contains($commonDCE)) {
            $this->collCommonDCEs->remove($this->collCommonDCEs->search($commonDCE));
            if (null === $this->commonDCEsScheduledForDeletion) {
                $this->commonDCEsScheduledForDeletion = clone $this->collCommonDCEs;
                $this->commonDCEsScheduledForDeletion->clear();
            }
            $this->commonDCEsScheduledForDeletion[]= clone $commonDCE;
            $commonDCE->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonDocumentExternes collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonDocumentExternes()
     */
    public function clearCommonDocumentExternes()
    {
        $this->collCommonDocumentExternes = null; // important to set this to null since that means it is uninitialized
        $this->collCommonDocumentExternesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonDocumentExternes collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonDocumentExternes($v = true)
    {
        $this->collCommonDocumentExternesPartial = $v;
    }

    /**
     * Initializes the collCommonDocumentExternes collection.
     *
     * By default this just sets the collCommonDocumentExternes collection to an empty array (like clearcollCommonDocumentExternes());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonDocumentExternes($overrideExisting = true)
    {
        if (null !== $this->collCommonDocumentExternes && !$overrideExisting) {
            return;
        }
        $this->collCommonDocumentExternes = new PropelObjectCollection();
        $this->collCommonDocumentExternes->setModel('CommonDocumentExterne');
    }

    /**
     * Gets an array of CommonDocumentExterne objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonDocumentExterne[] List of CommonDocumentExterne objects
     * @throws PropelException
     */
    public function getCommonDocumentExternes($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonDocumentExternesPartial && !$this->isNew();
        if (null === $this->collCommonDocumentExternes || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonDocumentExternes) {
                // return empty collection
                $this->initCommonDocumentExternes();
            } else {
                $collCommonDocumentExternes = CommonDocumentExterneQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonDocumentExternesPartial && count($collCommonDocumentExternes)) {
                      $this->initCommonDocumentExternes(false);

                      foreach ($collCommonDocumentExternes as $obj) {
                        if (false == $this->collCommonDocumentExternes->contains($obj)) {
                          $this->collCommonDocumentExternes->append($obj);
                        }
                      }

                      $this->collCommonDocumentExternesPartial = true;
                    }

                    $collCommonDocumentExternes->getInternalIterator()->rewind();

                    return $collCommonDocumentExternes;
                }

                if ($partial && $this->collCommonDocumentExternes) {
                    foreach ($this->collCommonDocumentExternes as $obj) {
                        if ($obj->isNew()) {
                            $collCommonDocumentExternes[] = $obj;
                        }
                    }
                }

                $this->collCommonDocumentExternes = $collCommonDocumentExternes;
                $this->collCommonDocumentExternesPartial = false;
            }
        }

        return $this->collCommonDocumentExternes;
    }

    /**
     * Sets a collection of CommonDocumentExterne objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonDocumentExternes A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonDocumentExternes(PropelCollection $commonDocumentExternes, PropelPDO $con = null)
    {
        $commonDocumentExternesToDelete = $this->getCommonDocumentExternes(new Criteria(), $con)->diff($commonDocumentExternes);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonDocumentExternesScheduledForDeletion = clone $commonDocumentExternesToDelete;

        foreach ($commonDocumentExternesToDelete as $commonDocumentExterneRemoved) {
            $commonDocumentExterneRemoved->setCommonConsultation(null);
        }

        $this->collCommonDocumentExternes = null;
        foreach ($commonDocumentExternes as $commonDocumentExterne) {
            $this->addCommonDocumentExterne($commonDocumentExterne);
        }

        $this->collCommonDocumentExternes = $commonDocumentExternes;
        $this->collCommonDocumentExternesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonDocumentExterne objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonDocumentExterne objects.
     * @throws PropelException
     */
    public function countCommonDocumentExternes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonDocumentExternesPartial && !$this->isNew();
        if (null === $this->collCommonDocumentExternes || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonDocumentExternes) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonDocumentExternes());
            }
            $query = CommonDocumentExterneQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonDocumentExternes);
    }

    /**
     * Method called to associate a CommonDocumentExterne object to this object
     * through the CommonDocumentExterne foreign key attribute.
     *
     * @param   CommonDocumentExterne $l CommonDocumentExterne
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonDocumentExterne(CommonDocumentExterne $l)
    {
        if ($this->collCommonDocumentExternes === null) {
            $this->initCommonDocumentExternes();
            $this->collCommonDocumentExternesPartial = true;
        }
        if (!in_array($l, $this->collCommonDocumentExternes->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonDocumentExterne($l);
        }

        return $this;
    }

    /**
     * @param	CommonDocumentExterne $commonDocumentExterne The commonDocumentExterne object to add.
     */
    protected function doAddCommonDocumentExterne($commonDocumentExterne)
    {
        $this->collCommonDocumentExternes[]= $commonDocumentExterne;
        $commonDocumentExterne->setCommonConsultation($this);
    }

    /**
     * @param	CommonDocumentExterne $commonDocumentExterne The commonDocumentExterne object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonDocumentExterne($commonDocumentExterne)
    {
        if ($this->getCommonDocumentExternes()->contains($commonDocumentExterne)) {
            $this->collCommonDocumentExternes->remove($this->collCommonDocumentExternes->search($commonDocumentExterne));
            if (null === $this->commonDocumentExternesScheduledForDeletion) {
                $this->commonDocumentExternesScheduledForDeletion = clone $this->collCommonDocumentExternes;
                $this->commonDocumentExternesScheduledForDeletion->clear();
            }
            $this->commonDocumentExternesScheduledForDeletion[]= clone $commonDocumentExterne;
            $commonDocumentExterne->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonHeliosPiecePublicites collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonHeliosPiecePublicites()
     */
    public function clearCommonHeliosPiecePublicites()
    {
        $this->collCommonHeliosPiecePublicites = null; // important to set this to null since that means it is uninitialized
        $this->collCommonHeliosPiecePublicitesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonHeliosPiecePublicites collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonHeliosPiecePublicites($v = true)
    {
        $this->collCommonHeliosPiecePublicitesPartial = $v;
    }

    /**
     * Initializes the collCommonHeliosPiecePublicites collection.
     *
     * By default this just sets the collCommonHeliosPiecePublicites collection to an empty array (like clearcollCommonHeliosPiecePublicites());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonHeliosPiecePublicites($overrideExisting = true)
    {
        if (null !== $this->collCommonHeliosPiecePublicites && !$overrideExisting) {
            return;
        }
        $this->collCommonHeliosPiecePublicites = new PropelObjectCollection();
        $this->collCommonHeliosPiecePublicites->setModel('CommonHeliosPiecePublicite');
    }

    /**
     * Gets an array of CommonHeliosPiecePublicite objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonHeliosPiecePublicite[] List of CommonHeliosPiecePublicite objects
     * @throws PropelException
     */
    public function getCommonHeliosPiecePublicites($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosPiecePublicitesPartial && !$this->isNew();
        if (null === $this->collCommonHeliosPiecePublicites || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosPiecePublicites) {
                // return empty collection
                $this->initCommonHeliosPiecePublicites();
            } else {
                $collCommonHeliosPiecePublicites = CommonHeliosPiecePubliciteQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonHeliosPiecePublicitesPartial && count($collCommonHeliosPiecePublicites)) {
                      $this->initCommonHeliosPiecePublicites(false);

                      foreach ($collCommonHeliosPiecePublicites as $obj) {
                        if (false == $this->collCommonHeliosPiecePublicites->contains($obj)) {
                          $this->collCommonHeliosPiecePublicites->append($obj);
                        }
                      }

                      $this->collCommonHeliosPiecePublicitesPartial = true;
                    }

                    $collCommonHeliosPiecePublicites->getInternalIterator()->rewind();

                    return $collCommonHeliosPiecePublicites;
                }

                if ($partial && $this->collCommonHeliosPiecePublicites) {
                    foreach ($this->collCommonHeliosPiecePublicites as $obj) {
                        if ($obj->isNew()) {
                            $collCommonHeliosPiecePublicites[] = $obj;
                        }
                    }
                }

                $this->collCommonHeliosPiecePublicites = $collCommonHeliosPiecePublicites;
                $this->collCommonHeliosPiecePublicitesPartial = false;
            }
        }

        return $this->collCommonHeliosPiecePublicites;
    }

    /**
     * Sets a collection of CommonHeliosPiecePublicite objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonHeliosPiecePublicites A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonHeliosPiecePublicites(PropelCollection $commonHeliosPiecePublicites, PropelPDO $con = null)
    {
        $commonHeliosPiecePublicitesToDelete = $this->getCommonHeliosPiecePublicites(new Criteria(), $con)->diff($commonHeliosPiecePublicites);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonHeliosPiecePublicitesScheduledForDeletion = clone $commonHeliosPiecePublicitesToDelete;

        foreach ($commonHeliosPiecePublicitesToDelete as $commonHeliosPiecePubliciteRemoved) {
            $commonHeliosPiecePubliciteRemoved->setCommonConsultation(null);
        }

        $this->collCommonHeliosPiecePublicites = null;
        foreach ($commonHeliosPiecePublicites as $commonHeliosPiecePublicite) {
            $this->addCommonHeliosPiecePublicite($commonHeliosPiecePublicite);
        }

        $this->collCommonHeliosPiecePublicites = $commonHeliosPiecePublicites;
        $this->collCommonHeliosPiecePublicitesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonHeliosPiecePublicite objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonHeliosPiecePublicite objects.
     * @throws PropelException
     */
    public function countCommonHeliosPiecePublicites(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosPiecePublicitesPartial && !$this->isNew();
        if (null === $this->collCommonHeliosPiecePublicites || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosPiecePublicites) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonHeliosPiecePublicites());
            }
            $query = CommonHeliosPiecePubliciteQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonHeliosPiecePublicites);
    }

    /**
     * Method called to associate a CommonHeliosPiecePublicite object to this object
     * through the CommonHeliosPiecePublicite foreign key attribute.
     *
     * @param   CommonHeliosPiecePublicite $l CommonHeliosPiecePublicite
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonHeliosPiecePublicite(CommonHeliosPiecePublicite $l)
    {
        if ($this->collCommonHeliosPiecePublicites === null) {
            $this->initCommonHeliosPiecePublicites();
            $this->collCommonHeliosPiecePublicitesPartial = true;
        }
        if (!in_array($l, $this->collCommonHeliosPiecePublicites->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonHeliosPiecePublicite($l);
        }

        return $this;
    }

    /**
     * @param	CommonHeliosPiecePublicite $commonHeliosPiecePublicite The commonHeliosPiecePublicite object to add.
     */
    protected function doAddCommonHeliosPiecePublicite($commonHeliosPiecePublicite)
    {
        $this->collCommonHeliosPiecePublicites[]= $commonHeliosPiecePublicite;
        $commonHeliosPiecePublicite->setCommonConsultation($this);
    }

    /**
     * @param	CommonHeliosPiecePublicite $commonHeliosPiecePublicite The commonHeliosPiecePublicite object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonHeliosPiecePublicite($commonHeliosPiecePublicite)
    {
        if ($this->getCommonHeliosPiecePublicites()->contains($commonHeliosPiecePublicite)) {
            $this->collCommonHeliosPiecePublicites->remove($this->collCommonHeliosPiecePublicites->search($commonHeliosPiecePublicite));
            if (null === $this->commonHeliosPiecePublicitesScheduledForDeletion) {
                $this->commonHeliosPiecePublicitesScheduledForDeletion = clone $this->collCommonHeliosPiecePublicites;
                $this->commonHeliosPiecePublicitesScheduledForDeletion->clear();
            }
            $this->commonHeliosPiecePublicitesScheduledForDeletion[]= clone $commonHeliosPiecePublicite;
            $commonHeliosPiecePublicite->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonHeliosPvConsultations collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonHeliosPvConsultations()
     */
    public function clearCommonHeliosPvConsultations()
    {
        $this->collCommonHeliosPvConsultations = null; // important to set this to null since that means it is uninitialized
        $this->collCommonHeliosPvConsultationsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonHeliosPvConsultations collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonHeliosPvConsultations($v = true)
    {
        $this->collCommonHeliosPvConsultationsPartial = $v;
    }

    /**
     * Initializes the collCommonHeliosPvConsultations collection.
     *
     * By default this just sets the collCommonHeliosPvConsultations collection to an empty array (like clearcollCommonHeliosPvConsultations());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonHeliosPvConsultations($overrideExisting = true)
    {
        if (null !== $this->collCommonHeliosPvConsultations && !$overrideExisting) {
            return;
        }
        $this->collCommonHeliosPvConsultations = new PropelObjectCollection();
        $this->collCommonHeliosPvConsultations->setModel('CommonHeliosPvConsultation');
    }

    /**
     * Gets an array of CommonHeliosPvConsultation objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonHeliosPvConsultation[] List of CommonHeliosPvConsultation objects
     * @throws PropelException
     */
    public function getCommonHeliosPvConsultations($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosPvConsultationsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosPvConsultations || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosPvConsultations) {
                // return empty collection
                $this->initCommonHeliosPvConsultations();
            } else {
                $collCommonHeliosPvConsultations = CommonHeliosPvConsultationQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonHeliosPvConsultationsPartial && count($collCommonHeliosPvConsultations)) {
                      $this->initCommonHeliosPvConsultations(false);

                      foreach ($collCommonHeliosPvConsultations as $obj) {
                        if (false == $this->collCommonHeliosPvConsultations->contains($obj)) {
                          $this->collCommonHeliosPvConsultations->append($obj);
                        }
                      }

                      $this->collCommonHeliosPvConsultationsPartial = true;
                    }

                    $collCommonHeliosPvConsultations->getInternalIterator()->rewind();

                    return $collCommonHeliosPvConsultations;
                }

                if ($partial && $this->collCommonHeliosPvConsultations) {
                    foreach ($this->collCommonHeliosPvConsultations as $obj) {
                        if ($obj->isNew()) {
                            $collCommonHeliosPvConsultations[] = $obj;
                        }
                    }
                }

                $this->collCommonHeliosPvConsultations = $collCommonHeliosPvConsultations;
                $this->collCommonHeliosPvConsultationsPartial = false;
            }
        }

        return $this->collCommonHeliosPvConsultations;
    }

    /**
     * Sets a collection of CommonHeliosPvConsultation objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonHeliosPvConsultations A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonHeliosPvConsultations(PropelCollection $commonHeliosPvConsultations, PropelPDO $con = null)
    {
        $commonHeliosPvConsultationsToDelete = $this->getCommonHeliosPvConsultations(new Criteria(), $con)->diff($commonHeliosPvConsultations);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonHeliosPvConsultationsScheduledForDeletion = clone $commonHeliosPvConsultationsToDelete;

        foreach ($commonHeliosPvConsultationsToDelete as $commonHeliosPvConsultationRemoved) {
            $commonHeliosPvConsultationRemoved->setCommonConsultation(null);
        }

        $this->collCommonHeliosPvConsultations = null;
        foreach ($commonHeliosPvConsultations as $commonHeliosPvConsultation) {
            $this->addCommonHeliosPvConsultation($commonHeliosPvConsultation);
        }

        $this->collCommonHeliosPvConsultations = $commonHeliosPvConsultations;
        $this->collCommonHeliosPvConsultationsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonHeliosPvConsultation objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonHeliosPvConsultation objects.
     * @throws PropelException
     */
    public function countCommonHeliosPvConsultations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosPvConsultationsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosPvConsultations || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosPvConsultations) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonHeliosPvConsultations());
            }
            $query = CommonHeliosPvConsultationQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonHeliosPvConsultations);
    }

    /**
     * Method called to associate a CommonHeliosPvConsultation object to this object
     * through the CommonHeliosPvConsultation foreign key attribute.
     *
     * @param   CommonHeliosPvConsultation $l CommonHeliosPvConsultation
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonHeliosPvConsultation(CommonHeliosPvConsultation $l)
    {
        if ($this->collCommonHeliosPvConsultations === null) {
            $this->initCommonHeliosPvConsultations();
            $this->collCommonHeliosPvConsultationsPartial = true;
        }
        if (!in_array($l, $this->collCommonHeliosPvConsultations->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonHeliosPvConsultation($l);
        }

        return $this;
    }

    /**
     * @param	CommonHeliosPvConsultation $commonHeliosPvConsultation The commonHeliosPvConsultation object to add.
     */
    protected function doAddCommonHeliosPvConsultation($commonHeliosPvConsultation)
    {
        $this->collCommonHeliosPvConsultations[]= $commonHeliosPvConsultation;
        $commonHeliosPvConsultation->setCommonConsultation($this);
    }

    /**
     * @param	CommonHeliosPvConsultation $commonHeliosPvConsultation The commonHeliosPvConsultation object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonHeliosPvConsultation($commonHeliosPvConsultation)
    {
        if ($this->getCommonHeliosPvConsultations()->contains($commonHeliosPvConsultation)) {
            $this->collCommonHeliosPvConsultations->remove($this->collCommonHeliosPvConsultations->search($commonHeliosPvConsultation));
            if (null === $this->commonHeliosPvConsultationsScheduledForDeletion) {
                $this->commonHeliosPvConsultationsScheduledForDeletion = clone $this->collCommonHeliosPvConsultations;
                $this->commonHeliosPvConsultationsScheduledForDeletion->clear();
            }
            $this->commonHeliosPvConsultationsScheduledForDeletion[]= clone $commonHeliosPvConsultation;
            $commonHeliosPvConsultation->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonHeliosRapportPrefets collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonHeliosRapportPrefets()
     */
    public function clearCommonHeliosRapportPrefets()
    {
        $this->collCommonHeliosRapportPrefets = null; // important to set this to null since that means it is uninitialized
        $this->collCommonHeliosRapportPrefetsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonHeliosRapportPrefets collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonHeliosRapportPrefets($v = true)
    {
        $this->collCommonHeliosRapportPrefetsPartial = $v;
    }

    /**
     * Initializes the collCommonHeliosRapportPrefets collection.
     *
     * By default this just sets the collCommonHeliosRapportPrefets collection to an empty array (like clearcollCommonHeliosRapportPrefets());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonHeliosRapportPrefets($overrideExisting = true)
    {
        if (null !== $this->collCommonHeliosRapportPrefets && !$overrideExisting) {
            return;
        }
        $this->collCommonHeliosRapportPrefets = new PropelObjectCollection();
        $this->collCommonHeliosRapportPrefets->setModel('CommonHeliosRapportPrefet');
    }

    /**
     * Gets an array of CommonHeliosRapportPrefet objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonHeliosRapportPrefet[] List of CommonHeliosRapportPrefet objects
     * @throws PropelException
     */
    public function getCommonHeliosRapportPrefets($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosRapportPrefetsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosRapportPrefets || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosRapportPrefets) {
                // return empty collection
                $this->initCommonHeliosRapportPrefets();
            } else {
                $collCommonHeliosRapportPrefets = CommonHeliosRapportPrefetQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonHeliosRapportPrefetsPartial && count($collCommonHeliosRapportPrefets)) {
                      $this->initCommonHeliosRapportPrefets(false);

                      foreach ($collCommonHeliosRapportPrefets as $obj) {
                        if (false == $this->collCommonHeliosRapportPrefets->contains($obj)) {
                          $this->collCommonHeliosRapportPrefets->append($obj);
                        }
                      }

                      $this->collCommonHeliosRapportPrefetsPartial = true;
                    }

                    $collCommonHeliosRapportPrefets->getInternalIterator()->rewind();

                    return $collCommonHeliosRapportPrefets;
                }

                if ($partial && $this->collCommonHeliosRapportPrefets) {
                    foreach ($this->collCommonHeliosRapportPrefets as $obj) {
                        if ($obj->isNew()) {
                            $collCommonHeliosRapportPrefets[] = $obj;
                        }
                    }
                }

                $this->collCommonHeliosRapportPrefets = $collCommonHeliosRapportPrefets;
                $this->collCommonHeliosRapportPrefetsPartial = false;
            }
        }

        return $this->collCommonHeliosRapportPrefets;
    }

    /**
     * Sets a collection of CommonHeliosRapportPrefet objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonHeliosRapportPrefets A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonHeliosRapportPrefets(PropelCollection $commonHeliosRapportPrefets, PropelPDO $con = null)
    {
        $commonHeliosRapportPrefetsToDelete = $this->getCommonHeliosRapportPrefets(new Criteria(), $con)->diff($commonHeliosRapportPrefets);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonHeliosRapportPrefetsScheduledForDeletion = clone $commonHeliosRapportPrefetsToDelete;

        foreach ($commonHeliosRapportPrefetsToDelete as $commonHeliosRapportPrefetRemoved) {
            $commonHeliosRapportPrefetRemoved->setCommonConsultation(null);
        }

        $this->collCommonHeliosRapportPrefets = null;
        foreach ($commonHeliosRapportPrefets as $commonHeliosRapportPrefet) {
            $this->addCommonHeliosRapportPrefet($commonHeliosRapportPrefet);
        }

        $this->collCommonHeliosRapportPrefets = $commonHeliosRapportPrefets;
        $this->collCommonHeliosRapportPrefetsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonHeliosRapportPrefet objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonHeliosRapportPrefet objects.
     * @throws PropelException
     */
    public function countCommonHeliosRapportPrefets(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosRapportPrefetsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosRapportPrefets || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosRapportPrefets) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonHeliosRapportPrefets());
            }
            $query = CommonHeliosRapportPrefetQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonHeliosRapportPrefets);
    }

    /**
     * Method called to associate a CommonHeliosRapportPrefet object to this object
     * through the CommonHeliosRapportPrefet foreign key attribute.
     *
     * @param   CommonHeliosRapportPrefet $l CommonHeliosRapportPrefet
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonHeliosRapportPrefet(CommonHeliosRapportPrefet $l)
    {
        if ($this->collCommonHeliosRapportPrefets === null) {
            $this->initCommonHeliosRapportPrefets();
            $this->collCommonHeliosRapportPrefetsPartial = true;
        }
        if (!in_array($l, $this->collCommonHeliosRapportPrefets->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonHeliosRapportPrefet($l);
        }

        return $this;
    }

    /**
     * @param	CommonHeliosRapportPrefet $commonHeliosRapportPrefet The commonHeliosRapportPrefet object to add.
     */
    protected function doAddCommonHeliosRapportPrefet($commonHeliosRapportPrefet)
    {
        $this->collCommonHeliosRapportPrefets[]= $commonHeliosRapportPrefet;
        $commonHeliosRapportPrefet->setCommonConsultation($this);
    }

    /**
     * @param	CommonHeliosRapportPrefet $commonHeliosRapportPrefet The commonHeliosRapportPrefet object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonHeliosRapportPrefet($commonHeliosRapportPrefet)
    {
        if ($this->getCommonHeliosRapportPrefets()->contains($commonHeliosRapportPrefet)) {
            $this->collCommonHeliosRapportPrefets->remove($this->collCommonHeliosRapportPrefets->search($commonHeliosRapportPrefet));
            if (null === $this->commonHeliosRapportPrefetsScheduledForDeletion) {
                $this->commonHeliosRapportPrefetsScheduledForDeletion = clone $this->collCommonHeliosRapportPrefets;
                $this->commonHeliosRapportPrefetsScheduledForDeletion->clear();
            }
            $this->commonHeliosRapportPrefetsScheduledForDeletion[]= clone $commonHeliosRapportPrefet;
            $commonHeliosRapportPrefet->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonHeliosTableauArs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonHeliosTableauArs()
     */
    public function clearCommonHeliosTableauArs()
    {
        $this->collCommonHeliosTableauArs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonHeliosTableauArsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonHeliosTableauArs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonHeliosTableauArs($v = true)
    {
        $this->collCommonHeliosTableauArsPartial = $v;
    }

    /**
     * Initializes the collCommonHeliosTableauArs collection.
     *
     * By default this just sets the collCommonHeliosTableauArs collection to an empty array (like clearcollCommonHeliosTableauArs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonHeliosTableauArs($overrideExisting = true)
    {
        if (null !== $this->collCommonHeliosTableauArs && !$overrideExisting) {
            return;
        }
        $this->collCommonHeliosTableauArs = new PropelObjectCollection();
        $this->collCommonHeliosTableauArs->setModel('CommonHeliosTableauAr');
    }

    /**
     * Gets an array of CommonHeliosTableauAr objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonHeliosTableauAr[] List of CommonHeliosTableauAr objects
     * @throws PropelException
     */
    public function getCommonHeliosTableauArs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosTableauArsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosTableauArs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosTableauArs) {
                // return empty collection
                $this->initCommonHeliosTableauArs();
            } else {
                $collCommonHeliosTableauArs = CommonHeliosTableauArQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonHeliosTableauArsPartial && count($collCommonHeliosTableauArs)) {
                      $this->initCommonHeliosTableauArs(false);

                      foreach ($collCommonHeliosTableauArs as $obj) {
                        if (false == $this->collCommonHeliosTableauArs->contains($obj)) {
                          $this->collCommonHeliosTableauArs->append($obj);
                        }
                      }

                      $this->collCommonHeliosTableauArsPartial = true;
                    }

                    $collCommonHeliosTableauArs->getInternalIterator()->rewind();

                    return $collCommonHeliosTableauArs;
                }

                if ($partial && $this->collCommonHeliosTableauArs) {
                    foreach ($this->collCommonHeliosTableauArs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonHeliosTableauArs[] = $obj;
                        }
                    }
                }

                $this->collCommonHeliosTableauArs = $collCommonHeliosTableauArs;
                $this->collCommonHeliosTableauArsPartial = false;
            }
        }

        return $this->collCommonHeliosTableauArs;
    }

    /**
     * Sets a collection of CommonHeliosTableauAr objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonHeliosTableauArs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonHeliosTableauArs(PropelCollection $commonHeliosTableauArs, PropelPDO $con = null)
    {
        $commonHeliosTableauArsToDelete = $this->getCommonHeliosTableauArs(new Criteria(), $con)->diff($commonHeliosTableauArs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonHeliosTableauArsScheduledForDeletion = clone $commonHeliosTableauArsToDelete;

        foreach ($commonHeliosTableauArsToDelete as $commonHeliosTableauArRemoved) {
            $commonHeliosTableauArRemoved->setCommonConsultation(null);
        }

        $this->collCommonHeliosTableauArs = null;
        foreach ($commonHeliosTableauArs as $commonHeliosTableauAr) {
            $this->addCommonHeliosTableauAr($commonHeliosTableauAr);
        }

        $this->collCommonHeliosTableauArs = $commonHeliosTableauArs;
        $this->collCommonHeliosTableauArsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonHeliosTableauAr objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonHeliosTableauAr objects.
     * @throws PropelException
     */
    public function countCommonHeliosTableauArs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosTableauArsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosTableauArs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosTableauArs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonHeliosTableauArs());
            }
            $query = CommonHeliosTableauArQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonHeliosTableauArs);
    }

    /**
     * Method called to associate a CommonHeliosTableauAr object to this object
     * through the CommonHeliosTableauAr foreign key attribute.
     *
     * @param   CommonHeliosTableauAr $l CommonHeliosTableauAr
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonHeliosTableauAr(CommonHeliosTableauAr $l)
    {
        if ($this->collCommonHeliosTableauArs === null) {
            $this->initCommonHeliosTableauArs();
            $this->collCommonHeliosTableauArsPartial = true;
        }
        if (!in_array($l, $this->collCommonHeliosTableauArs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonHeliosTableauAr($l);
        }

        return $this;
    }

    /**
     * @param	CommonHeliosTableauAr $commonHeliosTableauAr The commonHeliosTableauAr object to add.
     */
    protected function doAddCommonHeliosTableauAr($commonHeliosTableauAr)
    {
        $this->collCommonHeliosTableauArs[]= $commonHeliosTableauAr;
        $commonHeliosTableauAr->setCommonConsultation($this);
    }

    /**
     * @param	CommonHeliosTableauAr $commonHeliosTableauAr The commonHeliosTableauAr object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonHeliosTableauAr($commonHeliosTableauAr)
    {
        if ($this->getCommonHeliosTableauArs()->contains($commonHeliosTableauAr)) {
            $this->collCommonHeliosTableauArs->remove($this->collCommonHeliosTableauArs->search($commonHeliosTableauAr));
            if (null === $this->commonHeliosTableauArsScheduledForDeletion) {
                $this->commonHeliosTableauArsScheduledForDeletion = clone $this->collCommonHeliosTableauArs;
                $this->commonHeliosTableauArsScheduledForDeletion->clear();
            }
            $this->commonHeliosTableauArsScheduledForDeletion[]= clone $commonHeliosTableauAr;
            $commonHeliosTableauAr->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonHeliosTeletransmissions collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonHeliosTeletransmissions()
     */
    public function clearCommonHeliosTeletransmissions()
    {
        $this->collCommonHeliosTeletransmissions = null; // important to set this to null since that means it is uninitialized
        $this->collCommonHeliosTeletransmissionsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonHeliosTeletransmissions collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonHeliosTeletransmissions($v = true)
    {
        $this->collCommonHeliosTeletransmissionsPartial = $v;
    }

    /**
     * Initializes the collCommonHeliosTeletransmissions collection.
     *
     * By default this just sets the collCommonHeliosTeletransmissions collection to an empty array (like clearcollCommonHeliosTeletransmissions());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonHeliosTeletransmissions($overrideExisting = true)
    {
        if (null !== $this->collCommonHeliosTeletransmissions && !$overrideExisting) {
            return;
        }
        $this->collCommonHeliosTeletransmissions = new PropelObjectCollection();
        $this->collCommonHeliosTeletransmissions->setModel('CommonHeliosTeletransmission');
    }

    /**
     * Gets an array of CommonHeliosTeletransmission objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonHeliosTeletransmission[] List of CommonHeliosTeletransmission objects
     * @throws PropelException
     */
    public function getCommonHeliosTeletransmissions($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosTeletransmissionsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosTeletransmissions || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosTeletransmissions) {
                // return empty collection
                $this->initCommonHeliosTeletransmissions();
            } else {
                $collCommonHeliosTeletransmissions = CommonHeliosTeletransmissionQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonHeliosTeletransmissionsPartial && count($collCommonHeliosTeletransmissions)) {
                      $this->initCommonHeliosTeletransmissions(false);

                      foreach ($collCommonHeliosTeletransmissions as $obj) {
                        if (false == $this->collCommonHeliosTeletransmissions->contains($obj)) {
                          $this->collCommonHeliosTeletransmissions->append($obj);
                        }
                      }

                      $this->collCommonHeliosTeletransmissionsPartial = true;
                    }

                    $collCommonHeliosTeletransmissions->getInternalIterator()->rewind();

                    return $collCommonHeliosTeletransmissions;
                }

                if ($partial && $this->collCommonHeliosTeletransmissions) {
                    foreach ($this->collCommonHeliosTeletransmissions as $obj) {
                        if ($obj->isNew()) {
                            $collCommonHeliosTeletransmissions[] = $obj;
                        }
                    }
                }

                $this->collCommonHeliosTeletransmissions = $collCommonHeliosTeletransmissions;
                $this->collCommonHeliosTeletransmissionsPartial = false;
            }
        }

        return $this->collCommonHeliosTeletransmissions;
    }

    /**
     * Sets a collection of CommonHeliosTeletransmission objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonHeliosTeletransmissions A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonHeliosTeletransmissions(PropelCollection $commonHeliosTeletransmissions, PropelPDO $con = null)
    {
        $commonHeliosTeletransmissionsToDelete = $this->getCommonHeliosTeletransmissions(new Criteria(), $con)->diff($commonHeliosTeletransmissions);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonHeliosTeletransmissionsScheduledForDeletion = clone $commonHeliosTeletransmissionsToDelete;

        foreach ($commonHeliosTeletransmissionsToDelete as $commonHeliosTeletransmissionRemoved) {
            $commonHeliosTeletransmissionRemoved->setCommonConsultation(null);
        }

        $this->collCommonHeliosTeletransmissions = null;
        foreach ($commonHeliosTeletransmissions as $commonHeliosTeletransmission) {
            $this->addCommonHeliosTeletransmission($commonHeliosTeletransmission);
        }

        $this->collCommonHeliosTeletransmissions = $commonHeliosTeletransmissions;
        $this->collCommonHeliosTeletransmissionsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonHeliosTeletransmission objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonHeliosTeletransmission objects.
     * @throws PropelException
     */
    public function countCommonHeliosTeletransmissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonHeliosTeletransmissionsPartial && !$this->isNew();
        if (null === $this->collCommonHeliosTeletransmissions || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonHeliosTeletransmissions) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonHeliosTeletransmissions());
            }
            $query = CommonHeliosTeletransmissionQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonHeliosTeletransmissions);
    }

    /**
     * Method called to associate a CommonHeliosTeletransmission object to this object
     * through the CommonHeliosTeletransmission foreign key attribute.
     *
     * @param   CommonHeliosTeletransmission $l CommonHeliosTeletransmission
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonHeliosTeletransmission(CommonHeliosTeletransmission $l)
    {
        if ($this->collCommonHeliosTeletransmissions === null) {
            $this->initCommonHeliosTeletransmissions();
            $this->collCommonHeliosTeletransmissionsPartial = true;
        }
        if (!in_array($l, $this->collCommonHeliosTeletransmissions->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonHeliosTeletransmission($l);
        }

        return $this;
    }

    /**
     * @param	CommonHeliosTeletransmission $commonHeliosTeletransmission The commonHeliosTeletransmission object to add.
     */
    protected function doAddCommonHeliosTeletransmission($commonHeliosTeletransmission)
    {
        $this->collCommonHeliosTeletransmissions[]= $commonHeliosTeletransmission;
        $commonHeliosTeletransmission->setCommonConsultation($this);
    }

    /**
     * @param	CommonHeliosTeletransmission $commonHeliosTeletransmission The commonHeliosTeletransmission object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonHeliosTeletransmission($commonHeliosTeletransmission)
    {
        if ($this->getCommonHeliosTeletransmissions()->contains($commonHeliosTeletransmission)) {
            $this->collCommonHeliosTeletransmissions->remove($this->collCommonHeliosTeletransmissions->search($commonHeliosTeletransmission));
            if (null === $this->commonHeliosTeletransmissionsScheduledForDeletion) {
                $this->commonHeliosTeletransmissionsScheduledForDeletion = clone $this->collCommonHeliosTeletransmissions;
                $this->commonHeliosTeletransmissionsScheduledForDeletion->clear();
            }
            $this->commonHeliosTeletransmissionsScheduledForDeletion[]= clone $commonHeliosTeletransmission;
            $commonHeliosTeletransmission->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonInterneConsultations collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonInterneConsultations()
     */
    public function clearCommonInterneConsultations()
    {
        $this->collCommonInterneConsultations = null; // important to set this to null since that means it is uninitialized
        $this->collCommonInterneConsultationsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonInterneConsultations collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonInterneConsultations($v = true)
    {
        $this->collCommonInterneConsultationsPartial = $v;
    }

    /**
     * Initializes the collCommonInterneConsultations collection.
     *
     * By default this just sets the collCommonInterneConsultations collection to an empty array (like clearcollCommonInterneConsultations());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonInterneConsultations($overrideExisting = true)
    {
        if (null !== $this->collCommonInterneConsultations && !$overrideExisting) {
            return;
        }
        $this->collCommonInterneConsultations = new PropelObjectCollection();
        $this->collCommonInterneConsultations->setModel('CommonInterneConsultation');
    }

    /**
     * Gets an array of CommonInterneConsultation objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonInterneConsultation[] List of CommonInterneConsultation objects
     * @throws PropelException
     */
    public function getCommonInterneConsultations($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonInterneConsultationsPartial && !$this->isNew();
        if (null === $this->collCommonInterneConsultations || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonInterneConsultations) {
                // return empty collection
                $this->initCommonInterneConsultations();
            } else {
                $collCommonInterneConsultations = CommonInterneConsultationQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonInterneConsultationsPartial && count($collCommonInterneConsultations)) {
                      $this->initCommonInterneConsultations(false);

                      foreach ($collCommonInterneConsultations as $obj) {
                        if (false == $this->collCommonInterneConsultations->contains($obj)) {
                          $this->collCommonInterneConsultations->append($obj);
                        }
                      }

                      $this->collCommonInterneConsultationsPartial = true;
                    }

                    $collCommonInterneConsultations->getInternalIterator()->rewind();

                    return $collCommonInterneConsultations;
                }

                if ($partial && $this->collCommonInterneConsultations) {
                    foreach ($this->collCommonInterneConsultations as $obj) {
                        if ($obj->isNew()) {
                            $collCommonInterneConsultations[] = $obj;
                        }
                    }
                }

                $this->collCommonInterneConsultations = $collCommonInterneConsultations;
                $this->collCommonInterneConsultationsPartial = false;
            }
        }

        return $this->collCommonInterneConsultations;
    }

    /**
     * Sets a collection of CommonInterneConsultation objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonInterneConsultations A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonInterneConsultations(PropelCollection $commonInterneConsultations, PropelPDO $con = null)
    {
        $commonInterneConsultationsToDelete = $this->getCommonInterneConsultations(new Criteria(), $con)->diff($commonInterneConsultations);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonInterneConsultationsScheduledForDeletion = clone $commonInterneConsultationsToDelete;

        foreach ($commonInterneConsultationsToDelete as $commonInterneConsultationRemoved) {
            $commonInterneConsultationRemoved->setCommonConsultation(null);
        }

        $this->collCommonInterneConsultations = null;
        foreach ($commonInterneConsultations as $commonInterneConsultation) {
            $this->addCommonInterneConsultation($commonInterneConsultation);
        }

        $this->collCommonInterneConsultations = $commonInterneConsultations;
        $this->collCommonInterneConsultationsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonInterneConsultation objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonInterneConsultation objects.
     * @throws PropelException
     */
    public function countCommonInterneConsultations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonInterneConsultationsPartial && !$this->isNew();
        if (null === $this->collCommonInterneConsultations || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonInterneConsultations) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonInterneConsultations());
            }
            $query = CommonInterneConsultationQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonInterneConsultations);
    }

    /**
     * Method called to associate a CommonInterneConsultation object to this object
     * through the CommonInterneConsultation foreign key attribute.
     *
     * @param   CommonInterneConsultation $l CommonInterneConsultation
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonInterneConsultation(CommonInterneConsultation $l)
    {
        if ($this->collCommonInterneConsultations === null) {
            $this->initCommonInterneConsultations();
            $this->collCommonInterneConsultationsPartial = true;
        }
        if (!in_array($l, $this->collCommonInterneConsultations->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonInterneConsultation($l);
        }

        return $this;
    }

    /**
     * @param	CommonInterneConsultation $commonInterneConsultation The commonInterneConsultation object to add.
     */
    protected function doAddCommonInterneConsultation($commonInterneConsultation)
    {
        $this->collCommonInterneConsultations[]= $commonInterneConsultation;
        $commonInterneConsultation->setCommonConsultation($this);
    }

    /**
     * @param	CommonInterneConsultation $commonInterneConsultation The commonInterneConsultation object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonInterneConsultation($commonInterneConsultation)
    {
        if ($this->getCommonInterneConsultations()->contains($commonInterneConsultation)) {
            $this->collCommonInterneConsultations->remove($this->collCommonInterneConsultations->search($commonInterneConsultation));
            if (null === $this->commonInterneConsultationsScheduledForDeletion) {
                $this->commonInterneConsultationsScheduledForDeletion = clone $this->collCommonInterneConsultations;
                $this->commonInterneConsultationsScheduledForDeletion->clear();
            }
            $this->commonInterneConsultationsScheduledForDeletion[]= clone $commonInterneConsultation;
            $commonInterneConsultation->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonInterneConsultationSuiviSeuls collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonInterneConsultationSuiviSeuls()
     */
    public function clearCommonInterneConsultationSuiviSeuls()
    {
        $this->collCommonInterneConsultationSuiviSeuls = null; // important to set this to null since that means it is uninitialized
        $this->collCommonInterneConsultationSuiviSeulsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonInterneConsultationSuiviSeuls collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonInterneConsultationSuiviSeuls($v = true)
    {
        $this->collCommonInterneConsultationSuiviSeulsPartial = $v;
    }

    /**
     * Initializes the collCommonInterneConsultationSuiviSeuls collection.
     *
     * By default this just sets the collCommonInterneConsultationSuiviSeuls collection to an empty array (like clearcollCommonInterneConsultationSuiviSeuls());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonInterneConsultationSuiviSeuls($overrideExisting = true)
    {
        if (null !== $this->collCommonInterneConsultationSuiviSeuls && !$overrideExisting) {
            return;
        }
        $this->collCommonInterneConsultationSuiviSeuls = new PropelObjectCollection();
        $this->collCommonInterneConsultationSuiviSeuls->setModel('CommonInterneConsultationSuiviSeul');
    }

    /**
     * Gets an array of CommonInterneConsultationSuiviSeul objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonInterneConsultationSuiviSeul[] List of CommonInterneConsultationSuiviSeul objects
     * @throws PropelException
     */
    public function getCommonInterneConsultationSuiviSeuls($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonInterneConsultationSuiviSeulsPartial && !$this->isNew();
        if (null === $this->collCommonInterneConsultationSuiviSeuls || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonInterneConsultationSuiviSeuls) {
                // return empty collection
                $this->initCommonInterneConsultationSuiviSeuls();
            } else {
                $collCommonInterneConsultationSuiviSeuls = CommonInterneConsultationSuiviSeulQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonInterneConsultationSuiviSeulsPartial && count($collCommonInterneConsultationSuiviSeuls)) {
                      $this->initCommonInterneConsultationSuiviSeuls(false);

                      foreach ($collCommonInterneConsultationSuiviSeuls as $obj) {
                        if (false == $this->collCommonInterneConsultationSuiviSeuls->contains($obj)) {
                          $this->collCommonInterneConsultationSuiviSeuls->append($obj);
                        }
                      }

                      $this->collCommonInterneConsultationSuiviSeulsPartial = true;
                    }

                    $collCommonInterneConsultationSuiviSeuls->getInternalIterator()->rewind();

                    return $collCommonInterneConsultationSuiviSeuls;
                }

                if ($partial && $this->collCommonInterneConsultationSuiviSeuls) {
                    foreach ($this->collCommonInterneConsultationSuiviSeuls as $obj) {
                        if ($obj->isNew()) {
                            $collCommonInterneConsultationSuiviSeuls[] = $obj;
                        }
                    }
                }

                $this->collCommonInterneConsultationSuiviSeuls = $collCommonInterneConsultationSuiviSeuls;
                $this->collCommonInterneConsultationSuiviSeulsPartial = false;
            }
        }

        return $this->collCommonInterneConsultationSuiviSeuls;
    }

    /**
     * Sets a collection of CommonInterneConsultationSuiviSeul objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonInterneConsultationSuiviSeuls A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonInterneConsultationSuiviSeuls(PropelCollection $commonInterneConsultationSuiviSeuls, PropelPDO $con = null)
    {
        $commonInterneConsultationSuiviSeulsToDelete = $this->getCommonInterneConsultationSuiviSeuls(new Criteria(), $con)->diff($commonInterneConsultationSuiviSeuls);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonInterneConsultationSuiviSeulsScheduledForDeletion = clone $commonInterneConsultationSuiviSeulsToDelete;

        foreach ($commonInterneConsultationSuiviSeulsToDelete as $commonInterneConsultationSuiviSeulRemoved) {
            $commonInterneConsultationSuiviSeulRemoved->setCommonConsultation(null);
        }

        $this->collCommonInterneConsultationSuiviSeuls = null;
        foreach ($commonInterneConsultationSuiviSeuls as $commonInterneConsultationSuiviSeul) {
            $this->addCommonInterneConsultationSuiviSeul($commonInterneConsultationSuiviSeul);
        }

        $this->collCommonInterneConsultationSuiviSeuls = $commonInterneConsultationSuiviSeuls;
        $this->collCommonInterneConsultationSuiviSeulsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonInterneConsultationSuiviSeul objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonInterneConsultationSuiviSeul objects.
     * @throws PropelException
     */
    public function countCommonInterneConsultationSuiviSeuls(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonInterneConsultationSuiviSeulsPartial && !$this->isNew();
        if (null === $this->collCommonInterneConsultationSuiviSeuls || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonInterneConsultationSuiviSeuls) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonInterneConsultationSuiviSeuls());
            }
            $query = CommonInterneConsultationSuiviSeulQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonInterneConsultationSuiviSeuls);
    }

    /**
     * Method called to associate a CommonInterneConsultationSuiviSeul object to this object
     * through the CommonInterneConsultationSuiviSeul foreign key attribute.
     *
     * @param   CommonInterneConsultationSuiviSeul $l CommonInterneConsultationSuiviSeul
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonInterneConsultationSuiviSeul(CommonInterneConsultationSuiviSeul $l)
    {
        if ($this->collCommonInterneConsultationSuiviSeuls === null) {
            $this->initCommonInterneConsultationSuiviSeuls();
            $this->collCommonInterneConsultationSuiviSeulsPartial = true;
        }
        if (!in_array($l, $this->collCommonInterneConsultationSuiviSeuls->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonInterneConsultationSuiviSeul($l);
        }

        return $this;
    }

    /**
     * @param	CommonInterneConsultationSuiviSeul $commonInterneConsultationSuiviSeul The commonInterneConsultationSuiviSeul object to add.
     */
    protected function doAddCommonInterneConsultationSuiviSeul($commonInterneConsultationSuiviSeul)
    {
        $this->collCommonInterneConsultationSuiviSeuls[]= $commonInterneConsultationSuiviSeul;
        $commonInterneConsultationSuiviSeul->setCommonConsultation($this);
    }

    /**
     * @param	CommonInterneConsultationSuiviSeul $commonInterneConsultationSuiviSeul The commonInterneConsultationSuiviSeul object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonInterneConsultationSuiviSeul($commonInterneConsultationSuiviSeul)
    {
        if ($this->getCommonInterneConsultationSuiviSeuls()->contains($commonInterneConsultationSuiviSeul)) {
            $this->collCommonInterneConsultationSuiviSeuls->remove($this->collCommonInterneConsultationSuiviSeuls->search($commonInterneConsultationSuiviSeul));
            if (null === $this->commonInterneConsultationSuiviSeulsScheduledForDeletion) {
                $this->commonInterneConsultationSuiviSeulsScheduledForDeletion = clone $this->collCommonInterneConsultationSuiviSeuls;
                $this->commonInterneConsultationSuiviSeulsScheduledForDeletion->clear();
            }
            $this->commonInterneConsultationSuiviSeulsScheduledForDeletion[]= clone $commonInterneConsultationSuiviSeul;
            $commonInterneConsultationSuiviSeul->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonOffrePapiers collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonOffrePapiers()
     */
    public function clearCommonOffrePapiers()
    {
        $this->collCommonOffrePapiers = null; // important to set this to null since that means it is uninitialized
        $this->collCommonOffrePapiersPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonOffrePapiers collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonOffrePapiers($v = true)
    {
        $this->collCommonOffrePapiersPartial = $v;
    }

    /**
     * Initializes the collCommonOffrePapiers collection.
     *
     * By default this just sets the collCommonOffrePapiers collection to an empty array (like clearcollCommonOffrePapiers());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonOffrePapiers($overrideExisting = true)
    {
        if (null !== $this->collCommonOffrePapiers && !$overrideExisting) {
            return;
        }
        $this->collCommonOffrePapiers = new PropelObjectCollection();
        $this->collCommonOffrePapiers->setModel('CommonOffrePapier');
    }

    /**
     * Gets an array of CommonOffrePapier objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonOffrePapier[] List of CommonOffrePapier objects
     * @throws PropelException
     */
    public function getCommonOffrePapiers($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonOffrePapiersPartial && !$this->isNew();
        if (null === $this->collCommonOffrePapiers || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonOffrePapiers) {
                // return empty collection
                $this->initCommonOffrePapiers();
            } else {
                $collCommonOffrePapiers = CommonOffrePapierQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonOffrePapiersPartial && count($collCommonOffrePapiers)) {
                      $this->initCommonOffrePapiers(false);

                      foreach ($collCommonOffrePapiers as $obj) {
                        if (false == $this->collCommonOffrePapiers->contains($obj)) {
                          $this->collCommonOffrePapiers->append($obj);
                        }
                      }

                      $this->collCommonOffrePapiersPartial = true;
                    }

                    $collCommonOffrePapiers->getInternalIterator()->rewind();

                    return $collCommonOffrePapiers;
                }

                if ($partial && $this->collCommonOffrePapiers) {
                    foreach ($this->collCommonOffrePapiers as $obj) {
                        if ($obj->isNew()) {
                            $collCommonOffrePapiers[] = $obj;
                        }
                    }
                }

                $this->collCommonOffrePapiers = $collCommonOffrePapiers;
                $this->collCommonOffrePapiersPartial = false;
            }
        }

        return $this->collCommonOffrePapiers;
    }

    /**
     * Sets a collection of CommonOffrePapier objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonOffrePapiers A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonOffrePapiers(PropelCollection $commonOffrePapiers, PropelPDO $con = null)
    {
        $commonOffrePapiersToDelete = $this->getCommonOffrePapiers(new Criteria(), $con)->diff($commonOffrePapiers);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonOffrePapiersScheduledForDeletion = clone $commonOffrePapiersToDelete;

        foreach ($commonOffrePapiersToDelete as $commonOffrePapierRemoved) {
            $commonOffrePapierRemoved->setCommonConsultation(null);
        }

        $this->collCommonOffrePapiers = null;
        foreach ($commonOffrePapiers as $commonOffrePapier) {
            $this->addCommonOffrePapier($commonOffrePapier);
        }

        $this->collCommonOffrePapiers = $commonOffrePapiers;
        $this->collCommonOffrePapiersPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonOffrePapier objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonOffrePapier objects.
     * @throws PropelException
     */
    public function countCommonOffrePapiers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonOffrePapiersPartial && !$this->isNew();
        if (null === $this->collCommonOffrePapiers || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonOffrePapiers) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonOffrePapiers());
            }
            $query = CommonOffrePapierQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonOffrePapiers);
    }

    /**
     * Method called to associate a CommonOffrePapier object to this object
     * through the CommonOffrePapier foreign key attribute.
     *
     * @param   CommonOffrePapier $l CommonOffrePapier
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonOffrePapier(CommonOffrePapier $l)
    {
        if ($this->collCommonOffrePapiers === null) {
            $this->initCommonOffrePapiers();
            $this->collCommonOffrePapiersPartial = true;
        }
        if (!in_array($l, $this->collCommonOffrePapiers->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonOffrePapier($l);
        }

        return $this;
    }

    /**
     * @param	CommonOffrePapier $commonOffrePapier The commonOffrePapier object to add.
     */
    protected function doAddCommonOffrePapier($commonOffrePapier)
    {
        $this->collCommonOffrePapiers[]= $commonOffrePapier;
        $commonOffrePapier->setCommonConsultation($this);
    }

    /**
     * @param	CommonOffrePapier $commonOffrePapier The commonOffrePapier object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonOffrePapier($commonOffrePapier)
    {
        if ($this->getCommonOffrePapiers()->contains($commonOffrePapier)) {
            $this->collCommonOffrePapiers->remove($this->collCommonOffrePapiers->search($commonOffrePapier));
            if (null === $this->commonOffrePapiersScheduledForDeletion) {
                $this->commonOffrePapiersScheduledForDeletion = clone $this->collCommonOffrePapiers;
                $this->commonOffrePapiersScheduledForDeletion->clear();
            }
            $this->commonOffrePapiersScheduledForDeletion[]= clone $commonOffrePapier;
            $commonOffrePapier->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonOffress collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonOffress()
     */
    public function clearCommonOffress()
    {
        $this->collCommonOffress = null; // important to set this to null since that means it is uninitialized
        $this->collCommonOffressPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonOffress collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonOffress($v = true)
    {
        $this->collCommonOffressPartial = $v;
    }

    /**
     * Initializes the collCommonOffress collection.
     *
     * By default this just sets the collCommonOffress collection to an empty array (like clearcollCommonOffress());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonOffress($overrideExisting = true)
    {
        if (null !== $this->collCommonOffress && !$overrideExisting) {
            return;
        }
        $this->collCommonOffress = new PropelObjectCollection();
        $this->collCommonOffress->setModel('CommonOffres');
    }

    /**
     * Gets an array of CommonOffres objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonOffres[] List of CommonOffres objects
     * @throws PropelException
     */
    public function getCommonOffress($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonOffressPartial && !$this->isNew();
        if (null === $this->collCommonOffress || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonOffress) {
                // return empty collection
                $this->initCommonOffress();
            } else {
                $collCommonOffress = CommonOffresQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonOffressPartial && count($collCommonOffress)) {
                      $this->initCommonOffress(false);

                      foreach ($collCommonOffress as $obj) {
                        if (false == $this->collCommonOffress->contains($obj)) {
                          $this->collCommonOffress->append($obj);
                        }
                      }

                      $this->collCommonOffressPartial = true;
                    }

                    $collCommonOffress->getInternalIterator()->rewind();

                    return $collCommonOffress;
                }

                if ($partial && $this->collCommonOffress) {
                    foreach ($this->collCommonOffress as $obj) {
                        if ($obj->isNew()) {
                            $collCommonOffress[] = $obj;
                        }
                    }
                }

                $this->collCommonOffress = $collCommonOffress;
                $this->collCommonOffressPartial = false;
            }
        }

        return $this->collCommonOffress;
    }

    /**
     * Sets a collection of CommonOffres objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonOffress A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonOffress(PropelCollection $commonOffress, PropelPDO $con = null)
    {
        $commonOffressToDelete = $this->getCommonOffress(new Criteria(), $con)->diff($commonOffress);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonOffressScheduledForDeletion = clone $commonOffressToDelete;

        foreach ($commonOffressToDelete as $commonOffresRemoved) {
            $commonOffresRemoved->setCommonConsultation(null);
        }

        $this->collCommonOffress = null;
        foreach ($commonOffress as $commonOffres) {
            $this->addCommonOffres($commonOffres);
        }

        $this->collCommonOffress = $commonOffress;
        $this->collCommonOffressPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonOffres objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonOffres objects.
     * @throws PropelException
     */
    public function countCommonOffress(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonOffressPartial && !$this->isNew();
        if (null === $this->collCommonOffress || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonOffress) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonOffress());
            }
            $query = CommonOffresQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonOffress);
    }

    /**
     * Method called to associate a CommonOffres object to this object
     * through the CommonOffres foreign key attribute.
     *
     * @param   CommonOffres $l CommonOffres
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonOffres(CommonOffres $l)
    {
        if ($this->collCommonOffress === null) {
            $this->initCommonOffress();
            $this->collCommonOffressPartial = true;
        }
        if (!in_array($l, $this->collCommonOffress->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonOffres($l);
        }

        return $this;
    }

    /**
     * @param	CommonOffres $commonOffres The commonOffres object to add.
     */
    protected function doAddCommonOffres($commonOffres)
    {
        $this->collCommonOffress[]= $commonOffres;
        $commonOffres->setCommonConsultation($this);
    }

    /**
     * @param	CommonOffres $commonOffres The commonOffres object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonOffres($commonOffres)
    {
        if ($this->getCommonOffress()->contains($commonOffres)) {
            $this->collCommonOffress->remove($this->collCommonOffress->search($commonOffres));
            if (null === $this->commonOffressScheduledForDeletion) {
                $this->commonOffressScheduledForDeletion = clone $this->collCommonOffress;
                $this->commonOffressScheduledForDeletion->clear();
            }
            $this->commonOffressScheduledForDeletion[]= clone $commonOffres;
            $commonOffres->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonPanierEntreprises collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonPanierEntreprises()
     */
    public function clearCommonPanierEntreprises()
    {
        $this->collCommonPanierEntreprises = null; // important to set this to null since that means it is uninitialized
        $this->collCommonPanierEntreprisesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonPanierEntreprises collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonPanierEntreprises($v = true)
    {
        $this->collCommonPanierEntreprisesPartial = $v;
    }

    /**
     * Initializes the collCommonPanierEntreprises collection.
     *
     * By default this just sets the collCommonPanierEntreprises collection to an empty array (like clearcollCommonPanierEntreprises());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonPanierEntreprises($overrideExisting = true)
    {
        if (null !== $this->collCommonPanierEntreprises && !$overrideExisting) {
            return;
        }
        $this->collCommonPanierEntreprises = new PropelObjectCollection();
        $this->collCommonPanierEntreprises->setModel('CommonPanierEntreprise');
    }

    /**
     * Gets an array of CommonPanierEntreprise objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonPanierEntreprise[] List of CommonPanierEntreprise objects
     * @throws PropelException
     */
    public function getCommonPanierEntreprises($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonPanierEntreprisesPartial && !$this->isNew();
        if (null === $this->collCommonPanierEntreprises || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonPanierEntreprises) {
                // return empty collection
                $this->initCommonPanierEntreprises();
            } else {
                $collCommonPanierEntreprises = CommonPanierEntrepriseQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonPanierEntreprisesPartial && count($collCommonPanierEntreprises)) {
                      $this->initCommonPanierEntreprises(false);

                      foreach ($collCommonPanierEntreprises as $obj) {
                        if (false == $this->collCommonPanierEntreprises->contains($obj)) {
                          $this->collCommonPanierEntreprises->append($obj);
                        }
                      }

                      $this->collCommonPanierEntreprisesPartial = true;
                    }

                    $collCommonPanierEntreprises->getInternalIterator()->rewind();

                    return $collCommonPanierEntreprises;
                }

                if ($partial && $this->collCommonPanierEntreprises) {
                    foreach ($this->collCommonPanierEntreprises as $obj) {
                        if ($obj->isNew()) {
                            $collCommonPanierEntreprises[] = $obj;
                        }
                    }
                }

                $this->collCommonPanierEntreprises = $collCommonPanierEntreprises;
                $this->collCommonPanierEntreprisesPartial = false;
            }
        }

        return $this->collCommonPanierEntreprises;
    }

    /**
     * Sets a collection of CommonPanierEntreprise objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonPanierEntreprises A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonPanierEntreprises(PropelCollection $commonPanierEntreprises, PropelPDO $con = null)
    {
        $commonPanierEntreprisesToDelete = $this->getCommonPanierEntreprises(new Criteria(), $con)->diff($commonPanierEntreprises);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonPanierEntreprisesScheduledForDeletion = clone $commonPanierEntreprisesToDelete;

        foreach ($commonPanierEntreprisesToDelete as $commonPanierEntrepriseRemoved) {
            $commonPanierEntrepriseRemoved->setCommonConsultation(null);
        }

        $this->collCommonPanierEntreprises = null;
        foreach ($commonPanierEntreprises as $commonPanierEntreprise) {
            $this->addCommonPanierEntreprise($commonPanierEntreprise);
        }

        $this->collCommonPanierEntreprises = $commonPanierEntreprises;
        $this->collCommonPanierEntreprisesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonPanierEntreprise objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonPanierEntreprise objects.
     * @throws PropelException
     */
    public function countCommonPanierEntreprises(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonPanierEntreprisesPartial && !$this->isNew();
        if (null === $this->collCommonPanierEntreprises || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonPanierEntreprises) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonPanierEntreprises());
            }
            $query = CommonPanierEntrepriseQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonPanierEntreprises);
    }

    /**
     * Method called to associate a CommonPanierEntreprise object to this object
     * through the CommonPanierEntreprise foreign key attribute.
     *
     * @param   CommonPanierEntreprise $l CommonPanierEntreprise
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonPanierEntreprise(CommonPanierEntreprise $l)
    {
        if ($this->collCommonPanierEntreprises === null) {
            $this->initCommonPanierEntreprises();
            $this->collCommonPanierEntreprisesPartial = true;
        }
        if (!in_array($l, $this->collCommonPanierEntreprises->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonPanierEntreprise($l);
        }

        return $this;
    }

    /**
     * @param	CommonPanierEntreprise $commonPanierEntreprise The commonPanierEntreprise object to add.
     */
    protected function doAddCommonPanierEntreprise($commonPanierEntreprise)
    {
        $this->collCommonPanierEntreprises[]= $commonPanierEntreprise;
        $commonPanierEntreprise->setCommonConsultation($this);
    }

    /**
     * @param	CommonPanierEntreprise $commonPanierEntreprise The commonPanierEntreprise object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonPanierEntreprise($commonPanierEntreprise)
    {
        if ($this->getCommonPanierEntreprises()->contains($commonPanierEntreprise)) {
            $this->collCommonPanierEntreprises->remove($this->collCommonPanierEntreprises->search($commonPanierEntreprise));
            if (null === $this->commonPanierEntreprisesScheduledForDeletion) {
                $this->commonPanierEntreprisesScheduledForDeletion = clone $this->collCommonPanierEntreprises;
                $this->commonPanierEntreprisesScheduledForDeletion->clear();
            }
            $this->commonPanierEntreprisesScheduledForDeletion[]= clone $commonPanierEntreprise;
            $commonPanierEntreprise->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonPiecesDCEsRelatedByRefConsultation collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonPiecesDCEsRelatedByRefConsultation()
     */
    public function clearCommonPiecesDCEsRelatedByRefConsultation()
    {
        $this->collCommonPiecesDCEsRelatedByRefConsultation = null; // important to set this to null since that means it is uninitialized
        $this->collCommonPiecesDCEsRelatedByRefConsultationPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonPiecesDCEsRelatedByRefConsultation collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonPiecesDCEsRelatedByRefConsultation($v = true)
    {
        $this->collCommonPiecesDCEsRelatedByRefConsultationPartial = $v;
    }

    /**
     * Initializes the collCommonPiecesDCEsRelatedByRefConsultation collection.
     *
     * By default this just sets the collCommonPiecesDCEsRelatedByRefConsultation collection to an empty array (like clearcollCommonPiecesDCEsRelatedByRefConsultation());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonPiecesDCEsRelatedByRefConsultation($overrideExisting = true)
    {
        if (null !== $this->collCommonPiecesDCEsRelatedByRefConsultation && !$overrideExisting) {
            return;
        }
        $this->collCommonPiecesDCEsRelatedByRefConsultation = new PropelObjectCollection();
        $this->collCommonPiecesDCEsRelatedByRefConsultation->setModel('CommonPiecesDCE');
    }

    /**
     * Gets an array of CommonPiecesDCE objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonPiecesDCE[] List of CommonPiecesDCE objects
     * @throws PropelException
     */
    public function getCommonPiecesDCEsRelatedByRefConsultation($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonPiecesDCEsRelatedByRefConsultationPartial && !$this->isNew();
        if (null === $this->collCommonPiecesDCEsRelatedByRefConsultation || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonPiecesDCEsRelatedByRefConsultation) {
                // return empty collection
                $this->initCommonPiecesDCEsRelatedByRefConsultation();
            } else {
                $collCommonPiecesDCEsRelatedByRefConsultation = CommonPiecesDCEQuery::create(null, $criteria)
                    ->filterByCommonConsultationRelatedByRefConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonPiecesDCEsRelatedByRefConsultationPartial && count($collCommonPiecesDCEsRelatedByRefConsultation)) {
                      $this->initCommonPiecesDCEsRelatedByRefConsultation(false);

                      foreach ($collCommonPiecesDCEsRelatedByRefConsultation as $obj) {
                        if (false == $this->collCommonPiecesDCEsRelatedByRefConsultation->contains($obj)) {
                          $this->collCommonPiecesDCEsRelatedByRefConsultation->append($obj);
                        }
                      }

                      $this->collCommonPiecesDCEsRelatedByRefConsultationPartial = true;
                    }

                    $collCommonPiecesDCEsRelatedByRefConsultation->getInternalIterator()->rewind();

                    return $collCommonPiecesDCEsRelatedByRefConsultation;
                }

                if ($partial && $this->collCommonPiecesDCEsRelatedByRefConsultation) {
                    foreach ($this->collCommonPiecesDCEsRelatedByRefConsultation as $obj) {
                        if ($obj->isNew()) {
                            $collCommonPiecesDCEsRelatedByRefConsultation[] = $obj;
                        }
                    }
                }

                $this->collCommonPiecesDCEsRelatedByRefConsultation = $collCommonPiecesDCEsRelatedByRefConsultation;
                $this->collCommonPiecesDCEsRelatedByRefConsultationPartial = false;
            }
        }

        return $this->collCommonPiecesDCEsRelatedByRefConsultation;
    }

    /**
     * Sets a collection of CommonPiecesDCERelatedByRefConsultation objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonPiecesDCEsRelatedByRefConsultation A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonPiecesDCEsRelatedByRefConsultation(PropelCollection $commonPiecesDCEsRelatedByRefConsultation, PropelPDO $con = null)
    {
        $commonPiecesDCEsRelatedByRefConsultationToDelete = $this->getCommonPiecesDCEsRelatedByRefConsultation(new Criteria(), $con)->diff($commonPiecesDCEsRelatedByRefConsultation);


        $this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion = $commonPiecesDCEsRelatedByRefConsultationToDelete;

        foreach ($commonPiecesDCEsRelatedByRefConsultationToDelete as $commonPiecesDCERelatedByRefConsultationRemoved) {
            $commonPiecesDCERelatedByRefConsultationRemoved->setCommonConsultationRelatedByRefConsultation(null);
        }

        $this->collCommonPiecesDCEsRelatedByRefConsultation = null;
        foreach ($commonPiecesDCEsRelatedByRefConsultation as $commonPiecesDCERelatedByRefConsultation) {
            $this->addCommonPiecesDCERelatedByRefConsultation($commonPiecesDCERelatedByRefConsultation);
        }

        $this->collCommonPiecesDCEsRelatedByRefConsultation = $commonPiecesDCEsRelatedByRefConsultation;
        $this->collCommonPiecesDCEsRelatedByRefConsultationPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonPiecesDCE objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonPiecesDCE objects.
     * @throws PropelException
     */
    public function countCommonPiecesDCEsRelatedByRefConsultation(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonPiecesDCEsRelatedByRefConsultationPartial && !$this->isNew();
        if (null === $this->collCommonPiecesDCEsRelatedByRefConsultation || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonPiecesDCEsRelatedByRefConsultation) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonPiecesDCEsRelatedByRefConsultation());
            }
            $query = CommonPiecesDCEQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultationRelatedByRefConsultation($this)
                ->count($con);
        }

        return count($this->collCommonPiecesDCEsRelatedByRefConsultation);
    }

    /**
     * Method called to associate a CommonPiecesDCE object to this object
     * through the CommonPiecesDCE foreign key attribute.
     *
     * @param   CommonPiecesDCE $l CommonPiecesDCE
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonPiecesDCERelatedByRefConsultation(CommonPiecesDCE $l)
    {
        if ($this->collCommonPiecesDCEsRelatedByRefConsultation === null) {
            $this->initCommonPiecesDCEsRelatedByRefConsultation();
            $this->collCommonPiecesDCEsRelatedByRefConsultationPartial = true;
        }
        if (!in_array($l, $this->collCommonPiecesDCEsRelatedByRefConsultation->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonPiecesDCERelatedByRefConsultation($l);
        }

        return $this;
    }

    /**
     * @param	CommonPiecesDCERelatedByRefConsultation $commonPiecesDCERelatedByRefConsultation The commonPiecesDCERelatedByRefConsultation object to add.
     */
    protected function doAddCommonPiecesDCERelatedByRefConsultation($commonPiecesDCERelatedByRefConsultation)
    {
        $this->collCommonPiecesDCEsRelatedByRefConsultation[]= $commonPiecesDCERelatedByRefConsultation;
        $commonPiecesDCERelatedByRefConsultation->setCommonConsultationRelatedByRefConsultation($this);
    }

    /**
     * @param	CommonPiecesDCERelatedByRefConsultation $commonPiecesDCERelatedByRefConsultation The commonPiecesDCERelatedByRefConsultation object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonPiecesDCERelatedByRefConsultation($commonPiecesDCERelatedByRefConsultation)
    {
        if ($this->getCommonPiecesDCEsRelatedByRefConsultation()->contains($commonPiecesDCERelatedByRefConsultation)) {
            $this->collCommonPiecesDCEsRelatedByRefConsultation->remove($this->collCommonPiecesDCEsRelatedByRefConsultation->search($commonPiecesDCERelatedByRefConsultation));
            if (null === $this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion) {
                $this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion = clone $this->collCommonPiecesDCEsRelatedByRefConsultation;
                $this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion->clear();
            }
            $this->commonPiecesDCEsRelatedByRefConsultationScheduledForDeletion[]= clone $commonPiecesDCERelatedByRefConsultation;
            $commonPiecesDCERelatedByRefConsultation->setCommonConsultationRelatedByRefConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonPiecesDCEsRelatedByOrganismeConsultation collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonPiecesDCEsRelatedByOrganismeConsultation()
     */
    public function clearCommonPiecesDCEsRelatedByOrganismeConsultation()
    {
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = null; // important to set this to null since that means it is uninitialized
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonPiecesDCEsRelatedByOrganismeConsultation collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonPiecesDCEsRelatedByOrganismeConsultation($v = true)
    {
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial = $v;
    }

    /**
     * Initializes the collCommonPiecesDCEsRelatedByOrganismeConsultation collection.
     *
     * By default this just sets the collCommonPiecesDCEsRelatedByOrganismeConsultation collection to an empty array (like clearcollCommonPiecesDCEsRelatedByOrganismeConsultation());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonPiecesDCEsRelatedByOrganismeConsultation($overrideExisting = true)
    {
        if (null !== $this->collCommonPiecesDCEsRelatedByOrganismeConsultation && !$overrideExisting) {
            return;
        }
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = new PropelObjectCollection();
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->setModel('CommonPiecesDCE');
    }

    /**
     * Gets an array of CommonPiecesDCE objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonPiecesDCE[] List of CommonPiecesDCE objects
     * @throws PropelException
     */
    public function getCommonPiecesDCEsRelatedByOrganismeConsultation($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial && !$this->isNew();
        if (null === $this->collCommonPiecesDCEsRelatedByOrganismeConsultation || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonPiecesDCEsRelatedByOrganismeConsultation) {
                // return empty collection
                $this->initCommonPiecesDCEsRelatedByOrganismeConsultation();
            } else {
                $collCommonPiecesDCEsRelatedByOrganismeConsultation = CommonPiecesDCEQuery::create(null, $criteria)
                    ->filterByCommonConsultationRelatedByOrganismeConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial && count($collCommonPiecesDCEsRelatedByOrganismeConsultation)) {
                      $this->initCommonPiecesDCEsRelatedByOrganismeConsultation(false);

                      foreach ($collCommonPiecesDCEsRelatedByOrganismeConsultation as $obj) {
                        if (false == $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->contains($obj)) {
                          $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->append($obj);
                        }
                      }

                      $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial = true;
                    }

                    $collCommonPiecesDCEsRelatedByOrganismeConsultation->getInternalIterator()->rewind();

                    return $collCommonPiecesDCEsRelatedByOrganismeConsultation;
                }

                if ($partial && $this->collCommonPiecesDCEsRelatedByOrganismeConsultation) {
                    foreach ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation as $obj) {
                        if ($obj->isNew()) {
                            $collCommonPiecesDCEsRelatedByOrganismeConsultation[] = $obj;
                        }
                    }
                }

                $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = $collCommonPiecesDCEsRelatedByOrganismeConsultation;
                $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial = false;
            }
        }

        return $this->collCommonPiecesDCEsRelatedByOrganismeConsultation;
    }

    /**
     * Sets a collection of CommonPiecesDCERelatedByOrganismeConsultation objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonPiecesDCEsRelatedByOrganismeConsultation A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonPiecesDCEsRelatedByOrganismeConsultation(PropelCollection $commonPiecesDCEsRelatedByOrganismeConsultation, PropelPDO $con = null)
    {
        $commonPiecesDCEsRelatedByOrganismeConsultationToDelete = $this->getCommonPiecesDCEsRelatedByOrganismeConsultation(new Criteria(), $con)->diff($commonPiecesDCEsRelatedByOrganismeConsultation);


        $this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion = $commonPiecesDCEsRelatedByOrganismeConsultationToDelete;

        foreach ($commonPiecesDCEsRelatedByOrganismeConsultationToDelete as $commonPiecesDCERelatedByOrganismeConsultationRemoved) {
            $commonPiecesDCERelatedByOrganismeConsultationRemoved->setCommonConsultationRelatedByOrganismeConsultation(null);
        }

        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = null;
        foreach ($commonPiecesDCEsRelatedByOrganismeConsultation as $commonPiecesDCERelatedByOrganismeConsultation) {
            $this->addCommonPiecesDCERelatedByOrganismeConsultation($commonPiecesDCERelatedByOrganismeConsultation);
        }

        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = $commonPiecesDCEsRelatedByOrganismeConsultation;
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonPiecesDCE objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonPiecesDCE objects.
     * @throws PropelException
     */
    public function countCommonPiecesDCEsRelatedByOrganismeConsultation(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial && !$this->isNew();
        if (null === $this->collCommonPiecesDCEsRelatedByOrganismeConsultation || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonPiecesDCEsRelatedByOrganismeConsultation) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonPiecesDCEsRelatedByOrganismeConsultation());
            }
            $query = CommonPiecesDCEQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultationRelatedByOrganismeConsultation($this)
                ->count($con);
        }

        return count($this->collCommonPiecesDCEsRelatedByOrganismeConsultation);
    }

    /**
     * Method called to associate a CommonPiecesDCE object to this object
     * through the CommonPiecesDCE foreign key attribute.
     *
     * @param   CommonPiecesDCE $l CommonPiecesDCE
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonPiecesDCERelatedByOrganismeConsultation(CommonPiecesDCE $l)
    {
        if ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation === null) {
            $this->initCommonPiecesDCEsRelatedByOrganismeConsultation();
            $this->collCommonPiecesDCEsRelatedByOrganismeConsultationPartial = true;
        }
        if (!in_array($l, $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonPiecesDCERelatedByOrganismeConsultation($l);
        }

        return $this;
    }

    /**
     * @param	CommonPiecesDCERelatedByOrganismeConsultation $commonPiecesDCERelatedByOrganismeConsultation The commonPiecesDCERelatedByOrganismeConsultation object to add.
     */
    protected function doAddCommonPiecesDCERelatedByOrganismeConsultation($commonPiecesDCERelatedByOrganismeConsultation)
    {
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation[]= $commonPiecesDCERelatedByOrganismeConsultation;
        $commonPiecesDCERelatedByOrganismeConsultation->setCommonConsultationRelatedByOrganismeConsultation($this);
    }

    /**
     * @param	CommonPiecesDCERelatedByOrganismeConsultation $commonPiecesDCERelatedByOrganismeConsultation The commonPiecesDCERelatedByOrganismeConsultation object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonPiecesDCERelatedByOrganismeConsultation($commonPiecesDCERelatedByOrganismeConsultation)
    {
        if ($this->getCommonPiecesDCEsRelatedByOrganismeConsultation()->contains($commonPiecesDCERelatedByOrganismeConsultation)) {
            $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->remove($this->collCommonPiecesDCEsRelatedByOrganismeConsultation->search($commonPiecesDCERelatedByOrganismeConsultation));
            if (null === $this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion) {
                $this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion = clone $this->collCommonPiecesDCEsRelatedByOrganismeConsultation;
                $this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion->clear();
            }
            $this->commonPiecesDCEsRelatedByOrganismeConsultationScheduledForDeletion[]= clone $commonPiecesDCERelatedByOrganismeConsultation;
            $commonPiecesDCERelatedByOrganismeConsultation->setCommonConsultationRelatedByOrganismeConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonRGs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonRGs()
     */
    public function clearCommonRGs()
    {
        $this->collCommonRGs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonRGsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonRGs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonRGs($v = true)
    {
        $this->collCommonRGsPartial = $v;
    }

    /**
     * Initializes the collCommonRGs collection.
     *
     * By default this just sets the collCommonRGs collection to an empty array (like clearcollCommonRGs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonRGs($overrideExisting = true)
    {
        if (null !== $this->collCommonRGs && !$overrideExisting) {
            return;
        }
        $this->collCommonRGs = new PropelObjectCollection();
        $this->collCommonRGs->setModel('CommonRG');
    }

    /**
     * Gets an array of CommonRG objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonRG[] List of CommonRG objects
     * @throws PropelException
     */
    public function getCommonRGs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonRGsPartial && !$this->isNew();
        if (null === $this->collCommonRGs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonRGs) {
                // return empty collection
                $this->initCommonRGs();
            } else {
                $collCommonRGs = CommonRGQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonRGsPartial && count($collCommonRGs)) {
                      $this->initCommonRGs(false);

                      foreach ($collCommonRGs as $obj) {
                        if (false == $this->collCommonRGs->contains($obj)) {
                          $this->collCommonRGs->append($obj);
                        }
                      }

                      $this->collCommonRGsPartial = true;
                    }

                    $collCommonRGs->getInternalIterator()->rewind();

                    return $collCommonRGs;
                }

                if ($partial && $this->collCommonRGs) {
                    foreach ($this->collCommonRGs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonRGs[] = $obj;
                        }
                    }
                }

                $this->collCommonRGs = $collCommonRGs;
                $this->collCommonRGsPartial = false;
            }
        }

        return $this->collCommonRGs;
    }

    /**
     * Sets a collection of CommonRG objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonRGs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonRGs(PropelCollection $commonRGs, PropelPDO $con = null)
    {
        $commonRGsToDelete = $this->getCommonRGs(new Criteria(), $con)->diff($commonRGs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonRGsScheduledForDeletion = clone $commonRGsToDelete;

        foreach ($commonRGsToDelete as $commonRGRemoved) {
            $commonRGRemoved->setCommonConsultation(null);
        }

        $this->collCommonRGs = null;
        foreach ($commonRGs as $commonRG) {
            $this->addCommonRG($commonRG);
        }

        $this->collCommonRGs = $commonRGs;
        $this->collCommonRGsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonRG objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonRG objects.
     * @throws PropelException
     */
    public function countCommonRGs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonRGsPartial && !$this->isNew();
        if (null === $this->collCommonRGs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonRGs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonRGs());
            }
            $query = CommonRGQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonRGs);
    }

    /**
     * Method called to associate a CommonRG object to this object
     * through the CommonRG foreign key attribute.
     *
     * @param   CommonRG $l CommonRG
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonRG(CommonRG $l)
    {
        if ($this->collCommonRGs === null) {
            $this->initCommonRGs();
            $this->collCommonRGsPartial = true;
        }
        if (!in_array($l, $this->collCommonRGs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonRG($l);
        }

        return $this;
    }

    /**
     * @param	CommonRG $commonRG The commonRG object to add.
     */
    protected function doAddCommonRG($commonRG)
    {
        $this->collCommonRGs[]= $commonRG;
        $commonRG->setCommonConsultation($this);
    }

    /**
     * @param	CommonRG $commonRG The commonRG object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonRG($commonRG)
    {
        if ($this->getCommonRGs()->contains($commonRG)) {
            $this->collCommonRGs->remove($this->collCommonRGs->search($commonRG));
            if (null === $this->commonRGsScheduledForDeletion) {
                $this->commonRGsScheduledForDeletion = clone $this->collCommonRGs;
                $this->commonRGsScheduledForDeletion->clear();
            }
            $this->commonRGsScheduledForDeletion[]= clone $commonRG;
            $commonRG->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonRetraitPapiers collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonRetraitPapiers()
     */
    public function clearCommonRetraitPapiers()
    {
        $this->collCommonRetraitPapiers = null; // important to set this to null since that means it is uninitialized
        $this->collCommonRetraitPapiersPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonRetraitPapiers collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonRetraitPapiers($v = true)
    {
        $this->collCommonRetraitPapiersPartial = $v;
    }

    /**
     * Initializes the collCommonRetraitPapiers collection.
     *
     * By default this just sets the collCommonRetraitPapiers collection to an empty array (like clearcollCommonRetraitPapiers());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonRetraitPapiers($overrideExisting = true)
    {
        if (null !== $this->collCommonRetraitPapiers && !$overrideExisting) {
            return;
        }
        $this->collCommonRetraitPapiers = new PropelObjectCollection();
        $this->collCommonRetraitPapiers->setModel('CommonRetraitPapier');
    }

    /**
     * Gets an array of CommonRetraitPapier objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonRetraitPapier[] List of CommonRetraitPapier objects
     * @throws PropelException
     */
    public function getCommonRetraitPapiers($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonRetraitPapiersPartial && !$this->isNew();
        if (null === $this->collCommonRetraitPapiers || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonRetraitPapiers) {
                // return empty collection
                $this->initCommonRetraitPapiers();
            } else {
                $collCommonRetraitPapiers = CommonRetraitPapierQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonRetraitPapiersPartial && count($collCommonRetraitPapiers)) {
                      $this->initCommonRetraitPapiers(false);

                      foreach ($collCommonRetraitPapiers as $obj) {
                        if (false == $this->collCommonRetraitPapiers->contains($obj)) {
                          $this->collCommonRetraitPapiers->append($obj);
                        }
                      }

                      $this->collCommonRetraitPapiersPartial = true;
                    }

                    $collCommonRetraitPapiers->getInternalIterator()->rewind();

                    return $collCommonRetraitPapiers;
                }

                if ($partial && $this->collCommonRetraitPapiers) {
                    foreach ($this->collCommonRetraitPapiers as $obj) {
                        if ($obj->isNew()) {
                            $collCommonRetraitPapiers[] = $obj;
                        }
                    }
                }

                $this->collCommonRetraitPapiers = $collCommonRetraitPapiers;
                $this->collCommonRetraitPapiersPartial = false;
            }
        }

        return $this->collCommonRetraitPapiers;
    }

    /**
     * Sets a collection of CommonRetraitPapier objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonRetraitPapiers A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonRetraitPapiers(PropelCollection $commonRetraitPapiers, PropelPDO $con = null)
    {
        $commonRetraitPapiersToDelete = $this->getCommonRetraitPapiers(new Criteria(), $con)->diff($commonRetraitPapiers);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonRetraitPapiersScheduledForDeletion = clone $commonRetraitPapiersToDelete;

        foreach ($commonRetraitPapiersToDelete as $commonRetraitPapierRemoved) {
            $commonRetraitPapierRemoved->setCommonConsultation(null);
        }

        $this->collCommonRetraitPapiers = null;
        foreach ($commonRetraitPapiers as $commonRetraitPapier) {
            $this->addCommonRetraitPapier($commonRetraitPapier);
        }

        $this->collCommonRetraitPapiers = $commonRetraitPapiers;
        $this->collCommonRetraitPapiersPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonRetraitPapier objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonRetraitPapier objects.
     * @throws PropelException
     */
    public function countCommonRetraitPapiers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonRetraitPapiersPartial && !$this->isNew();
        if (null === $this->collCommonRetraitPapiers || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonRetraitPapiers) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonRetraitPapiers());
            }
            $query = CommonRetraitPapierQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonRetraitPapiers);
    }

    /**
     * Method called to associate a CommonRetraitPapier object to this object
     * through the CommonRetraitPapier foreign key attribute.
     *
     * @param   CommonRetraitPapier $l CommonRetraitPapier
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonRetraitPapier(CommonRetraitPapier $l)
    {
        if ($this->collCommonRetraitPapiers === null) {
            $this->initCommonRetraitPapiers();
            $this->collCommonRetraitPapiersPartial = true;
        }
        if (!in_array($l, $this->collCommonRetraitPapiers->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonRetraitPapier($l);
        }

        return $this;
    }

    /**
     * @param	CommonRetraitPapier $commonRetraitPapier The commonRetraitPapier object to add.
     */
    protected function doAddCommonRetraitPapier($commonRetraitPapier)
    {
        $this->collCommonRetraitPapiers[]= $commonRetraitPapier;
        $commonRetraitPapier->setCommonConsultation($this);
    }

    /**
     * @param	CommonRetraitPapier $commonRetraitPapier The commonRetraitPapier object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonRetraitPapier($commonRetraitPapier)
    {
        if ($this->getCommonRetraitPapiers()->contains($commonRetraitPapier)) {
            $this->collCommonRetraitPapiers->remove($this->collCommonRetraitPapiers->search($commonRetraitPapier));
            if (null === $this->commonRetraitPapiersScheduledForDeletion) {
                $this->commonRetraitPapiersScheduledForDeletion = clone $this->collCommonRetraitPapiers;
                $this->commonRetraitPapiersScheduledForDeletion->clear();
            }
            $this->commonRetraitPapiersScheduledForDeletion[]= clone $commonRetraitPapier;
            $commonRetraitPapier->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonSupportPublications collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonSupportPublications()
     */
    public function clearCommonSupportPublications()
    {
        $this->collCommonSupportPublications = null; // important to set this to null since that means it is uninitialized
        $this->collCommonSupportPublicationsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonSupportPublications collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonSupportPublications($v = true)
    {
        $this->collCommonSupportPublicationsPartial = $v;
    }

    /**
     * Initializes the collCommonSupportPublications collection.
     *
     * By default this just sets the collCommonSupportPublications collection to an empty array (like clearcollCommonSupportPublications());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonSupportPublications($overrideExisting = true)
    {
        if (null !== $this->collCommonSupportPublications && !$overrideExisting) {
            return;
        }
        $this->collCommonSupportPublications = new PropelObjectCollection();
        $this->collCommonSupportPublications->setModel('CommonSupportPublication');
    }

    /**
     * Gets an array of CommonSupportPublication objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonSupportPublication[] List of CommonSupportPublication objects
     * @throws PropelException
     */
    public function getCommonSupportPublications($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonSupportPublicationsPartial && !$this->isNew();
        if (null === $this->collCommonSupportPublications || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonSupportPublications) {
                // return empty collection
                $this->initCommonSupportPublications();
            } else {
                $collCommonSupportPublications = CommonSupportPublicationQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonSupportPublicationsPartial && count($collCommonSupportPublications)) {
                      $this->initCommonSupportPublications(false);

                      foreach ($collCommonSupportPublications as $obj) {
                        if (false == $this->collCommonSupportPublications->contains($obj)) {
                          $this->collCommonSupportPublications->append($obj);
                        }
                      }

                      $this->collCommonSupportPublicationsPartial = true;
                    }

                    $collCommonSupportPublications->getInternalIterator()->rewind();

                    return $collCommonSupportPublications;
                }

                if ($partial && $this->collCommonSupportPublications) {
                    foreach ($this->collCommonSupportPublications as $obj) {
                        if ($obj->isNew()) {
                            $collCommonSupportPublications[] = $obj;
                        }
                    }
                }

                $this->collCommonSupportPublications = $collCommonSupportPublications;
                $this->collCommonSupportPublicationsPartial = false;
            }
        }

        return $this->collCommonSupportPublications;
    }

    /**
     * Sets a collection of CommonSupportPublication objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonSupportPublications A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonSupportPublications(PropelCollection $commonSupportPublications, PropelPDO $con = null)
    {
        $commonSupportPublicationsToDelete = $this->getCommonSupportPublications(new Criteria(), $con)->diff($commonSupportPublications);


        $this->commonSupportPublicationsScheduledForDeletion = $commonSupportPublicationsToDelete;

        foreach ($commonSupportPublicationsToDelete as $commonSupportPublicationRemoved) {
            $commonSupportPublicationRemoved->setCommonConsultation(null);
        }

        $this->collCommonSupportPublications = null;
        foreach ($commonSupportPublications as $commonSupportPublication) {
            $this->addCommonSupportPublication($commonSupportPublication);
        }

        $this->collCommonSupportPublications = $commonSupportPublications;
        $this->collCommonSupportPublicationsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonSupportPublication objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonSupportPublication objects.
     * @throws PropelException
     */
    public function countCommonSupportPublications(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonSupportPublicationsPartial && !$this->isNew();
        if (null === $this->collCommonSupportPublications || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonSupportPublications) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonSupportPublications());
            }
            $query = CommonSupportPublicationQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonSupportPublications);
    }

    /**
     * Method called to associate a CommonSupportPublication object to this object
     * through the CommonSupportPublication foreign key attribute.
     *
     * @param   CommonSupportPublication $l CommonSupportPublication
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonSupportPublication(CommonSupportPublication $l)
    {
        if ($this->collCommonSupportPublications === null) {
            $this->initCommonSupportPublications();
            $this->collCommonSupportPublicationsPartial = true;
        }
        if (!in_array($l, $this->collCommonSupportPublications->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonSupportPublication($l);
        }

        return $this;
    }

    /**
     * @param	CommonSupportPublication $commonSupportPublication The commonSupportPublication object to add.
     */
    protected function doAddCommonSupportPublication($commonSupportPublication)
    {
        $this->collCommonSupportPublications[]= $commonSupportPublication;
        $commonSupportPublication->setCommonConsultation($this);
    }

    /**
     * @param	CommonSupportPublication $commonSupportPublication The commonSupportPublication object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonSupportPublication($commonSupportPublication)
    {
        if ($this->getCommonSupportPublications()->contains($commonSupportPublication)) {
            $this->collCommonSupportPublications->remove($this->collCommonSupportPublications->search($commonSupportPublication));
            if (null === $this->commonSupportPublicationsScheduledForDeletion) {
                $this->commonSupportPublicationsScheduledForDeletion = clone $this->collCommonSupportPublications;
                $this->commonSupportPublicationsScheduledForDeletion->clear();
            }
            $this->commonSupportPublicationsScheduledForDeletion[]= clone $commonSupportPublication;
            $commonSupportPublication->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonTelechargements collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonTelechargements()
     */
    public function clearCommonTelechargements()
    {
        $this->collCommonTelechargements = null; // important to set this to null since that means it is uninitialized
        $this->collCommonTelechargementsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonTelechargements collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonTelechargements($v = true)
    {
        $this->collCommonTelechargementsPartial = $v;
    }

    /**
     * Initializes the collCommonTelechargements collection.
     *
     * By default this just sets the collCommonTelechargements collection to an empty array (like clearcollCommonTelechargements());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonTelechargements($overrideExisting = true)
    {
        if (null !== $this->collCommonTelechargements && !$overrideExisting) {
            return;
        }
        $this->collCommonTelechargements = new PropelObjectCollection();
        $this->collCommonTelechargements->setModel('CommonTelechargement');
    }

    /**
     * Gets an array of CommonTelechargement objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonTelechargement[] List of CommonTelechargement objects
     * @throws PropelException
     */
    public function getCommonTelechargements($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonTelechargementsPartial && !$this->isNew();
        if (null === $this->collCommonTelechargements || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonTelechargements) {
                // return empty collection
                $this->initCommonTelechargements();
            } else {
                $collCommonTelechargements = CommonTelechargementQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonTelechargementsPartial && count($collCommonTelechargements)) {
                      $this->initCommonTelechargements(false);

                      foreach ($collCommonTelechargements as $obj) {
                        if (false == $this->collCommonTelechargements->contains($obj)) {
                          $this->collCommonTelechargements->append($obj);
                        }
                      }

                      $this->collCommonTelechargementsPartial = true;
                    }

                    $collCommonTelechargements->getInternalIterator()->rewind();

                    return $collCommonTelechargements;
                }

                if ($partial && $this->collCommonTelechargements) {
                    foreach ($this->collCommonTelechargements as $obj) {
                        if ($obj->isNew()) {
                            $collCommonTelechargements[] = $obj;
                        }
                    }
                }

                $this->collCommonTelechargements = $collCommonTelechargements;
                $this->collCommonTelechargementsPartial = false;
            }
        }

        return $this->collCommonTelechargements;
    }

    /**
     * Sets a collection of CommonTelechargement objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonTelechargements A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonTelechargements(PropelCollection $commonTelechargements, PropelPDO $con = null)
    {
        $commonTelechargementsToDelete = $this->getCommonTelechargements(new Criteria(), $con)->diff($commonTelechargements);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonTelechargementsScheduledForDeletion = clone $commonTelechargementsToDelete;

        foreach ($commonTelechargementsToDelete as $commonTelechargementRemoved) {
            $commonTelechargementRemoved->setCommonConsultation(null);
        }

        $this->collCommonTelechargements = null;
        foreach ($commonTelechargements as $commonTelechargement) {
            $this->addCommonTelechargement($commonTelechargement);
        }

        $this->collCommonTelechargements = $commonTelechargements;
        $this->collCommonTelechargementsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonTelechargement objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonTelechargement objects.
     * @throws PropelException
     */
    public function countCommonTelechargements(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonTelechargementsPartial && !$this->isNew();
        if (null === $this->collCommonTelechargements || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonTelechargements) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonTelechargements());
            }
            $query = CommonTelechargementQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonTelechargements);
    }

    /**
     * Method called to associate a CommonTelechargement object to this object
     * through the CommonTelechargement foreign key attribute.
     *
     * @param   CommonTelechargement $l CommonTelechargement
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonTelechargement(CommonTelechargement $l)
    {
        if ($this->collCommonTelechargements === null) {
            $this->initCommonTelechargements();
            $this->collCommonTelechargementsPartial = true;
        }
        if (!in_array($l, $this->collCommonTelechargements->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonTelechargement($l);
        }

        return $this;
    }

    /**
     * @param	CommonTelechargement $commonTelechargement The commonTelechargement object to add.
     */
    protected function doAddCommonTelechargement($commonTelechargement)
    {
        $this->collCommonTelechargements[]= $commonTelechargement;
        $commonTelechargement->setCommonConsultation($this);
    }

    /**
     * @param	CommonTelechargement $commonTelechargement The commonTelechargement object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonTelechargement($commonTelechargement)
    {
        if ($this->getCommonTelechargements()->contains($commonTelechargement)) {
            $this->collCommonTelechargements->remove($this->collCommonTelechargements->search($commonTelechargement));
            if (null === $this->commonTelechargementsScheduledForDeletion) {
                $this->commonTelechargementsScheduledForDeletion = clone $this->collCommonTelechargements;
                $this->commonTelechargementsScheduledForDeletion->clear();
            }
            $this->commonTelechargementsScheduledForDeletion[]= clone $commonTelechargement;
            $commonTelechargement->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonTelechargementAnonymesRelatedByOrganismeConsultationRef()
     */
    public function clearCommonTelechargementAnonymesRelatedByOrganismeConsultationRef()
    {
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = null; // important to set this to null since that means it is uninitialized
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonTelechargementAnonymesRelatedByOrganismeConsultationRef($v = true)
    {
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial = $v;
    }

    /**
     * Initializes the collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef collection.
     *
     * By default this just sets the collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef collection to an empty array (like clearcollCommonTelechargementAnonymesRelatedByOrganismeConsultationRef());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonTelechargementAnonymesRelatedByOrganismeConsultationRef($overrideExisting = true)
    {
        if (null !== $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef && !$overrideExisting) {
            return;
        }
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = new PropelObjectCollection();
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->setModel('CommonTelechargementAnonyme');
    }

    /**
     * Gets an array of CommonTelechargementAnonyme objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonTelechargementAnonyme[] List of CommonTelechargementAnonyme objects
     * @throws PropelException
     */
    public function getCommonTelechargementAnonymesRelatedByOrganismeConsultationRef($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef) {
                // return empty collection
                $this->initCommonTelechargementAnonymesRelatedByOrganismeConsultationRef();
            } else {
                $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = CommonTelechargementAnonymeQuery::create(null, $criteria)
                    ->filterByCommonConsultationRelatedByOrganismeConsultationRef($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial && count($collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef)) {
                      $this->initCommonTelechargementAnonymesRelatedByOrganismeConsultationRef(false);

                      foreach ($collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef as $obj) {
                        if (false == $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->contains($obj)) {
                          $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->append($obj);
                        }
                      }

                      $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial = true;
                    }

                    $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->getInternalIterator()->rewind();

                    return $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef;
                }

                if ($partial && $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef) {
                    foreach ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef as $obj) {
                        if ($obj->isNew()) {
                            $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef[] = $obj;
                        }
                    }
                }

                $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = $collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef;
                $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial = false;
            }
        }

        return $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef;
    }

    /**
     * Sets a collection of CommonTelechargementAnonymeRelatedByOrganismeConsultationRef objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonTelechargementAnonymesRelatedByOrganismeConsultationRef A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonTelechargementAnonymesRelatedByOrganismeConsultationRef(PropelCollection $commonTelechargementAnonymesRelatedByOrganismeConsultationRef, PropelPDO $con = null)
    {
        $commonTelechargementAnonymesRelatedByOrganismeConsultationRefToDelete = $this->getCommonTelechargementAnonymesRelatedByOrganismeConsultationRef(new Criteria(), $con)->diff($commonTelechargementAnonymesRelatedByOrganismeConsultationRef);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion = clone $commonTelechargementAnonymesRelatedByOrganismeConsultationRefToDelete;

        foreach ($commonTelechargementAnonymesRelatedByOrganismeConsultationRefToDelete as $commonTelechargementAnonymeRelatedByOrganismeConsultationRefRemoved) {
            $commonTelechargementAnonymeRelatedByOrganismeConsultationRefRemoved->setCommonConsultationRelatedByOrganismeConsultationRef(null);
        }

        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = null;
        foreach ($commonTelechargementAnonymesRelatedByOrganismeConsultationRef as $commonTelechargementAnonymeRelatedByOrganismeConsultationRef) {
            $this->addCommonTelechargementAnonymeRelatedByOrganismeConsultationRef($commonTelechargementAnonymeRelatedByOrganismeConsultationRef);
        }

        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = $commonTelechargementAnonymesRelatedByOrganismeConsultationRef;
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonTelechargementAnonyme objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonTelechargementAnonyme objects.
     * @throws PropelException
     */
    public function countCommonTelechargementAnonymesRelatedByOrganismeConsultationRef(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonTelechargementAnonymesRelatedByOrganismeConsultationRef());
            }
            $query = CommonTelechargementAnonymeQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultationRelatedByOrganismeConsultationRef($this)
                ->count($con);
        }

        return count($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef);
    }

    /**
     * Method called to associate a CommonTelechargementAnonyme object to this object
     * through the CommonTelechargementAnonyme foreign key attribute.
     *
     * @param   CommonTelechargementAnonyme $l CommonTelechargementAnonyme
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonTelechargementAnonymeRelatedByOrganismeConsultationRef(CommonTelechargementAnonyme $l)
    {
        if ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef === null) {
            $this->initCommonTelechargementAnonymesRelatedByOrganismeConsultationRef();
            $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRefPartial = true;
        }
        if (!in_array($l, $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonTelechargementAnonymeRelatedByOrganismeConsultationRef($l);
        }

        return $this;
    }

    /**
     * @param	CommonTelechargementAnonymeRelatedByOrganismeConsultationRef $commonTelechargementAnonymeRelatedByOrganismeConsultationRef The commonTelechargementAnonymeRelatedByOrganismeConsultationRef object to add.
     */
    protected function doAddCommonTelechargementAnonymeRelatedByOrganismeConsultationRef($commonTelechargementAnonymeRelatedByOrganismeConsultationRef)
    {
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef[]= $commonTelechargementAnonymeRelatedByOrganismeConsultationRef;
        $commonTelechargementAnonymeRelatedByOrganismeConsultationRef->setCommonConsultationRelatedByOrganismeConsultationRef($this);
    }

    /**
     * @param	CommonTelechargementAnonymeRelatedByOrganismeConsultationRef $commonTelechargementAnonymeRelatedByOrganismeConsultationRef The commonTelechargementAnonymeRelatedByOrganismeConsultationRef object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonTelechargementAnonymeRelatedByOrganismeConsultationRef($commonTelechargementAnonymeRelatedByOrganismeConsultationRef)
    {
        if ($this->getCommonTelechargementAnonymesRelatedByOrganismeConsultationRef()->contains($commonTelechargementAnonymeRelatedByOrganismeConsultationRef)) {
            $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->remove($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->search($commonTelechargementAnonymeRelatedByOrganismeConsultationRef));
            if (null === $this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion) {
                $this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion = clone $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef;
                $this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion->clear();
            }
            $this->commonTelechargementAnonymesRelatedByOrganismeConsultationRefScheduledForDeletion[]= clone $commonTelechargementAnonymeRelatedByOrganismeConsultationRef;
            $commonTelechargementAnonymeRelatedByOrganismeConsultationRef->setCommonConsultationRelatedByOrganismeConsultationRef(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonTelechargementAnonymesRelatedByConsultationRef collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonTelechargementAnonymesRelatedByConsultationRef()
     */
    public function clearCommonTelechargementAnonymesRelatedByConsultationRef()
    {
        $this->collCommonTelechargementAnonymesRelatedByConsultationRef = null; // important to set this to null since that means it is uninitialized
        $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonTelechargementAnonymesRelatedByConsultationRef collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonTelechargementAnonymesRelatedByConsultationRef($v = true)
    {
        $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial = $v;
    }

    /**
     * Initializes the collCommonTelechargementAnonymesRelatedByConsultationRef collection.
     *
     * By default this just sets the collCommonTelechargementAnonymesRelatedByConsultationRef collection to an empty array (like clearcollCommonTelechargementAnonymesRelatedByConsultationRef());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonTelechargementAnonymesRelatedByConsultationRef($overrideExisting = true)
    {
        if (null !== $this->collCommonTelechargementAnonymesRelatedByConsultationRef && !$overrideExisting) {
            return;
        }
        $this->collCommonTelechargementAnonymesRelatedByConsultationRef = new PropelObjectCollection();
        $this->collCommonTelechargementAnonymesRelatedByConsultationRef->setModel('CommonTelechargementAnonyme');
    }

    /**
     * Gets an array of CommonTelechargementAnonyme objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonTelechargementAnonyme[] List of CommonTelechargementAnonyme objects
     * @throws PropelException
     */
    public function getCommonTelechargementAnonymesRelatedByConsultationRef($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonTelechargementAnonymesRelatedByConsultationRef || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonTelechargementAnonymesRelatedByConsultationRef) {
                // return empty collection
                $this->initCommonTelechargementAnonymesRelatedByConsultationRef();
            } else {
                $collCommonTelechargementAnonymesRelatedByConsultationRef = CommonTelechargementAnonymeQuery::create(null, $criteria)
                    ->filterByCommonConsultationRelatedByConsultationRef($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial && count($collCommonTelechargementAnonymesRelatedByConsultationRef)) {
                      $this->initCommonTelechargementAnonymesRelatedByConsultationRef(false);

                      foreach ($collCommonTelechargementAnonymesRelatedByConsultationRef as $obj) {
                        if (false == $this->collCommonTelechargementAnonymesRelatedByConsultationRef->contains($obj)) {
                          $this->collCommonTelechargementAnonymesRelatedByConsultationRef->append($obj);
                        }
                      }

                      $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial = true;
                    }

                    $collCommonTelechargementAnonymesRelatedByConsultationRef->getInternalIterator()->rewind();

                    return $collCommonTelechargementAnonymesRelatedByConsultationRef;
                }

                if ($partial && $this->collCommonTelechargementAnonymesRelatedByConsultationRef) {
                    foreach ($this->collCommonTelechargementAnonymesRelatedByConsultationRef as $obj) {
                        if ($obj->isNew()) {
                            $collCommonTelechargementAnonymesRelatedByConsultationRef[] = $obj;
                        }
                    }
                }

                $this->collCommonTelechargementAnonymesRelatedByConsultationRef = $collCommonTelechargementAnonymesRelatedByConsultationRef;
                $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial = false;
            }
        }

        return $this->collCommonTelechargementAnonymesRelatedByConsultationRef;
    }

    /**
     * Sets a collection of CommonTelechargementAnonymeRelatedByConsultationRef objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonTelechargementAnonymesRelatedByConsultationRef A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonTelechargementAnonymesRelatedByConsultationRef(PropelCollection $commonTelechargementAnonymesRelatedByConsultationRef, PropelPDO $con = null)
    {
        $commonTelechargementAnonymesRelatedByConsultationRefToDelete = $this->getCommonTelechargementAnonymesRelatedByConsultationRef(new Criteria(), $con)->diff($commonTelechargementAnonymesRelatedByConsultationRef);


        $this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion = $commonTelechargementAnonymesRelatedByConsultationRefToDelete;

        foreach ($commonTelechargementAnonymesRelatedByConsultationRefToDelete as $commonTelechargementAnonymeRelatedByConsultationRefRemoved) {
            $commonTelechargementAnonymeRelatedByConsultationRefRemoved->setCommonConsultationRelatedByConsultationRef(null);
        }

        $this->collCommonTelechargementAnonymesRelatedByConsultationRef = null;
        foreach ($commonTelechargementAnonymesRelatedByConsultationRef as $commonTelechargementAnonymeRelatedByConsultationRef) {
            $this->addCommonTelechargementAnonymeRelatedByConsultationRef($commonTelechargementAnonymeRelatedByConsultationRef);
        }

        $this->collCommonTelechargementAnonymesRelatedByConsultationRef = $commonTelechargementAnonymesRelatedByConsultationRef;
        $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonTelechargementAnonyme objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonTelechargementAnonyme objects.
     * @throws PropelException
     */
    public function countCommonTelechargementAnonymesRelatedByConsultationRef(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial && !$this->isNew();
        if (null === $this->collCommonTelechargementAnonymesRelatedByConsultationRef || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonTelechargementAnonymesRelatedByConsultationRef) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonTelechargementAnonymesRelatedByConsultationRef());
            }
            $query = CommonTelechargementAnonymeQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultationRelatedByConsultationRef($this)
                ->count($con);
        }

        return count($this->collCommonTelechargementAnonymesRelatedByConsultationRef);
    }

    /**
     * Method called to associate a CommonTelechargementAnonyme object to this object
     * through the CommonTelechargementAnonyme foreign key attribute.
     *
     * @param   CommonTelechargementAnonyme $l CommonTelechargementAnonyme
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonTelechargementAnonymeRelatedByConsultationRef(CommonTelechargementAnonyme $l)
    {
        if ($this->collCommonTelechargementAnonymesRelatedByConsultationRef === null) {
            $this->initCommonTelechargementAnonymesRelatedByConsultationRef();
            $this->collCommonTelechargementAnonymesRelatedByConsultationRefPartial = true;
        }
        if (!in_array($l, $this->collCommonTelechargementAnonymesRelatedByConsultationRef->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonTelechargementAnonymeRelatedByConsultationRef($l);
        }

        return $this;
    }

    /**
     * @param	CommonTelechargementAnonymeRelatedByConsultationRef $commonTelechargementAnonymeRelatedByConsultationRef The commonTelechargementAnonymeRelatedByConsultationRef object to add.
     */
    protected function doAddCommonTelechargementAnonymeRelatedByConsultationRef($commonTelechargementAnonymeRelatedByConsultationRef)
    {
        $this->collCommonTelechargementAnonymesRelatedByConsultationRef[]= $commonTelechargementAnonymeRelatedByConsultationRef;
        $commonTelechargementAnonymeRelatedByConsultationRef->setCommonConsultationRelatedByConsultationRef($this);
    }

    /**
     * @param	CommonTelechargementAnonymeRelatedByConsultationRef $commonTelechargementAnonymeRelatedByConsultationRef The commonTelechargementAnonymeRelatedByConsultationRef object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonTelechargementAnonymeRelatedByConsultationRef($commonTelechargementAnonymeRelatedByConsultationRef)
    {
        if ($this->getCommonTelechargementAnonymesRelatedByConsultationRef()->contains($commonTelechargementAnonymeRelatedByConsultationRef)) {
            $this->collCommonTelechargementAnonymesRelatedByConsultationRef->remove($this->collCommonTelechargementAnonymesRelatedByConsultationRef->search($commonTelechargementAnonymeRelatedByConsultationRef));
            if (null === $this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion) {
                $this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion = clone $this->collCommonTelechargementAnonymesRelatedByConsultationRef;
                $this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion->clear();
            }
            $this->commonTelechargementAnonymesRelatedByConsultationRefScheduledForDeletion[]= clone $commonTelechargementAnonymeRelatedByConsultationRef;
            $commonTelechargementAnonymeRelatedByConsultationRef->setCommonConsultationRelatedByConsultationRef(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonConsultationDocumentCfes collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonConsultationDocumentCfes()
     */
    public function clearCommonConsultationDocumentCfes()
    {
        $this->collCommonConsultationDocumentCfes = null; // important to set this to null since that means it is uninitialized
        $this->collCommonConsultationDocumentCfesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonConsultationDocumentCfes collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonConsultationDocumentCfes($v = true)
    {
        $this->collCommonConsultationDocumentCfesPartial = $v;
    }

    /**
     * Initializes the collCommonConsultationDocumentCfes collection.
     *
     * By default this just sets the collCommonConsultationDocumentCfes collection to an empty array (like clearcollCommonConsultationDocumentCfes());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonConsultationDocumentCfes($overrideExisting = true)
    {
        if (null !== $this->collCommonConsultationDocumentCfes && !$overrideExisting) {
            return;
        }
        $this->collCommonConsultationDocumentCfes = new PropelObjectCollection();
        $this->collCommonConsultationDocumentCfes->setModel('CommonConsultationDocumentCfe');
    }

    /**
     * Gets an array of CommonConsultationDocumentCfe objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonConsultationDocumentCfe[] List of CommonConsultationDocumentCfe objects
     * @throws PropelException
     */
    public function getCommonConsultationDocumentCfes($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonConsultationDocumentCfesPartial && !$this->isNew();
        if (null === $this->collCommonConsultationDocumentCfes || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonConsultationDocumentCfes) {
                // return empty collection
                $this->initCommonConsultationDocumentCfes();
            } else {
                $collCommonConsultationDocumentCfes = CommonConsultationDocumentCfeQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonConsultationDocumentCfesPartial && count($collCommonConsultationDocumentCfes)) {
                      $this->initCommonConsultationDocumentCfes(false);

                      foreach ($collCommonConsultationDocumentCfes as $obj) {
                        if (false == $this->collCommonConsultationDocumentCfes->contains($obj)) {
                          $this->collCommonConsultationDocumentCfes->append($obj);
                        }
                      }

                      $this->collCommonConsultationDocumentCfesPartial = true;
                    }

                    $collCommonConsultationDocumentCfes->getInternalIterator()->rewind();

                    return $collCommonConsultationDocumentCfes;
                }

                if ($partial && $this->collCommonConsultationDocumentCfes) {
                    foreach ($this->collCommonConsultationDocumentCfes as $obj) {
                        if ($obj->isNew()) {
                            $collCommonConsultationDocumentCfes[] = $obj;
                        }
                    }
                }

                $this->collCommonConsultationDocumentCfes = $collCommonConsultationDocumentCfes;
                $this->collCommonConsultationDocumentCfesPartial = false;
            }
        }

        return $this->collCommonConsultationDocumentCfes;
    }

    /**
     * Sets a collection of CommonConsultationDocumentCfe objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonConsultationDocumentCfes A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonConsultationDocumentCfes(PropelCollection $commonConsultationDocumentCfes, PropelPDO $con = null)
    {
        $commonConsultationDocumentCfesToDelete = $this->getCommonConsultationDocumentCfes(new Criteria(), $con)->diff($commonConsultationDocumentCfes);


        $this->commonConsultationDocumentCfesScheduledForDeletion = $commonConsultationDocumentCfesToDelete;

        foreach ($commonConsultationDocumentCfesToDelete as $commonConsultationDocumentCfeRemoved) {
            $commonConsultationDocumentCfeRemoved->setCommonConsultation(null);
        }

        $this->collCommonConsultationDocumentCfes = null;
        foreach ($commonConsultationDocumentCfes as $commonConsultationDocumentCfe) {
            $this->addCommonConsultationDocumentCfe($commonConsultationDocumentCfe);
        }

        $this->collCommonConsultationDocumentCfes = $commonConsultationDocumentCfes;
        $this->collCommonConsultationDocumentCfesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonConsultationDocumentCfe objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonConsultationDocumentCfe objects.
     * @throws PropelException
     */
    public function countCommonConsultationDocumentCfes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonConsultationDocumentCfesPartial && !$this->isNew();
        if (null === $this->collCommonConsultationDocumentCfes || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonConsultationDocumentCfes) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonConsultationDocumentCfes());
            }
            $query = CommonConsultationDocumentCfeQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonConsultationDocumentCfes);
    }

    /**
     * Method called to associate a CommonConsultationDocumentCfe object to this object
     * through the CommonConsultationDocumentCfe foreign key attribute.
     *
     * @param   CommonConsultationDocumentCfe $l CommonConsultationDocumentCfe
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonConsultationDocumentCfe(CommonConsultationDocumentCfe $l)
    {
        if ($this->collCommonConsultationDocumentCfes === null) {
            $this->initCommonConsultationDocumentCfes();
            $this->collCommonConsultationDocumentCfesPartial = true;
        }
        if (!in_array($l, $this->collCommonConsultationDocumentCfes->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonConsultationDocumentCfe($l);
        }

        return $this;
    }

    /**
     * @param	CommonConsultationDocumentCfe $commonConsultationDocumentCfe The commonConsultationDocumentCfe object to add.
     */
    protected function doAddCommonConsultationDocumentCfe($commonConsultationDocumentCfe)
    {
        $this->collCommonConsultationDocumentCfes[]= $commonConsultationDocumentCfe;
        $commonConsultationDocumentCfe->setCommonConsultation($this);
    }

    /**
     * @param	CommonConsultationDocumentCfe $commonConsultationDocumentCfe The commonConsultationDocumentCfe object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonConsultationDocumentCfe($commonConsultationDocumentCfe)
    {
        if ($this->getCommonConsultationDocumentCfes()->contains($commonConsultationDocumentCfe)) {
            $this->collCommonConsultationDocumentCfes->remove($this->collCommonConsultationDocumentCfes->search($commonConsultationDocumentCfe));
            if (null === $this->commonConsultationDocumentCfesScheduledForDeletion) {
                $this->commonConsultationDocumentCfesScheduledForDeletion = clone $this->collCommonConsultationDocumentCfes;
                $this->commonConsultationDocumentCfesScheduledForDeletion->clear();
            }
            $this->commonConsultationDocumentCfesScheduledForDeletion[]= clone $commonConsultationDocumentCfe;
            $commonConsultationDocumentCfe->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonTCalendriers collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonTCalendriers()
     */
    public function clearCommonTCalendriers()
    {
        $this->collCommonTCalendriers = null; // important to set this to null since that means it is uninitialized
        $this->collCommonTCalendriersPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonTCalendriers collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonTCalendriers($v = true)
    {
        $this->collCommonTCalendriersPartial = $v;
    }

    /**
     * Initializes the collCommonTCalendriers collection.
     *
     * By default this just sets the collCommonTCalendriers collection to an empty array (like clearcollCommonTCalendriers());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonTCalendriers($overrideExisting = true)
    {
        if (null !== $this->collCommonTCalendriers && !$overrideExisting) {
            return;
        }
        $this->collCommonTCalendriers = new PropelObjectCollection();
        $this->collCommonTCalendriers->setModel('CommonTCalendrier');
    }

    /**
     * Gets an array of CommonTCalendrier objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonTCalendrier[] List of CommonTCalendrier objects
     * @throws PropelException
     */
    public function getCommonTCalendriers($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonTCalendriersPartial && !$this->isNew();
        if (null === $this->collCommonTCalendriers || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonTCalendriers) {
                // return empty collection
                $this->initCommonTCalendriers();
            } else {
                $collCommonTCalendriers = CommonTCalendrierQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonTCalendriersPartial && count($collCommonTCalendriers)) {
                      $this->initCommonTCalendriers(false);

                      foreach ($collCommonTCalendriers as $obj) {
                        if (false == $this->collCommonTCalendriers->contains($obj)) {
                          $this->collCommonTCalendriers->append($obj);
                        }
                      }

                      $this->collCommonTCalendriersPartial = true;
                    }

                    $collCommonTCalendriers->getInternalIterator()->rewind();

                    return $collCommonTCalendriers;
                }

                if ($partial && $this->collCommonTCalendriers) {
                    foreach ($this->collCommonTCalendriers as $obj) {
                        if ($obj->isNew()) {
                            $collCommonTCalendriers[] = $obj;
                        }
                    }
                }

                $this->collCommonTCalendriers = $collCommonTCalendriers;
                $this->collCommonTCalendriersPartial = false;
            }
        }

        return $this->collCommonTCalendriers;
    }

    /**
     * Sets a collection of CommonTCalendrier objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonTCalendriers A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonTCalendriers(PropelCollection $commonTCalendriers, PropelPDO $con = null)
    {
        $commonTCalendriersToDelete = $this->getCommonTCalendriers(new Criteria(), $con)->diff($commonTCalendriers);


        $this->commonTCalendriersScheduledForDeletion = $commonTCalendriersToDelete;

        foreach ($commonTCalendriersToDelete as $commonTCalendrierRemoved) {
            $commonTCalendrierRemoved->setCommonConsultation(null);
        }

        $this->collCommonTCalendriers = null;
        foreach ($commonTCalendriers as $commonTCalendrier) {
            $this->addCommonTCalendrier($commonTCalendrier);
        }

        $this->collCommonTCalendriers = $commonTCalendriers;
        $this->collCommonTCalendriersPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonTCalendrier objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonTCalendrier objects.
     * @throws PropelException
     */
    public function countCommonTCalendriers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonTCalendriersPartial && !$this->isNew();
        if (null === $this->collCommonTCalendriers || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonTCalendriers) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonTCalendriers());
            }
            $query = CommonTCalendrierQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonTCalendriers);
    }

    /**
     * Method called to associate a CommonTCalendrier object to this object
     * through the CommonTCalendrier foreign key attribute.
     *
     * @param   CommonTCalendrier $l CommonTCalendrier
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonTCalendrier(CommonTCalendrier $l)
    {
        if ($this->collCommonTCalendriers === null) {
            $this->initCommonTCalendriers();
            $this->collCommonTCalendriersPartial = true;
        }
        if (!in_array($l, $this->collCommonTCalendriers->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonTCalendrier($l);
        }

        return $this;
    }

    /**
     * @param	CommonTCalendrier $commonTCalendrier The commonTCalendrier object to add.
     */
    protected function doAddCommonTCalendrier($commonTCalendrier)
    {
        $this->collCommonTCalendriers[]= $commonTCalendrier;
        $commonTCalendrier->setCommonConsultation($this);
    }

    /**
     * @param	CommonTCalendrier $commonTCalendrier The commonTCalendrier object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonTCalendrier($commonTCalendrier)
    {
        if ($this->getCommonTCalendriers()->contains($commonTCalendrier)) {
            $this->collCommonTCalendriers->remove($this->collCommonTCalendriers->search($commonTCalendrier));
            if (null === $this->commonTCalendriersScheduledForDeletion) {
                $this->commonTCalendriersScheduledForDeletion = clone $this->collCommonTCalendriers;
                $this->commonTCalendriersScheduledForDeletion->clear();
            }
            $this->commonTCalendriersScheduledForDeletion[]= clone $commonTCalendrier;
            $commonTCalendrier->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonTParamDossierFormulaires collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonTParamDossierFormulaires()
     */
    public function clearCommonTParamDossierFormulaires()
    {
        $this->collCommonTParamDossierFormulaires = null; // important to set this to null since that means it is uninitialized
        $this->collCommonTParamDossierFormulairesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonTParamDossierFormulaires collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonTParamDossierFormulaires($v = true)
    {
        $this->collCommonTParamDossierFormulairesPartial = $v;
    }

    /**
     * Initializes the collCommonTParamDossierFormulaires collection.
     *
     * By default this just sets the collCommonTParamDossierFormulaires collection to an empty array (like clearcollCommonTParamDossierFormulaires());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonTParamDossierFormulaires($overrideExisting = true)
    {
        if (null !== $this->collCommonTParamDossierFormulaires && !$overrideExisting) {
            return;
        }
        $this->collCommonTParamDossierFormulaires = new PropelObjectCollection();
        $this->collCommonTParamDossierFormulaires->setModel('CommonTParamDossierFormulaire');
    }

    /**
     * Gets an array of CommonTParamDossierFormulaire objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonTParamDossierFormulaire[] List of CommonTParamDossierFormulaire objects
     * @throws PropelException
     */
    public function getCommonTParamDossierFormulaires($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonTParamDossierFormulairesPartial && !$this->isNew();
        if (null === $this->collCommonTParamDossierFormulaires || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonTParamDossierFormulaires) {
                // return empty collection
                $this->initCommonTParamDossierFormulaires();
            } else {
                $collCommonTParamDossierFormulaires = CommonTParamDossierFormulaireQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonTParamDossierFormulairesPartial && count($collCommonTParamDossierFormulaires)) {
                      $this->initCommonTParamDossierFormulaires(false);

                      foreach ($collCommonTParamDossierFormulaires as $obj) {
                        if (false == $this->collCommonTParamDossierFormulaires->contains($obj)) {
                          $this->collCommonTParamDossierFormulaires->append($obj);
                        }
                      }

                      $this->collCommonTParamDossierFormulairesPartial = true;
                    }

                    $collCommonTParamDossierFormulaires->getInternalIterator()->rewind();

                    return $collCommonTParamDossierFormulaires;
                }

                if ($partial && $this->collCommonTParamDossierFormulaires) {
                    foreach ($this->collCommonTParamDossierFormulaires as $obj) {
                        if ($obj->isNew()) {
                            $collCommonTParamDossierFormulaires[] = $obj;
                        }
                    }
                }

                $this->collCommonTParamDossierFormulaires = $collCommonTParamDossierFormulaires;
                $this->collCommonTParamDossierFormulairesPartial = false;
            }
        }

        return $this->collCommonTParamDossierFormulaires;
    }

    /**
     * Sets a collection of CommonTParamDossierFormulaire objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonTParamDossierFormulaires A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonTParamDossierFormulaires(PropelCollection $commonTParamDossierFormulaires, PropelPDO $con = null)
    {
        $commonTParamDossierFormulairesToDelete = $this->getCommonTParamDossierFormulaires(new Criteria(), $con)->diff($commonTParamDossierFormulaires);


        $this->commonTParamDossierFormulairesScheduledForDeletion = $commonTParamDossierFormulairesToDelete;

        foreach ($commonTParamDossierFormulairesToDelete as $commonTParamDossierFormulaireRemoved) {
            $commonTParamDossierFormulaireRemoved->setCommonConsultation(null);
        }

        $this->collCommonTParamDossierFormulaires = null;
        foreach ($commonTParamDossierFormulaires as $commonTParamDossierFormulaire) {
            $this->addCommonTParamDossierFormulaire($commonTParamDossierFormulaire);
        }

        $this->collCommonTParamDossierFormulaires = $commonTParamDossierFormulaires;
        $this->collCommonTParamDossierFormulairesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonTParamDossierFormulaire objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonTParamDossierFormulaire objects.
     * @throws PropelException
     */
    public function countCommonTParamDossierFormulaires(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonTParamDossierFormulairesPartial && !$this->isNew();
        if (null === $this->collCommonTParamDossierFormulaires || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonTParamDossierFormulaires) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonTParamDossierFormulaires());
            }
            $query = CommonTParamDossierFormulaireQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonTParamDossierFormulaires);
    }

    /**
     * Method called to associate a CommonTParamDossierFormulaire object to this object
     * through the CommonTParamDossierFormulaire foreign key attribute.
     *
     * @param   CommonTParamDossierFormulaire $l CommonTParamDossierFormulaire
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonTParamDossierFormulaire(CommonTParamDossierFormulaire $l)
    {
        if ($this->collCommonTParamDossierFormulaires === null) {
            $this->initCommonTParamDossierFormulaires();
            $this->collCommonTParamDossierFormulairesPartial = true;
        }
        if (!in_array($l, $this->collCommonTParamDossierFormulaires->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonTParamDossierFormulaire($l);
        }

        return $this;
    }

    /**
     * @param	CommonTParamDossierFormulaire $commonTParamDossierFormulaire The commonTParamDossierFormulaire object to add.
     */
    protected function doAddCommonTParamDossierFormulaire($commonTParamDossierFormulaire)
    {
        $this->collCommonTParamDossierFormulaires[]= $commonTParamDossierFormulaire;
        $commonTParamDossierFormulaire->setCommonConsultation($this);
    }

    /**
     * @param	CommonTParamDossierFormulaire $commonTParamDossierFormulaire The commonTParamDossierFormulaire object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonTParamDossierFormulaire($commonTParamDossierFormulaire)
    {
        if ($this->getCommonTParamDossierFormulaires()->contains($commonTParamDossierFormulaire)) {
            $this->collCommonTParamDossierFormulaires->remove($this->collCommonTParamDossierFormulaires->search($commonTParamDossierFormulaire));
            if (null === $this->commonTParamDossierFormulairesScheduledForDeletion) {
                $this->commonTParamDossierFormulairesScheduledForDeletion = clone $this->collCommonTParamDossierFormulaires;
                $this->commonTParamDossierFormulairesScheduledForDeletion->clear();
            }
            $this->commonTParamDossierFormulairesScheduledForDeletion[]= clone $commonTParamDossierFormulaire;
            $commonTParamDossierFormulaire->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonTReponseElecFormulaires collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonTReponseElecFormulaires()
     */
    public function clearCommonTReponseElecFormulaires()
    {
        $this->collCommonTReponseElecFormulaires = null; // important to set this to null since that means it is uninitialized
        $this->collCommonTReponseElecFormulairesPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonTReponseElecFormulaires collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonTReponseElecFormulaires($v = true)
    {
        $this->collCommonTReponseElecFormulairesPartial = $v;
    }

    /**
     * Initializes the collCommonTReponseElecFormulaires collection.
     *
     * By default this just sets the collCommonTReponseElecFormulaires collection to an empty array (like clearcollCommonTReponseElecFormulaires());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonTReponseElecFormulaires($overrideExisting = true)
    {
        if (null !== $this->collCommonTReponseElecFormulaires && !$overrideExisting) {
            return;
        }
        $this->collCommonTReponseElecFormulaires = new PropelObjectCollection();
        $this->collCommonTReponseElecFormulaires->setModel('CommonTReponseElecFormulaire');
    }

    /**
     * Gets an array of CommonTReponseElecFormulaire objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonTReponseElecFormulaire[] List of CommonTReponseElecFormulaire objects
     * @throws PropelException
     */
    public function getCommonTReponseElecFormulaires($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonTReponseElecFormulairesPartial && !$this->isNew();
        if (null === $this->collCommonTReponseElecFormulaires || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonTReponseElecFormulaires) {
                // return empty collection
                $this->initCommonTReponseElecFormulaires();
            } else {
                $collCommonTReponseElecFormulaires = CommonTReponseElecFormulaireQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonTReponseElecFormulairesPartial && count($collCommonTReponseElecFormulaires)) {
                      $this->initCommonTReponseElecFormulaires(false);

                      foreach ($collCommonTReponseElecFormulaires as $obj) {
                        if (false == $this->collCommonTReponseElecFormulaires->contains($obj)) {
                          $this->collCommonTReponseElecFormulaires->append($obj);
                        }
                      }

                      $this->collCommonTReponseElecFormulairesPartial = true;
                    }

                    $collCommonTReponseElecFormulaires->getInternalIterator()->rewind();

                    return $collCommonTReponseElecFormulaires;
                }

                if ($partial && $this->collCommonTReponseElecFormulaires) {
                    foreach ($this->collCommonTReponseElecFormulaires as $obj) {
                        if ($obj->isNew()) {
                            $collCommonTReponseElecFormulaires[] = $obj;
                        }
                    }
                }

                $this->collCommonTReponseElecFormulaires = $collCommonTReponseElecFormulaires;
                $this->collCommonTReponseElecFormulairesPartial = false;
            }
        }

        return $this->collCommonTReponseElecFormulaires;
    }

    /**
     * Sets a collection of CommonTReponseElecFormulaire objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonTReponseElecFormulaires A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonTReponseElecFormulaires(PropelCollection $commonTReponseElecFormulaires, PropelPDO $con = null)
    {
        $commonTReponseElecFormulairesToDelete = $this->getCommonTReponseElecFormulaires(new Criteria(), $con)->diff($commonTReponseElecFormulaires);


        $this->commonTReponseElecFormulairesScheduledForDeletion = $commonTReponseElecFormulairesToDelete;

        foreach ($commonTReponseElecFormulairesToDelete as $commonTReponseElecFormulaireRemoved) {
            $commonTReponseElecFormulaireRemoved->setCommonConsultation(null);
        }

        $this->collCommonTReponseElecFormulaires = null;
        foreach ($commonTReponseElecFormulaires as $commonTReponseElecFormulaire) {
            $this->addCommonTReponseElecFormulaire($commonTReponseElecFormulaire);
        }

        $this->collCommonTReponseElecFormulaires = $commonTReponseElecFormulaires;
        $this->collCommonTReponseElecFormulairesPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonTReponseElecFormulaire objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonTReponseElecFormulaire objects.
     * @throws PropelException
     */
    public function countCommonTReponseElecFormulaires(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonTReponseElecFormulairesPartial && !$this->isNew();
        if (null === $this->collCommonTReponseElecFormulaires || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonTReponseElecFormulaires) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonTReponseElecFormulaires());
            }
            $query = CommonTReponseElecFormulaireQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonTReponseElecFormulaires);
    }

    /**
     * Method called to associate a CommonTReponseElecFormulaire object to this object
     * through the CommonTReponseElecFormulaire foreign key attribute.
     *
     * @param   CommonTReponseElecFormulaire $l CommonTReponseElecFormulaire
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonTReponseElecFormulaire(CommonTReponseElecFormulaire $l)
    {
        if ($this->collCommonTReponseElecFormulaires === null) {
            $this->initCommonTReponseElecFormulaires();
            $this->collCommonTReponseElecFormulairesPartial = true;
        }
        if (!in_array($l, $this->collCommonTReponseElecFormulaires->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonTReponseElecFormulaire($l);
        }

        return $this;
    }

    /**
     * @param	CommonTReponseElecFormulaire $commonTReponseElecFormulaire The commonTReponseElecFormulaire object to add.
     */
    protected function doAddCommonTReponseElecFormulaire($commonTReponseElecFormulaire)
    {
        $this->collCommonTReponseElecFormulaires[]= $commonTReponseElecFormulaire;
        $commonTReponseElecFormulaire->setCommonConsultation($this);
    }

    /**
     * @param	CommonTReponseElecFormulaire $commonTReponseElecFormulaire The commonTReponseElecFormulaire object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonTReponseElecFormulaire($commonTReponseElecFormulaire)
    {
        if ($this->getCommonTReponseElecFormulaires()->contains($commonTReponseElecFormulaire)) {
            $this->collCommonTReponseElecFormulaires->remove($this->collCommonTReponseElecFormulaires->search($commonTReponseElecFormulaire));
            if (null === $this->commonTReponseElecFormulairesScheduledForDeletion) {
                $this->commonTReponseElecFormulairesScheduledForDeletion = clone $this->collCommonTReponseElecFormulaires;
                $this->commonTReponseElecFormulairesScheduledForDeletion->clear();
            }
            $this->commonTReponseElecFormulairesScheduledForDeletion[]= clone $commonTReponseElecFormulaire;
            $commonTReponseElecFormulaire->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears out the collCommonVisiteLieuxs collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return CommonConsultation The current object (for fluent API support)
     * @see        addCommonVisiteLieuxs()
     */
    public function clearCommonVisiteLieuxs()
    {
        $this->collCommonVisiteLieuxs = null; // important to set this to null since that means it is uninitialized
        $this->collCommonVisiteLieuxsPartial = null;

        return $this;
    }

    /**
     * reset is the collCommonVisiteLieuxs collection loaded partially
     *
     * @return void
     */
    public function resetPartialCommonVisiteLieuxs($v = true)
    {
        $this->collCommonVisiteLieuxsPartial = $v;
    }

    /**
     * Initializes the collCommonVisiteLieuxs collection.
     *
     * By default this just sets the collCommonVisiteLieuxs collection to an empty array (like clearcollCommonVisiteLieuxs());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initCommonVisiteLieuxs($overrideExisting = true)
    {
        if (null !== $this->collCommonVisiteLieuxs && !$overrideExisting) {
            return;
        }
        $this->collCommonVisiteLieuxs = new PropelObjectCollection();
        $this->collCommonVisiteLieuxs->setModel('CommonVisiteLieux');
    }

    /**
     * Gets an array of CommonVisiteLieux objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this CommonConsultation is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|CommonVisiteLieux[] List of CommonVisiteLieux objects
     * @throws PropelException
     */
    public function getCommonVisiteLieuxs($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collCommonVisiteLieuxsPartial && !$this->isNew();
        if (null === $this->collCommonVisiteLieuxs || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collCommonVisiteLieuxs) {
                // return empty collection
                $this->initCommonVisiteLieuxs();
            } else {
                $collCommonVisiteLieuxs = CommonVisiteLieuxQuery::create(null, $criteria)
                    ->filterByCommonConsultation($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collCommonVisiteLieuxsPartial && count($collCommonVisiteLieuxs)) {
                      $this->initCommonVisiteLieuxs(false);

                      foreach ($collCommonVisiteLieuxs as $obj) {
                        if (false == $this->collCommonVisiteLieuxs->contains($obj)) {
                          $this->collCommonVisiteLieuxs->append($obj);
                        }
                      }

                      $this->collCommonVisiteLieuxsPartial = true;
                    }

                    $collCommonVisiteLieuxs->getInternalIterator()->rewind();

                    return $collCommonVisiteLieuxs;
                }

                if ($partial && $this->collCommonVisiteLieuxs) {
                    foreach ($this->collCommonVisiteLieuxs as $obj) {
                        if ($obj->isNew()) {
                            $collCommonVisiteLieuxs[] = $obj;
                        }
                    }
                }

                $this->collCommonVisiteLieuxs = $collCommonVisiteLieuxs;
                $this->collCommonVisiteLieuxsPartial = false;
            }
        }

        return $this->collCommonVisiteLieuxs;
    }

    /**
     * Sets a collection of CommonVisiteLieux objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $commonVisiteLieuxs A Propel collection.
     * @param PropelPDO $con Optional connection object
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function setCommonVisiteLieuxs(PropelCollection $commonVisiteLieuxs, PropelPDO $con = null)
    {
        $commonVisiteLieuxsToDelete = $this->getCommonVisiteLieuxs(new Criteria(), $con)->diff($commonVisiteLieuxs);


        //since at least one column in the foreign key is at the same time a PK
        //we can not just set a PK to NULL in the lines below. We have to store
        //a backup of all values, so we are able to manipulate these items based on the onDelete value later.
        $this->commonVisiteLieuxsScheduledForDeletion = clone $commonVisiteLieuxsToDelete;

        foreach ($commonVisiteLieuxsToDelete as $commonVisiteLieuxRemoved) {
            $commonVisiteLieuxRemoved->setCommonConsultation(null);
        }

        $this->collCommonVisiteLieuxs = null;
        foreach ($commonVisiteLieuxs as $commonVisiteLieux) {
            $this->addCommonVisiteLieux($commonVisiteLieux);
        }

        $this->collCommonVisiteLieuxs = $commonVisiteLieuxs;
        $this->collCommonVisiteLieuxsPartial = false;

        return $this;
    }

    /**
     * Returns the number of related CommonVisiteLieux objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related CommonVisiteLieux objects.
     * @throws PropelException
     */
    public function countCommonVisiteLieuxs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collCommonVisiteLieuxsPartial && !$this->isNew();
        if (null === $this->collCommonVisiteLieuxs || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collCommonVisiteLieuxs) {
                return 0;
            }

            if ($partial && !$criteria) {
                return count($this->getCommonVisiteLieuxs());
            }
            $query = CommonVisiteLieuxQuery::create(null, $criteria);
            if ($distinct) {
                $query->distinct();
            }

            return $query
                ->filterByCommonConsultation($this)
                ->count($con);
        }

        return count($this->collCommonVisiteLieuxs);
    }

    /**
     * Method called to associate a CommonVisiteLieux object to this object
     * through the CommonVisiteLieux foreign key attribute.
     *
     * @param   CommonVisiteLieux $l CommonVisiteLieux
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function addCommonVisiteLieux(CommonVisiteLieux $l)
    {
        if ($this->collCommonVisiteLieuxs === null) {
            $this->initCommonVisiteLieuxs();
            $this->collCommonVisiteLieuxsPartial = true;
        }
        if (!in_array($l, $this->collCommonVisiteLieuxs->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddCommonVisiteLieux($l);
        }

        return $this;
    }

    /**
     * @param	CommonVisiteLieux $commonVisiteLieux The commonVisiteLieux object to add.
     */
    protected function doAddCommonVisiteLieux($commonVisiteLieux)
    {
        $this->collCommonVisiteLieuxs[]= $commonVisiteLieux;
        $commonVisiteLieux->setCommonConsultation($this);
    }

    /**
     * @param	CommonVisiteLieux $commonVisiteLieux The commonVisiteLieux object to remove.
     * @return CommonConsultation The current object (for fluent API support)
     */
    public function removeCommonVisiteLieux($commonVisiteLieux)
    {
        if ($this->getCommonVisiteLieuxs()->contains($commonVisiteLieux)) {
            $this->collCommonVisiteLieuxs->remove($this->collCommonVisiteLieuxs->search($commonVisiteLieux));
            if (null === $this->commonVisiteLieuxsScheduledForDeletion) {
                $this->commonVisiteLieuxsScheduledForDeletion = clone $this->collCommonVisiteLieuxs;
                $this->commonVisiteLieuxsScheduledForDeletion->clear();
            }
            $this->commonVisiteLieuxsScheduledForDeletion[]= clone $commonVisiteLieux;
            $commonVisiteLieux->setCommonConsultation(null);
        }

        return $this;
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->reference = null;
        $this->organisme = null;
        $this->reference_utilisateur = null;
        $this->categorie = null;
        $this->titre = null;
        $this->resume = null;
        $this->datedebut = null;
        $this->datefin = null;
        $this->datevalidation = null;
        $this->type_procedure = null;
        $this->code_procedure = null;
        $this->reponse_electronique = null;
        $this->num_procedure = null;
        $this->id_type_procedure = null;
        $this->id_type_avis = null;
        $this->lieu_execution = null;
        $this->type_mise_en_ligne = null;
        $this->datemiseenligne = null;
        $this->is_tiers_avis = null;
        $this->url = null;
        $this->datefin_sad = null;
        $this->is_sys_acq_dyn = null;
        $this->reference_consultation_init = null;
        $this->signature_offre = null;
        $this->id_type_validation = null;
        $this->etat_approbation = null;
        $this->etat_validation = null;
        $this->champ_supp_invisible = null;
        $this->code_cpv_1 = null;
        $this->code_cpv_2 = null;
        $this->publication_europe = null;
        $this->etat_publication = null;
        $this->poursuivre_affichage = null;
        $this->nbr_telechargement_dce = null;
        $this->service_id = null;
        $this->service_associe_id = null;
        $this->detail_consultation = null;
        $this->date_fin_affichage = null;
        $this->depouillable_phase_consultation = null;
        $this->consultation_transverse = null;
        $this->consultation_achat_publique = null;
        $this->url_consultation_achat_publique = null;
        $this->partial_dce_download = null;
        $this->tirage_plan = null;
        $this->tireur_plan = null;
        $this->date_mise_en_ligne_calcule = null;
        $this->accessibilite_en = null;
        $this->accessibilite_es = null;
        $this->nbr_reponse = null;
        $this->id_type_procedure_org = null;
        $this->organisme_consultation_init = null;
        $this->tirage_descriptif = null;
        $this->date_validation_intermediaire = null;
        $this->accessibilite_fr = null;
        $this->id_tr_accessibilite = null;
        $this->accessibilite_cz = null;
        $this->accessibilite_du = null;
        $this->accessibilite_su = null;
        $this->accessibilite_ar = null;
        $this->alloti = null;
        $this->numero_phase = null;
        $this->consultation_externe = null;
        $this->url_consultation_externe = null;
        $this->org_denomination = null;
        $this->domaines_activites = null;
        $this->id_affaire = null;
        $this->adresse_retrais_dossiers = null;
        $this->caution_provisoire = null;
        $this->adresse_depot_offres = null;
        $this->lieu_ouverture_plis = null;
        $this->prix_aquisition_plans = null;
        $this->qualification = null;
        $this->agrements = null;
        $this->add_echantillion = null;
        $this->date_limite_echantillion = null;
        $this->add_reunion = null;
        $this->date_reunion = null;
        $this->variantes = null;
        $this->adresse_retrais_dossiers_ar = null;
        $this->adresse_depot_offres_ar = null;
        $this->lieu_ouverture_plis_ar = null;
        $this->pieces_dossier_admin = null;
        $this->pieces_dossier_admin_fr = null;
        $this->pieces_dossier_admin_en = null;
        $this->pieces_dossier_admin_es = null;
        $this->pieces_dossier_admin_su = null;
        $this->pieces_dossier_admin_du = null;
        $this->pieces_dossier_admin_cz = null;
        $this->pieces_dossier_admin_ar = null;
        $this->pieces_dossier_tech = null;
        $this->pieces_dossier_tech_fr = null;
        $this->pieces_dossier_tech_en = null;
        $this->pieces_dossier_tech_es = null;
        $this->pieces_dossier_tech_su = null;
        $this->pieces_dossier_tech_du = null;
        $this->pieces_dossier_tech_cz = null;
        $this->pieces_dossier_tech_ar = null;
        $this->pieces_dossier_additif = null;
        $this->pieces_dossier_additif_fr = null;
        $this->pieces_dossier_additif_en = null;
        $this->pieces_dossier_additif_es = null;
        $this->pieces_dossier_additif_su = null;
        $this->pieces_dossier_additif_du = null;
        $this->pieces_dossier_additif_cz = null;
        $this->pieces_dossier_additif_ar = null;
        $this->id_rpa = null;
        $this->detail_consultation_fr = null;
        $this->detail_consultation_en = null;
        $this->detail_consultation_es = null;
        $this->detail_consultation_su = null;
        $this->detail_consultation_du = null;
        $this->detail_consultation_cz = null;
        $this->detail_consultation_ar = null;
        $this->echantillon = null;
        $this->reunion = null;
        $this->visites_lieux = null;
        $this->variante_calcule = null;
        $this->adresse_retrais_dossiers_fr = null;
        $this->adresse_retrais_dossiers_en = null;
        $this->adresse_retrais_dossiers_es = null;
        $this->adresse_retrais_dossiers_su = null;
        $this->adresse_retrais_dossiers_du = null;
        $this->adresse_retrais_dossiers_cz = null;
        $this->adresse_depot_offres_fr = null;
        $this->adresse_depot_offres_en = null;
        $this->adresse_depot_offres_es = null;
        $this->adresse_depot_offres_su = null;
        $this->adresse_depot_offres_du = null;
        $this->adresse_depot_offres_cz = null;
        $this->lieu_ouverture_plis_fr = null;
        $this->lieu_ouverture_plis_en = null;
        $this->lieu_ouverture_plis_es = null;
        $this->lieu_ouverture_plis_su = null;
        $this->lieu_ouverture_plis_du = null;
        $this->lieu_ouverture_plis_cz = null;
        $this->add_echantillion_fr = null;
        $this->add_echantillion_en = null;
        $this->add_echantillion_es = null;
        $this->add_echantillion_su = null;
        $this->add_echantillion_du = null;
        $this->add_echantillion_cz = null;
        $this->add_echantillion_ar = null;
        $this->add_reunion_fr = null;
        $this->add_reunion_en = null;
        $this->add_reunion_es = null;
        $this->add_reunion_su = null;
        $this->add_reunion_du = null;
        $this->add_reunion_cz = null;
        $this->add_reunion_ar = null;
        $this->mode_passation = null;
        $this->consultation_annulee = null;
        $this->compte_boamp_associe = null;
        $this->accessibilite_it = null;
        $this->adresse_depot_offres_it = null;
        $this->lieu_ouverture_plis_it = null;
        $this->adresse_retrais_dossiers_it = null;
        $this->pieces_dossier_admin_it = null;
        $this->pieces_dossier_tech_it = null;
        $this->pieces_dossier_additif_it = null;
        $this->detail_consultation_it = null;
        $this->add_echantillion_it = null;
        $this->add_reunion_it = null;
        $this->codes_nuts = null;
        $this->intitule = null;
        $this->id_tr_intitule = null;
        $this->objet = null;
        $this->id_tr_objet = null;
        $this->date_decision = null;
        $this->type_acces = null;
        $this->autoriser_reponse_electronique = null;
        $this->regle_mise_en_ligne = null;
        $this->id_regle_validation = null;
        $this->intitule_fr = null;
        $this->intitule_en = null;
        $this->intitule_es = null;
        $this->intitule_su = null;
        $this->intitule_du = null;
        $this->intitule_cz = null;
        $this->intitule_ar = null;
        $this->intitule_it = null;
        $this->objet_fr = null;
        $this->objet_en = null;
        $this->objet_es = null;
        $this->objet_su = null;
        $this->objet_du = null;
        $this->objet_cz = null;
        $this->objet_ar = null;
        $this->objet_it = null;
        $this->clause_sociale = null;
        $this->clause_environnementale = null;
        $this->reponse_obligatoire = null;
        $this->autoriser_publicite = null;
        $this->type_envoi = null;
        $this->chiffrement_offre = null;
        $this->env_candidature = null;
        $this->env_offre = null;
        $this->env_anonymat = null;
        $this->id_etat_consultation = null;
        $this->reference_connecteur = null;
        $this->cons_statut = null;
        $this->id_approbateur = null;
        $this->id_valideur = null;
        $this->service_validation = null;
        $this->id_createur = null;
        $this->nom_createur = null;
        $this->prenom_createur = null;
        $this->signature_acte_engagement = null;
        $this->archivemetadescription = null;
        $this->archivemetamotsclef = null;
        $this->archiveidblobzip = null;
        $this->decision_partielle = null;
        $this->type_decision_a_renseigner = null;
        $this->type_decision_attribution_marche = null;
        $this->type_decision_declaration_sans_suite = null;
        $this->type_decision_declaration_infructueux = null;
        $this->type_decision_selection_entreprise = null;
        $this->type_decision_attribution_accord_cadre = null;
        $this->type_decision_admission_sad = null;
        $this->type_decision_autre = null;
        $this->id_archiveur = null;
        $this->prenom_nom_agent_telechargement_plis = null;
        $this->id_agent_telechargement_plis = null;
        $this->path_telechargement_plis = null;
        $this->date_telechargement_plis = null;
        $this->service_validation_intermediaire = null;
        $this->env_offre_technique = null;
        $this->ref_org_partenaire = null;
        $this->date_archivage = null;
        $this->date_decision_annulation = null;
        $this->commentaire_annulation = null;
        $this->date_mise_en_ligne_souhaitee = null;
        $this->etat_en_attente_validation = null;
        $this->dossier_additif = null;
        $this->type_marche = null;
        $this->type_prestation = null;
        $this->date_modification = null;
        $this->delai_partiel = null;
        $this->datefinlocale = null;
        $this->lieuresidence = null;
        $this->alerte = null;
        $this->doublon = null;
        $this->denomination_adapte = null;
        $this->url_consultation_avis_pub = null;
        $this->doublon_de = null;
        $this->entite_adjudicatrice = null;
        $this->code_operation = null;
        $this->clause_sociale_condition_execution = null;
        $this->clause_sociale_insertion = null;
        $this->clause_sociale_ateliers_proteges = null;
        $this->clause_env_specs_techniques = null;
        $this->clause_env_cond_execution = null;
        $this->clause_env_criteres_select = null;
        $this->id_donnee_complementaire = null;
        $this->donnee_complementaire_obligatoire = null;
        $this->mode_ouverture_reponse = null;
        $this->id_fichier_annulation = null;
        $this->idoperation = null;
        $this->marche_public_simplifie = null;
        $this->infos_blocs_atlas = null;
        $this->date_fin_unix = null;
        $this->date_achevement = null;
        $this->nombre_de_lots = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->alreadyInClearAllReferencesDeep = false;
        $this->clearAllReferences();
        $this->applyDefaultValues();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volume/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep && !$this->alreadyInClearAllReferencesDeep) {
            $this->alreadyInClearAllReferencesDeep = true;
            if ($this->collCommonAVISs) {
                foreach ($this->collCommonAVISs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonAnnonces) {
                foreach ($this->collCommonAnnonces as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef) {
                foreach ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonAnnonceBoampsRelatedByConsultationRef) {
                foreach ($this->collCommonAnnonceBoampsRelatedByConsultationRef as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonAvisPubs) {
                foreach ($this->collCommonAvisPubs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonCategorieLots) {
                foreach ($this->collCommonCategorieLots as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonComplements) {
                foreach ($this->collCommonComplements as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonConsultationHistoriqueEtats) {
                foreach ($this->collCommonConsultationHistoriqueEtats as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonDATEFINs) {
                foreach ($this->collCommonDATEFINs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonDAConsultations) {
                foreach ($this->collCommonDAConsultations as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonDCEs) {
                foreach ($this->collCommonDCEs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonDocumentExternes) {
                foreach ($this->collCommonDocumentExternes as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonHeliosPiecePublicites) {
                foreach ($this->collCommonHeliosPiecePublicites as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonHeliosPvConsultations) {
                foreach ($this->collCommonHeliosPvConsultations as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonHeliosRapportPrefets) {
                foreach ($this->collCommonHeliosRapportPrefets as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonHeliosTableauArs) {
                foreach ($this->collCommonHeliosTableauArs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonHeliosTeletransmissions) {
                foreach ($this->collCommonHeliosTeletransmissions as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonInterneConsultations) {
                foreach ($this->collCommonInterneConsultations as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonInterneConsultationSuiviSeuls) {
                foreach ($this->collCommonInterneConsultationSuiviSeuls as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonOffrePapiers) {
                foreach ($this->collCommonOffrePapiers as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonOffress) {
                foreach ($this->collCommonOffress as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonPanierEntreprises) {
                foreach ($this->collCommonPanierEntreprises as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonPiecesDCEsRelatedByRefConsultation) {
                foreach ($this->collCommonPiecesDCEsRelatedByRefConsultation as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation) {
                foreach ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonRGs) {
                foreach ($this->collCommonRGs as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonRetraitPapiers) {
                foreach ($this->collCommonRetraitPapiers as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonSupportPublications) {
                foreach ($this->collCommonSupportPublications as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonTelechargements) {
                foreach ($this->collCommonTelechargements as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef) {
                foreach ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonTelechargementAnonymesRelatedByConsultationRef) {
                foreach ($this->collCommonTelechargementAnonymesRelatedByConsultationRef as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonConsultationDocumentCfes) {
                foreach ($this->collCommonConsultationDocumentCfes as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonTCalendriers) {
                foreach ($this->collCommonTCalendriers as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonTParamDossierFormulaires) {
                foreach ($this->collCommonTParamDossierFormulaires as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonTReponseElecFormulaires) {
                foreach ($this->collCommonTReponseElecFormulaires as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collCommonVisiteLieuxs) {
                foreach ($this->collCommonVisiteLieuxs as $o) {
                    $o->clearAllReferences($deep);
                }
            }

            $this->alreadyInClearAllReferencesDeep = false;
        } // if ($deep)

        if ($this->collCommonAVISs instanceof PropelCollection) {
            $this->collCommonAVISs->clearIterator();
        }
        $this->collCommonAVISs = null;
        if ($this->collCommonAnnonces instanceof PropelCollection) {
            $this->collCommonAnnonces->clearIterator();
        }
        $this->collCommonAnnonces = null;
        if ($this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef instanceof PropelCollection) {
            $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef->clearIterator();
        }
        $this->collCommonAnnonceBoampsRelatedByOrganismeConsultationRef = null;
        if ($this->collCommonAnnonceBoampsRelatedByConsultationRef instanceof PropelCollection) {
            $this->collCommonAnnonceBoampsRelatedByConsultationRef->clearIterator();
        }
        $this->collCommonAnnonceBoampsRelatedByConsultationRef = null;
        if ($this->collCommonAvisPubs instanceof PropelCollection) {
            $this->collCommonAvisPubs->clearIterator();
        }
        $this->collCommonAvisPubs = null;
        if ($this->collCommonCategorieLots instanceof PropelCollection) {
            $this->collCommonCategorieLots->clearIterator();
        }
        $this->collCommonCategorieLots = null;
        if ($this->collCommonComplements instanceof PropelCollection) {
            $this->collCommonComplements->clearIterator();
        }
        $this->collCommonComplements = null;
        if ($this->collCommonConsultationHistoriqueEtats instanceof PropelCollection) {
            $this->collCommonConsultationHistoriqueEtats->clearIterator();
        }
        $this->collCommonConsultationHistoriqueEtats = null;
        if ($this->collCommonDATEFINs instanceof PropelCollection) {
            $this->collCommonDATEFINs->clearIterator();
        }
        $this->collCommonDATEFINs = null;
        if ($this->collCommonDAConsultations instanceof PropelCollection) {
            $this->collCommonDAConsultations->clearIterator();
        }
        $this->collCommonDAConsultations = null;
        if ($this->collCommonDCEs instanceof PropelCollection) {
            $this->collCommonDCEs->clearIterator();
        }
        $this->collCommonDCEs = null;
        if ($this->collCommonDocumentExternes instanceof PropelCollection) {
            $this->collCommonDocumentExternes->clearIterator();
        }
        $this->collCommonDocumentExternes = null;
        if ($this->collCommonHeliosPiecePublicites instanceof PropelCollection) {
            $this->collCommonHeliosPiecePublicites->clearIterator();
        }
        $this->collCommonHeliosPiecePublicites = null;
        if ($this->collCommonHeliosPvConsultations instanceof PropelCollection) {
            $this->collCommonHeliosPvConsultations->clearIterator();
        }
        $this->collCommonHeliosPvConsultations = null;
        if ($this->collCommonHeliosRapportPrefets instanceof PropelCollection) {
            $this->collCommonHeliosRapportPrefets->clearIterator();
        }
        $this->collCommonHeliosRapportPrefets = null;
        if ($this->collCommonHeliosTableauArs instanceof PropelCollection) {
            $this->collCommonHeliosTableauArs->clearIterator();
        }
        $this->collCommonHeliosTableauArs = null;
        if ($this->collCommonHeliosTeletransmissions instanceof PropelCollection) {
            $this->collCommonHeliosTeletransmissions->clearIterator();
        }
        $this->collCommonHeliosTeletransmissions = null;
        if ($this->collCommonInterneConsultations instanceof PropelCollection) {
            $this->collCommonInterneConsultations->clearIterator();
        }
        $this->collCommonInterneConsultations = null;
        if ($this->collCommonInterneConsultationSuiviSeuls instanceof PropelCollection) {
            $this->collCommonInterneConsultationSuiviSeuls->clearIterator();
        }
        $this->collCommonInterneConsultationSuiviSeuls = null;
        if ($this->collCommonOffrePapiers instanceof PropelCollection) {
            $this->collCommonOffrePapiers->clearIterator();
        }
        $this->collCommonOffrePapiers = null;
        if ($this->collCommonOffress instanceof PropelCollection) {
            $this->collCommonOffress->clearIterator();
        }
        $this->collCommonOffress = null;
        if ($this->collCommonPanierEntreprises instanceof PropelCollection) {
            $this->collCommonPanierEntreprises->clearIterator();
        }
        $this->collCommonPanierEntreprises = null;
        if ($this->collCommonPiecesDCEsRelatedByRefConsultation instanceof PropelCollection) {
            $this->collCommonPiecesDCEsRelatedByRefConsultation->clearIterator();
        }
        $this->collCommonPiecesDCEsRelatedByRefConsultation = null;
        if ($this->collCommonPiecesDCEsRelatedByOrganismeConsultation instanceof PropelCollection) {
            $this->collCommonPiecesDCEsRelatedByOrganismeConsultation->clearIterator();
        }
        $this->collCommonPiecesDCEsRelatedByOrganismeConsultation = null;
        if ($this->collCommonRGs instanceof PropelCollection) {
            $this->collCommonRGs->clearIterator();
        }
        $this->collCommonRGs = null;
        if ($this->collCommonRetraitPapiers instanceof PropelCollection) {
            $this->collCommonRetraitPapiers->clearIterator();
        }
        $this->collCommonRetraitPapiers = null;
        if ($this->collCommonSupportPublications instanceof PropelCollection) {
            $this->collCommonSupportPublications->clearIterator();
        }
        $this->collCommonSupportPublications = null;
        if ($this->collCommonTelechargements instanceof PropelCollection) {
            $this->collCommonTelechargements->clearIterator();
        }
        $this->collCommonTelechargements = null;
        if ($this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef instanceof PropelCollection) {
            $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef->clearIterator();
        }
        $this->collCommonTelechargementAnonymesRelatedByOrganismeConsultationRef = null;
        if ($this->collCommonTelechargementAnonymesRelatedByConsultationRef instanceof PropelCollection) {
            $this->collCommonTelechargementAnonymesRelatedByConsultationRef->clearIterator();
        }
        $this->collCommonTelechargementAnonymesRelatedByConsultationRef = null;
        if ($this->collCommonConsultationDocumentCfes instanceof PropelCollection) {
            $this->collCommonConsultationDocumentCfes->clearIterator();
        }
        $this->collCommonConsultationDocumentCfes = null;
        if ($this->collCommonTCalendriers instanceof PropelCollection) {
            $this->collCommonTCalendriers->clearIterator();
        }
        $this->collCommonTCalendriers = null;
        if ($this->collCommonTParamDossierFormulaires instanceof PropelCollection) {
            $this->collCommonTParamDossierFormulaires->clearIterator();
        }
        $this->collCommonTParamDossierFormulaires = null;
        if ($this->collCommonTReponseElecFormulaires instanceof PropelCollection) {
            $this->collCommonTReponseElecFormulaires->clearIterator();
        }
        $this->collCommonTReponseElecFormulaires = null;
        if ($this->collCommonVisiteLieuxs instanceof PropelCollection) {
            $this->collCommonVisiteLieuxs->clearIterator();
        }
        $this->collCommonVisiteLieuxs = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(CommonConsultationPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

}
